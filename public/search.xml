<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AT_abc318_c Blue Spring 题解</title>
    <url>/2023/10/04/AT_abc318_c%20Blue%20Spring%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="at_abc318_c-blue-spring-题解">AT_abc318_c Blue Spring 题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/AT_abc318_c">洛谷</a></p>
<p><a
href="https://atcoder.jp/contests/abc318/tasks/abc318_c">AtCoder</a></p>
<h2 id="description">Description</h2>
<p>你要进行一场旅行。第 <span class="math inline">\(i\)</span>
天的车票是 <span class="math inline">\(F_{i}\)</span> 元。你也可以选择用
<span class="math inline">\(P\)</span> 元买 <span
class="math inline">\(D\)</span>
张通票，通票可以在任意一天使用，你可以多次购买通票，但每次必须购买 <span
class="math inline">\(D\)</span> 的倍数张，求完成旅行的最小花费。</p>
<h2 id="solution">Solution</h2>
<p>很容易想到，只要我们能找到 <span class="math inline">\(D\)</span>
天车票的总价格大于 <span class="math inline">\(P\)</span>，就用 <span
class="math inline">\(D\)</span>
张通票代替即可。因此我们可以将单日车票按价格排序，每次取前 <span
class="math inline">\(D\)</span> 个判断是否买通票即可。时间复杂度 <span
class="math inline">\(\Omicron \left(n\log n \right)\)</span>。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 510101</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,d,p;</span><br><span class="line"><span class="type">int</span> nums[max_n];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n),<span class="built_in">read</span>(d),<span class="built_in">read</span>(p);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(nums + <span class="number">1</span>,nums + n + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">reverse</span>(nums + <span class="number">1</span>,nums + n + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n / d + <span class="number">1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sum1 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = (i - <span class="number">1</span>) * d + <span class="number">1</span>;j &lt;= i * d &amp;&amp; j &lt;= n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum1 += nums[j];</span><br><span class="line">        &#125;</span><br><span class="line">        ans += <span class="built_in">min</span>(sum1,p);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">writeln</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>AtCoder</tag>
      </tags>
  </entry>
  <entry>
    <title>AT_abc306_h Balance Scale 题解</title>
    <url>/2023/10/04/AT_abc306_h%20Balance%20Scale%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="at_abc306_h-balance-scale-题解">AT_abc306_h Balance Scale
题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/AT_abc306_h">洛谷</a></p>
<p><a
href="https://atcoder.jp/contests/abc306/tasks/abc306_h">AtCoder</a></p>
<h2 id="description">Description</h2>
<p>有 <span class="math inline">\(N\)</span> 个编号为 <span
class="math inline">\(1,2,\dots,N\)</span> 的砝码。有 <span
class="math inline">\(M\)</span> 次比较操作，每次比较砝码 <span
class="math inline">\(A_{i}\)</span> 和 <span
class="math inline">\(B_{i}\)</span>，<span
class="math inline">\(A_{i}\)</span> 在左侧。</p>
<p>分为三种情况： 1. 左边的砝码更重。 2. 右边的砝码更重。 3.
两边的砝码重量相同。</p>
<p>将每次比较的结果使用字符“&gt;”、“=”或“&lt;”记录下来，形成一个长度为
<span class="math inline">\(M\)</span> 的字符串 <span
class="math inline">\(S\)</span>。求一共有多少种可能的 <span
class="math inline">\(S\)</span>。答案对 <span
class="math inline">\(998\,244\,353\)</span> 取模。</p>
<h2 id="solution">Solution</h2>
<p>考虑如何对一组确定的砝码判断是否可行，若 <span
class="math inline">\(A_{i} &lt; B_{i}\)</span> 从 <span
class="math inline">\(A_{i}\)</span> 所在集合向 <span
class="math inline">\(B_{i}\)</span> 所在集合连边，若 <span
class="math inline">\(A_{i} &gt; B_{i}\)</span> 从 <span
class="math inline">\(B_{i}\)</span> 所在集合向 <span
class="math inline">\(A_{i}\)</span>
所在集合连边，相等利用并查集合并。如果出现环了无解。</p>
<p>但每条边的方向不知道，考虑到数据范围很小，可以使用状压 dp
枚举一个独立集，表示初始度数为 <span class="math inline">\(0\)</span>
的点。当我们删去其中度数为 <span class="math inline">\(0\)</span>
的点时，仍满足条件，因此我们有转移状态：</p>
<p><span class="math display">\[dp_{i} = \sum_{s \subset i,s \neq
\emptyset} dp_{i \setminus s}\]</span></p>
<p>但这样是错误的，某个集合本身被计算了，但他同时会作为另一个集合的子集被计算。我们容斥掉这些情况即可，考虑集合被算的次数与集合大小有关，简单的推出下面正确的转移方程。</p>
<p><span class="math display">\[dp_{i} = \sum_{s \subset i,s \neq
\emptyset} dp_{i \setminus s} \times {(-1)^{ \left ( \left |s \right |+1
\right )}}\]</span></p>
<p>其中 <span class="math inline">\(\left |s \right |\)</span> 表示集合
<span class="math inline">\(s\)</span> 的元素个数。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 410101</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mo 998244353</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k =  <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c &gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> fa[max_n],dp[max_n];</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; edge[max_n];</span><br><span class="line"><span class="type">int</span> can[max_n];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fa[x] == x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[x] = <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fa[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (-x) &amp; x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">popcount</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        ++cnt;</span><br><span class="line">        x -= <span class="built_in">lowbit</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n),<span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(edge[i].first),<span class="built_in">read</span>(edge[i].second);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; (<span class="number">1LL</span> &lt;&lt; n);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        can[i] = <span class="built_in">popcount</span>(i);</span><br><span class="line">        <span class="built_in">init</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 两个点都在集合中</span></span><br><span class="line">            <span class="keyword">if</span>((i &amp; (<span class="number">1</span> &lt;&lt; edge[j].first - <span class="number">1</span>)) &amp;&amp; (i &amp; (<span class="number">1</span> &lt;&lt; edge[j].second - <span class="number">1</span>)))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 合并</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">find</span>(edge[j].first) != <span class="built_in">find</span>(edge[j].second))</span><br><span class="line">                &#123;</span><br><span class="line">                    fa[<span class="built_in">find</span>(edge[j].first)] = <span class="built_in">find</span>(edge[j].second);</span><br><span class="line">                    <span class="comment">// 注意集合大小要减 1</span></span><br><span class="line">                    --can[i];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; (<span class="number">1</span> &lt;&lt; n);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i;j;j = i &amp;(j - <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(can[j] &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dp[i] += dp[i ^ j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                dp[i] += mo - dp[i ^ j];</span><br><span class="line">            &#125;</span><br><span class="line">            (dp[i] += mo)%= mo;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">writeln</span>(dp[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>AtCoder</tag>
      </tags>
  </entry>
  <entry>
    <title>AT_arc165_b [ARC165B] Sliding Window Sort 2 题解</title>
    <url>/2023/10/04/AT_arc165_b%20%5BARC165B%5D%20Sliding%20Window%20Sort%202%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="at_arc165_b-arc165b-sliding-window-sort-2-题解">AT_arc165_b
[ARC165B] Sliding Window Sort 2 题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/AT_arc165_b">洛谷</a></p>
<p><a
href="https://atcoder.jp/contests/arc165/tasks/arc165_b">AtCoder</a></p>
<h2 id="description">Description</h2>
<p>给定正整数 <span class="math inline">\(n,k\)</span> 和一个长度为
<span class="math inline">\(n\)</span> 的整数 <span
class="math inline">\(P\)</span>，你需要选择一个长度为 <span
class="math inline">\(k\)</span> 的区间 <span class="math inline">\([l,l
+ k - 1]\)</span>，将这个区间从小到大排序。</p>
<p>找到操作后最终字典序最大的排列。</p>
<p><span class="math inline">\(1 \leq k \leq n \leq 2 \times
10^{5}\)</span>。</p>
<h2 id="solution">Solution</h2>
<p>这是一篇常数比较大，可能比较麻烦的题解。<del>考场上被创死的一道题。</del></p>
<p>考虑我们排序后不会把大的元素移动到原来的前面，因此排序一定不优。</p>
<p>如果我们可以选择一个区间，排序后不变，那么选择这个区间一定是更优的。</p>
<p>考虑怎么判断一个区间排序后不变：在每个 <span
class="math inline">\(nums_{i} &lt; nums_{i +
1}\)</span>（也就是排序后相对位置会变化）的地方打上标记，如果一个长度为
<span class="math inline">\(k\)</span>
的区间没有标记就代表排序后不变。这部分可以用树状数组实现。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (-x)&amp;x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;x &lt;= n;x += <span class="built_in">lowbit</span>(x))</span><br><span class="line">    &#123;</span><br><span class="line">        tree[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x -= <span class="built_in">lowbit</span>(x))</span><br><span class="line">    &#123;</span><br><span class="line">        ans += tree[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(r &lt; l)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(r) - <span class="built_in">query</span>(l - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面是主函数中的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums[i] &lt; nums[i - <span class="number">1</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">add</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//   a     a</span></span><br><span class="line"><span class="comment">// 2 1 2 4 3</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n - k + <span class="number">1</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">query</span>(i + <span class="number">1</span>,i + k - <span class="number">1</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= n;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">writesp</span>(nums[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果必须变化，我们期望变的第一个越往后越好，这样字典序会尽量大，同时，我们期望变的个数少。</p>
<p>于是可以从后向前搜，只要 <span class="math inline">\(nums_{i - 1}
&lt; \min{\{nums_{i \dots i + k -
1}}\}\)</span>，我们向前移动排序的区间就不会造成 <span
class="math inline">\(nums_{i - 1}\)</span>
改变，而后面可能改变的地方变少了（上一个区间参与排序的 <span
class="math inline">\(nums_{i + k}\)</span>
不会参与排序了，相当于我们排序了一个更小的区间，一定不劣）。如果 <span
class="math inline">\(nums_{i - 1} &gt;
nums_{i}\)</span>，此时向前移动会导致第一个变小的位置向前移动，答案更劣，因此这时候需要停止搜索。</p>
<p>这部分的实现使用了 ST 表查找区间最小值。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> F[max_n][<span class="number">28</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ST</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    F[i][<span class="number">0</span>] = nums[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> k = <span class="built_in">log2</span>(n);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= k; j++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n - (<span class="number">1</span> &lt;&lt; j) + <span class="number">1</span>; i++) &#123;</span><br><span class="line">      F[i][j] = <span class="built_in">min</span>(F[i][j - <span class="number">1</span>], F[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ST_query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> k = <span class="built_in">log2</span>(r - l + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">min</span>(F[l][k], F[r - (<span class="number">1</span> &lt;&lt; k) + <span class="number">1</span>][k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主函数中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">ST</span>();</span><br><span class="line"><span class="type">int</span> beg,flag = n - k + <span class="number">1</span>; <span class="comment">// flag 就是最终选择的排序起点</span></span><br><span class="line"><span class="keyword">for</span>(beg = n - k + <span class="number">1</span>;beg &gt; <span class="number">1</span>;beg--)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums[beg - <span class="number">1</span>] &lt; <span class="built_in">ST_query</span>(beg,beg + k - <span class="number">2</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        flag = beg - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(nums[beg - <span class="number">1</span>] &gt; nums[beg])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// cout&lt;&lt;beg&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sort</span>(nums + flag,nums + flag + k);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">writesp</span>(nums[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>完整代码就不给出了，时间复杂度 <span class="math inline">\(O(n \log
n)\)</span>。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>AtCoder</tag>
      </tags>
  </entry>
  <entry>
    <title>AT_abc318_d General Weighted Max Matching 题解</title>
    <url>/2023/10/04/AT_abc318_d%20General%20Weighted%20Max%20Matching%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="at_abc318_d-general-weighted-max-matching-题解">AT_abc318_d
General Weighted Max Matching 题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/AT_abc318_d">洛谷</a></p>
<p><a
href="https://atcoder.jp/contests/abc318/tasks/abc318_d">AtCoder</a></p>
<h2 id="description">Description</h2>
<p>有一张 <span class="math inline">\(n\)</span>
个点的带权无向完全图，找出一些边使得这些边的端点没有重合且边权和最大。输出最大边权和。</p>
<h2 id="solution">Solution</h2>
<p>搜索即可，重点在于复杂度分析。都先我们确定一件事：一定会选择 <span
class="math inline">\(\left \lfloor \frac{n}{2} \right \rfloor\)</span>
条边，原因是边权非负，显然对于边数更少的我们可以多选边，答案更优。</p>
<p>因此极限情况下要选 <span class="math inline">\(8\)</span>
条边。我们知道，<span class="math inline">\(16\)</span>
个点的无向完全图有 <span class="math inline">\(\frac{16 \times 15}{2} =
120\)</span> 条边。因此第一条边有 <span
class="math inline">\(120\)</span>
种选择，之后，与这条边两个端点相连的就都不能选了，于是下一轮的可选边数是
<span class="math inline">\(120 - 15 \cdot 2 + 1 =
91\)</span>，以此类推，算出我们选边的方案数不超过 <span
class="math inline">\(10^{8}\)</span>。当然，我们选边是顺序无关的，因此我们搜索的时候可以强制按编号从小到大的顺序搜索。于是总方案为
<span class="math inline">\(\frac{10^{8}}{8!} &lt;
3000\)</span>，复杂度优秀！</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 121</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mp[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> cnt,n;</span><br><span class="line"><span class="type">int</span> vis[max_n];</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> u,v,w;</span><br><span class="line">&#125;edge[max_n];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> res,<span class="type">int</span> ls)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(now + <span class="number">2</span> &gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans,res);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = ls + <span class="number">1</span>;i &lt;= cnt;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = edge[i].u,v = edge[i].v,w = edge[i].w;</span><br><span class="line">        <span class="keyword">if</span>(vis[u] || vis[v])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = vis[v] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(now + <span class="number">2</span>,res + w,i);</span><br><span class="line">        vis[u] = vis[v] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> i = <span class="number">1</span>,w;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="type">int</span> j = i + <span class="number">1</span>;j &lt;= n;++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(w);</span><br><span class="line">            edge[++cnt] = &#123;i,j,w&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">writeln</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>AtCoder</tag>
      </tags>
  </entry>
  <entry>
    <title>AT_abc318_e Sandwiches 题解</title>
    <url>/2023/10/04/AT_abc318_e%20Sandwiches%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="at_abc318_e-sandwiches-题解">AT_abc318_e Sandwiches 题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/AT_abc318_e">洛谷</a></p>
<p><a
href="https://atcoder.jp/contests/abc318/tasks/abc318_e">AtCoder</a></p>
<h2 id="description">Description</h2>
<p>给定一个长度为 <span class="math inline">\(n\)</span> 的序列 <span
class="math inline">\(a\)</span>，找到满足以下条件的三元组 <span
class="math inline">\((i,j,k)\)</span> 的数量。</p>
<ul>
<li><span class="math inline">\(i &lt; j &lt; k\)</span>；</li>
<li><span class="math inline">\(a_{i} = a_{k}\)</span>；</li>
<li><span class="math inline">\(a_{i} \neq a_{j}\)</span>。</li>
</ul>
<p>数据范围：<span class="math inline">\(1 \leq n \leq 3 \times
10^{5}\)</span>，<span class="math inline">\(1 \leq a_{i} \leq
n\)</span>。</p>
<h2 id="solution">Solution</h2>
<p>由于要求 <span class="math inline">\(i &lt; j &lt;
k\)</span>，我们可以从左向右枚举 <span
class="math inline">\(k\)</span>，考虑对于这个 <span
class="math inline">\(k\)</span> 计算贡献。假设 <span
class="math inline">\(a_{k}\)</span> 在之前出现次数是 <span
class="math inline">\(cnt_{a_{k}}\)</span>，出现的位置集合是 <span
class="math inline">\(pos_{a_{k}} = \{pos_{a_{k},1}, \cdots,
pos_{a_{k},cnt_{a_{k}}}\}\)</span>。先考虑一种较劣的算法：枚举每个 <span
class="math inline">\(i\)</span>，那么 <span
class="math inline">\(j\)</span> 的数量可以很轻松的确定（注意减去中间
<span class="math inline">\(a_{j}\)</span> 和 <span
class="math inline">\(a_{k}\)</span> 相同的数量）。于是这个 <span
class="math inline">\(k\)</span> 的贡献是：</p>
<p><span class="math display">\[
\sum_{i = 1}^{cnt_{a_{k}}} \left ( k - pos_{a_{k},i} - cnt_{a_{k}} + i
\right)
\]</span></p>
<p>此时复杂度为 <span class="math inline">\(\Omicron
(n^{2})\)</span>。</p>
<p>考虑拆上面的式子，令其为 <span
class="math inline">\(f(k)\)</span>：</p>
<p><span class="math display">\[
\begin{aligned}
    f(k)  &amp;= \sum_{i = 1}^{cnt_{a_{k}}}  k - \sum_{i =
1}^{cnt_{a_{k}}} pos_{a_{k},i} - \sum_{i = 1}^{cnt_{a_{k}}} cnt_{a_{k}}
+ \sum_{i = 1}^{cnt_{a_{k}}}i
  \\  &amp;=cnt_{a_{k}} \cdot k - \sum_{i = 1}^{cnt_{a_{k}}}
pos_{a_{k},i} - cnt_{a_{k}}^{2} + \frac{cnt_{a_{k}} \times (cnt_{a_{k}}
+ 1)}{2}
\\ &amp;=cnt_{a_{k}} \cdot k -  \sum_{i = 1}^{cnt_{a_{k}}} pos_{a_{k},i}
- \frac{cnt_{a_{k}} \times (cnt_{a_{k}} + 1)}{2}
\end{aligned}
\]</span></p>
<p>对每个数字为何一个出现位置的前缀和 <span class="math inline">\(sum =
\sum_{i = 1}^{cnt_{a_{k}}} pos_{a_{k},i}\)</span> 就可以 <span
class="math inline">\(\Omicron(1)\)</span> 计算每个 <span
class="math inline">\(k\)</span> 的贡献了，总时间复杂度 <span
class="math inline">\(\Omicron (n)\)</span>。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 510101</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,ans = <span class="number">0</span>,nums[max_n],sum[max_n],cnt[max_n];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(cnt[nums[i]] &gt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += cnt[nums[i]] * i - sum[nums[i]] - ((cnt[nums[i]] + <span class="number">1</span>) * (cnt[nums[i]]) / <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sum[nums[i]] += i;</span><br><span class="line">        cnt[nums[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">writeln</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>AtCoder</tag>
      </tags>
  </entry>
  <entry>
    <title>AT_arc165_c [ARC165C] Social Distance on Graph 题解</title>
    <url>/2023/10/04/AT_arc165_c%20%5BARC165C%5D%20Social%20Distance%20on%20Graph%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="at_arc165_c-arc165c-social-distance-on-graph-题解">AT_arc165_c
[ARC165C] Social Distance on Graph 题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/AT_arc165_c">洛谷</a></p>
<p><a
href="https://atcoder.jp/contests/arc165/tasks/arc165_c">AtCoder</a></p>
<h2 id="description">Description</h2>
<p>给定一个无向带权图，将所有节点染成黑色或白色，使得最终相同颜色节点之间距离的最小值最大。</p>
<p><span class="math inline">\(1 \leq n \leq 2 \times
10^{5}\)</span>，<span class="math inline">\(n - 1 \leq m \leq
\min(\frac{n \times (n - 1)}{2},2 \times 10^{5})\)</span>。</p>
<h2 id="solution">Solution</h2>
<p>貌似比 B 简单一点。</p>
<p>考虑对这张图进行染色的过程：</p>
<ol type="1">
<li><p>如果图本身可以染色使得没有相邻顶点颜色相同，这样的染色一定是最优的，此时我们找到相邻两条边权和的最小值即可。</p></li>
<li><p>否则，我们一定需要把某些相邻顶点染成相同颜色，那么我们要<strong>尽可能先满足权值小的边相连的点颜色不同</strong>，这样才能保证最小值尽可能大。</p></li>
</ol>
<p>由于树始终能构造出相邻顶点颜色不同的染色方法，结合边权从大到小，可以想到在最小生成树上染色。染色后再按照
1. 的步骤进行即可。</p>
<p>需要注意的是可能存在两条最小生成树上相邻边的长度大于这两个点直接相连的边的边权，因此答案要还有对所有连接颜色相同顶点的边权取最小值。</p>
<p>第 1. 显然可以按照第 2.
的方法操作，因此我们不需要判断，直接构建最小生成树染色即可。</p>
<p>如果直接枚举相邻边算答案会超时，所以记录一下每个点连接的最小值和次小值即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 510101</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> to,nxt,val;</span><br><span class="line">&#125;edge[max_n];</span><br><span class="line"><span class="type">int</span> head[max_n],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].to = v;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    edge[tot].val = w;</span><br><span class="line">    head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> from,to,val;</span><br><span class="line">&#125;G[max_n];</span><br><span class="line"><span class="type">int</span> awa = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Line id1,Line id2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id1.val &lt; id2.val;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> fa[max_n];</span><br><span class="line"><span class="type">int</span> mn[max_n],mmn[max_n];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_fa</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(fa[u] == u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[u] = <span class="built_in">find_fa</span>(fa[u]);</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; THU;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Kruskal</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> nums = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">sort</span>(G + <span class="number">1</span>, G + m + <span class="number">1</span>, cmp);</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">find_fa</span>(G[i].from) != <span class="built_in">find_fa</span>(G[i].to)) &#123;</span><br><span class="line">  <span class="comment">//   cout&lt;&lt; G[i].from&lt;&lt;&quot; &quot;&lt;&lt;G[i].to&lt;&lt;&quot; &quot;&lt;&lt;G[i].val&lt;&lt;endl;</span></span><br><span class="line">    <span class="type">int</span> u = G[i].from,v = G[i].to;</span><br><span class="line">   <span class="comment">// cout&lt;&lt;&quot;@&quot;&lt;&lt;mn[u]&lt;&lt;&quot; &quot;&lt;&lt;mmn[u]&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">if</span>(G[i].val &lt; mn[u])</span><br><span class="line">    &#123;</span><br><span class="line">        mmn[u] = mn[u];</span><br><span class="line">        mn[u] = G[i].val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(G[i].val &lt; mmn[u])</span><br><span class="line">    &#123;</span><br><span class="line">        mmn[u] = G[i].val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(G[i].val &lt; mn[v])</span><br><span class="line">    &#123;</span><br><span class="line">        mmn[v] = mn[v];</span><br><span class="line">        mn[v] = G[i].val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(G[i].val &lt; mmn[v])</span><br><span class="line">    &#123;</span><br><span class="line">        mmn[v] = G[i].val;</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="built_in">add</span>(G[i].from,G[i].to,G[i].val);</span><br><span class="line">      <span class="built_in">add</span>(G[i].to,G[i].from,G[i].val);</span><br><span class="line">      nums++;</span><br><span class="line">      fa[<span class="built_in">find_fa</span>(G[i].from)] = <span class="built_in">find_fa</span>(G[i].to);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (nums == n - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> col[max_n],vis[max_n];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa,<span class="type">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vis[u] = <span class="number">1</span>;</span><br><span class="line">    col[u] = c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = head[u];i;i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v == fa)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(vis[v] &amp;&amp; col[v] != c)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(vis[v])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">dfs</span>(v,u,c ^ <span class="number">1</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n),<span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fa[i] = i;</span><br><span class="line">        mn[i] = mmn[i] = INT_MAX;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,u,v,w;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">read</span>(u),<span class="built_in">read</span>(v),<span class="built_in">read</span>(w);</span><br><span class="line">        G[i] = &#123;u,v,w&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    tot = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">Kruskal</span>();</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> ans = INT_MAX;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">// cout&lt;&lt;mn[i]&lt;&lt;&quot; &quot;&lt;&lt;mmn[i]&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">if</span>(mmn[i] != INT_MAX)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans,mn[i] + mmn[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = G[i].from,v = G[i].to,w = G[i].val;</span><br><span class="line">        <span class="keyword">if</span>(col[u] == col[v])</span><br><span class="line">        &#123;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans,w);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">writeln</span>(ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>AtCoder</tag>
      </tags>
  </entry>
  <entry>
    <title>AT_arc165_d [ARC165D] Substring Comparison 题解</title>
    <url>/2023/10/04/AT_arc165_d%20%5BARC165D%5D%20Substring%20Comparison%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="at_arc165_d-arc165d-substring-comparison-题解">AT_arc165_d
[ARC165D] Substring Comparison 题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/AT_arc165_d">洛谷</a></p>
<p><a
href="https://atcoder.jp/contests/arc165/tasks/arc165_d">AtCoder</a></p>
<h2 id="description">Description</h2>
<p>给定正整数 <span class="math inline">\(n,m\)</span> 和 <span
class="math inline">\(m\)</span> 个形如 <span
class="math inline">\((A_{i},B_{i},C_{i},D_{i})\)</span>
的限制条件。</p>
<p>判断是否存在一个长度为 <span class="math inline">\(n\)</span> 的序列
<span class="math inline">\(P\)</span> 满足 <span
class="math inline">\(\forall i \in [1,m]\)</span>，<span
class="math inline">\(P_{A_{i} \dots B_{i}}\)</span> 字典序小于 <span
class="math inline">\(P_{C_{i} \dots D_{i}}\)</span>。</p>
<p><span class="math inline">\(1 \leq n,m \leq 2 \times
10^{3}\)</span>。</p>
<h2 id="solution">Solution</h2>
<p>考虑比较字典序时的操作：如果某一位相同，不会造成影响，当一个串先比较完时，这个串更小，否则字典序取决于需要的比较第一个不同的。</p>
<p>因此可以考虑逐步减小限制的区间，具体的，当两个区间均不为空时，我们判断两区间左端是否相同，若相同，区间左端一起向右移动一位即可。</p>
<p>考虑剩下的小于关系构成的有向图：如果存在环，这些数必须相同，大小关系继承到下一位。</p>
<p>如果不存在环，答案成立，直接输出即可。</p>
<p>如果一组限制的第二个区间先被取完，这样的数据无法构造出解，直接输出即可。</p>
<p>实现的时候用并查集记录大小相同的位置，用 tarjan 找环。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: D - Substring Comparison</span></span><br><span class="line"><span class="comment">// Contest: AtCoder - AtCoder Regular Contest 165</span></span><br><span class="line"><span class="comment">// URL: https://atcoder.jp/contests/arc165/tasks/arc165_d</span></span><br><span class="line"><span class="comment">// Memory Limit: 1024 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 510101</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> to, nxt;</span><br><span class="line">&#125; edge[max_n];</span><br><span class="line"><span class="type">int</span> head[max_n], tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].to = v;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Query</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b, c, d;</span><br><span class="line">&#125; que[max_n];</span><br><span class="line"><span class="type">int</span> fa[max_n];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[u] == u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> u;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fa[u] = <span class="built_in">find</span>(fa[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">find</span>(u) == <span class="built_in">find</span>(v))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fa[<span class="built_in">find</span>(u)] = <span class="built_in">find</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dfn[max_n], low[max_n], timer, st[max_n], vis[max_n];</span><br><span class="line"><span class="type">int</span> col[max_n], c;</span><br><span class="line"><span class="type">bool</span> no_circle;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    st[++st[<span class="number">0</span>]] = u;</span><br><span class="line">    dfn[u] = low[u] = ++timer;</span><br><span class="line">    vis[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[v])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">tarjan</span>(v);</span><br><span class="line">            low[u] = <span class="built_in">min</span>(low[u], low[v]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (vis[v])</span><br><span class="line">        &#123;</span><br><span class="line">            low[u] = <span class="built_in">min</span>(low[u], dfn[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (dfn[u] == low[u])</span><br><span class="line">    &#123;</span><br><span class="line">        ++c;</span><br><span class="line">        <span class="type">int</span> now;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            now = st[st[<span class="number">0</span>]--];</span><br><span class="line">            col[c] = c;</span><br><span class="line">            <span class="built_in">merge</span>(u, now);</span><br><span class="line">            vis[now] = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span> (now != u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fa[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(que[i].a);</span><br><span class="line">        <span class="built_in">read</span>(que[i].b);</span><br><span class="line">        <span class="built_in">read</span>(que[i].c);</span><br><span class="line">        <span class="built_in">read</span>(que[i].d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> T = <span class="number">1</span>; T &lt;= m; T++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            head[j] = <span class="number">0</span>;</span><br><span class="line">            dfn[j] = low[j] = <span class="number">0</span>;</span><br><span class="line">            vis[j] = <span class="number">0</span>;</span><br><span class="line">            col[j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        tot = <span class="number">0</span>, c = <span class="number">0</span>, timer = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">find</span>(que[i].a) == <span class="built_in">find</span>(que[i].c) &amp;&amp; que[i].a &lt;= que[i].b &amp;&amp; que[i].c &lt;= que[i].d)</span><br><span class="line">            &#123;</span><br><span class="line">                ++que[i].a;</span><br><span class="line">                ++que[i].c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (que[i].c &gt; que[i].d)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (que[i].a &lt;= que[i].b)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">add</span>(<span class="built_in">find</span>(que[i].a), <span class="built_in">find</span>(que[i].c));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!dfn[j])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">tarjan</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>AtCoder</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1268B 题解</title>
    <url>/2023/10/04/CF1268B%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf1268b-题解">CF1268B 题解</h1>
<h2 id="题目翻译">题目翻译</h2>
<p>给你一个杨表，用一个有 <span class="math inline">\(n\)</span>
个元素的数组 <span class="math inline">\(a\)</span>
表示杨表每一列的高度。你需要用 <span class="math inline">\(1 \times
2\)</span> 或 <span class="math inline">\(2 \times 1\)</span>
的骨牌填充这个杨表，求出最多填充的骨牌数量。</p>
<h2 id="题目分析">题目分析</h2>
<p>我们先来处理一个问题：什么是杨表？</p>
<ul>
<li><strong>杨表是一种每行长度（或每列高度）
单调递减的不规则图</strong>，注意这里<strong>并非</strong>要求严格递减，相邻行的长度（或列的高度）可以相同。</li>
</ul>
<p>对于这道题，我们将杨表交替染色。为了统一标准，我们规定第奇数行的第奇数个位置染为黑色，交错排列。</p>
<p>例如题目中给出的图片，染色后如下图。</p>
<figure>
<img src="https://cdn.luogu.com.cn/upload/image_hosting/gjmquur9.png"
alt="染色图片" />
<figcaption aria-hidden="true">染色图片</figcaption>
</figure>
<p>染色之后，我们可以从小的杨表入手，推导关系。如下图所示，我们可以发现，对于黑白色数量相同的杨图：
-
若有长度相同的行（或高度相同的列），则可以将最外侧高度相同的两个块用一个单位杨图覆盖，例如上图，可用单位杨图覆盖第二行第三、第四两小块（上图并不符合我们黑白色数相同的条件，在此仅用于举例），剩余部分仍为黑白数量相同，且存在长度相同的行（或高度相同的列）。如此递归，可用单位杨图覆盖原图形。</p>
<figure>
<img src="https://cdn.luogu.com.cn/upload/image_hosting/iu9xhbnt.png"
alt="排列图片" />
<figcaption aria-hidden="true">排列图片</figcaption>
</figure>
<ul>
<li>而白色和黑色个数不同的杨图，一定形如下图所示的严格单调递增阶梯状，无论何种情况的阶梯状杨表都无法做到白色和黑色个数相同。</li>
</ul>
<figure>
<img src="https://cdn.luogu.com.cn/upload/image_hosting/0s0tl2ot.png"
alt="阶梯" />
<figcaption aria-hidden="true">阶梯</figcaption>
</figure>
<p>通过推导，我们可以发现用左上角的两个单位杨图，可以以拼成任意<strong>白色和黑色个数相同</strong>的杨图（以下称为优秀杨图），此时填充的骨牌数量即为白色格子数。在优秀杨图上，我们可以继续拓展，得到所有的杨图。若从一个优秀杨图拓展到目标图需要的格子最少（以下称为最优方案），则拓展的部分不能再放骨牌（否则会产生新的单位杨图，可以从包含新产生的单位杨图的优秀杨图开始拓展，原方案不是最优方案）。</p>
<p>因此，我们得出了结论，<strong>可以摆放的骨牌数等于单位杨图数量即黑白块中个数较少的块数</strong>。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 300100</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x/<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,num;</span><br><span class="line"><span class="type">int</span> sum1,sum2;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> _clang_</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span> </span></span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(num);</span><br><span class="line">        sum1 += num /<span class="number">2</span>;</span><br><span class="line">        sum2 += num/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(num%<span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> !=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum1++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                sum2++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">writeln</span>(<span class="built_in">min</span>(sum1,sum2));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1394D Boboniu and Jianghu 题解</title>
    <url>/2023/10/04/CF1394D%20Boboniu%20and%20Jianghu%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf1394d-boboniu-and-jianghu-题解">CF1394D Boboniu and Jianghu
题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1394D">Luogu</a></p>
<p><a
href="http://codeforces.com/problemset/problem/1394/D">Codeforces</a></p>
<h2 id="solution">Solution</h2>
<p>可以处理出对于每个点，向下 <span class="math inline">\(b\)</span>
递增的最小 <span class="math inline">\(a\)</span> 之和 <span
class="math inline">\(dp_{i,0}\)</span> 和向下 <span
class="math inline">\(b\)</span> 递减的最小 <span
class="math inline">\(a\)</span> 之和 <span
class="math inline">\(dp_{i,1}\)</span>。令与一个点 <span
class="math inline">\(u\)</span> 相连的点中有 <span
class="math inline">\(k_{1}\)</span> 个 <span
class="math inline">\(b\)</span> 值大于点 <span
class="math inline">\(u\)</span> 的，剩余 <span
class="math inline">\(k_{2}\)</span> 个小于点 <span
class="math inline">\(u\)</span> 的，则该点贡献为 <span
class="math inline">\(\max(k_{1},k_{2}) \times a_{u}\)</span>。</p>
<p>对于个端点指出的边，若两端点的 <span class="math inline">\(b\)</span>
值相等则既可以连接子树递增的链，又可以连接子树递减的链。我们先假设连接递增的链，然后贪心的改变一些链接情况。具体的，找到从链接递增改变到连接递减后改变最大的一部分进行改变。</p>
<p>利用 dfs 进行转移即可。</p>
<p>该部分代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>, cnt_up = <span class="number">0</span>, cnt_down = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        <span class="comment">// 可以递增，可以递减</span></span><br><span class="line">        <span class="keyword">if</span> (points[u].b == points[v].b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 换一个的价值</span></span><br><span class="line">            st[u].<span class="built_in">push_back</span>(dp[v][<span class="number">1</span>] - dp[v][<span class="number">0</span>]);</span><br><span class="line">            <span class="comment">// 先假定递增</span></span><br><span class="line">            ++cnt_up;</span><br><span class="line">            sum += dp[v][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (points[u].b &gt; points[v].b)</span><br><span class="line">        &#123;</span><br><span class="line">            ++cnt_up;</span><br><span class="line">            sum += dp[v][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ++cnt_down;</span><br><span class="line">            sum += dp[v][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(st[u].<span class="built_in">begin</span>(), st[u].<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">// 把多少个转换</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= st[u].<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[u][<span class="number">0</span>] = <span class="built_in">min</span>(dp[u][<span class="number">0</span>], sum + <span class="built_in">max</span>(cnt_up, cnt_down + (u != <span class="number">1</span>)) * points[u].a);</span><br><span class="line">        dp[u][<span class="number">1</span>] = <span class="built_in">min</span>(dp[u][<span class="number">1</span>], sum + <span class="built_in">max</span>(cnt_up + (u != <span class="number">1</span>), cnt_down) * points[u].a);</span><br><span class="line">        --cnt_up, ++cnt_down; <span class="comment">// 改变了一条边</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; st[u].<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            sum += st[u][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意到当 <span class="math inline">\(u = 1\)</span>
时需要特殊转移，即两条链可以合并为一条。最终答案即为 <span
class="math inline">\(\min(dp_{1,0},dp_{1,1})\)</span>。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 210101</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> to, nxt;</span><br><span class="line">&#125; edge[max_n &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> head[max_n], tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].to = v;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a, b;</span><br><span class="line">&#125; points[max_n];</span><br><span class="line"><span class="type">int</span> dp[max_n][<span class="number">2</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; st[max_n];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>, cnt_up = <span class="number">0</span>, cnt_down = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span> (v == fa)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(v, u);</span><br><span class="line">        <span class="comment">// 可以递增，可以递减</span></span><br><span class="line">        <span class="keyword">if</span> (points[u].b == points[v].b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 换一个的价值</span></span><br><span class="line">            st[u].<span class="built_in">push_back</span>(dp[v][<span class="number">1</span>] - dp[v][<span class="number">0</span>]);</span><br><span class="line">            <span class="comment">// 先假定递增</span></span><br><span class="line">            ++cnt_up;</span><br><span class="line">            sum += dp[v][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (points[u].b &gt; points[v].b)</span><br><span class="line">        &#123;</span><br><span class="line">            ++cnt_up;</span><br><span class="line">            sum += dp[v][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ++cnt_down;</span><br><span class="line">            sum += dp[v][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(st[u].<span class="built_in">begin</span>(), st[u].<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">// 把多少个转换</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= st[u].<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[u][<span class="number">0</span>] = <span class="built_in">min</span>(dp[u][<span class="number">0</span>], sum + <span class="built_in">max</span>(cnt_up, cnt_down + (u != <span class="number">1</span>)) * points[u].a);</span><br><span class="line">        dp[u][<span class="number">1</span>] = <span class="built_in">min</span>(dp[u][<span class="number">1</span>], sum + <span class="built_in">max</span>(cnt_up + (u != <span class="number">1</span>), cnt_down) * points[u].a);</span><br><span class="line">        --cnt_up, ++cnt_down; <span class="comment">// 改变了一条边</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; st[u].<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            sum += st[u][i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _clang_</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(points[i].a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(points[i].b);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, u, v; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u), <span class="built_in">read</span>(v);</span><br><span class="line">        <span class="built_in">add</span>(u, v);</span><br><span class="line">        <span class="built_in">add</span>(v, u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="built_in">sizeof</span>(dp));</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">writeln</span>(<span class="built_in">min</span>(dp[<span class="number">1</span>][<span class="number">0</span>], dp[<span class="number">1</span>][<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF14D Two Paths题解</title>
    <url>/2023/10/04/CF14D%20Two%20Paths%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf14d-two-paths-题解">CF14D Two Paths 题解</h1>
<h2 id="题目链接">题目链接</h2>
<p><a href="https://www.luogu.com.cn/problem/CF14D">传送门</a></p>
<h2 id="题意简述">题意简述</h2>
<p>给定一棵树，找出两条不经过相同点的最长路径，使得他们的长度乘积最大。</p>
<h2 id="题目分析">题目分析</h2>
<p>首先，如果在一棵树上，两条路径没有共同的点，那么这两条路径对应的两个深度更小的端点之间一定有唯一一条路径。我们只需要删掉这条路径上任意一条边，就可以分离这两个路径。</p>
<p>看到两秒的时间限制和 <span class="math inline">\(n \le 200\)</span>
的数据范围，我们可以想到暴力删除每一条边，在分成的两颗子树中找到直径即可。</p>
<p>关于如何找到直径，有两种方法，请参考 <a
href="https://oi-wiki.org/graph/tree-diameter/">oi_wiki
中相关内容</a>。</p>
<p>此外，在删边找直径时，为了方便，我们可以直接将删掉的边 <span
class="math inline">\(e\)</span> 的两个端点 <span
class="math inline">\(u\)</span> 和 <span
class="math inline">\(v\)</span> 授予子孙关系，这样在 dfs
的时候就不会遍历到另一棵树上了。</p>
<h2 id="代码示例">代码示例</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 300</span></span><br><span class="line"><span class="comment">//以下为读入输出优化模板</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上为读入输出优化模板</span></span><br><span class="line"><span class="comment">//需要开两个记录边的vector，e 在删边时使用，edge 在 dfs 的时候使用</span></span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; e;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; edge[max_n];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> dis1[max_n],dis2[max_n];<span class="comment">//求树的直径需要用到的辅助数组，dis1[i]为从i开始最长的边，dis2[i]为从i开始第二长的边</span></span><br><span class="line"><span class="type">int</span> max_d = <span class="number">0</span>;<span class="comment">//记录树的直径</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dis1[u] = dis2[u] = <span class="number">0</span>;<span class="comment">//初值都为0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> v:edge[u])<span class="comment">//遍历与u相连的每一个点 等价于 for(int i = 0;i&lt;edge[u].size();i++) v = edge[u][i]</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(v == fa)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="built_in">dfs</span>(v,u);</span><br><span class="line">        <span class="type">int</span> now = dis1[v] +<span class="number">1</span>;<span class="comment">//这条路径的长度</span></span><br><span class="line">        <span class="keyword">if</span>(now&gt;dis1[u])<span class="comment">//大于最长路分别更新最长路和次长路</span></span><br><span class="line">        &#123;</span><br><span class="line">            dis2[u] = dis1[u];</span><br><span class="line">            dis1[u] = now;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(now &gt; dis2[u])<span class="comment">//大于次长路更新次长路</span></span><br><span class="line">        &#123;</span><br><span class="line">            dis2[u] = now;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    max_d = <span class="built_in">max</span>(max_d,dis1[u] + dis2[u]);<span class="comment">//最后一条经过u的路径的最大长度即为最长路加次长路</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//测试用</span></span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> _clang_</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="type">int</span> u,v;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u),<span class="built_in">read</span>(v);</span><br><span class="line">        <span class="comment">//分别加边</span></span><br><span class="line">        e.<span class="built_in">push_back</span>(&#123;u,v&#125;);</span><br><span class="line">        edge[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">        edge[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> d1 = <span class="number">0</span>,d2 = <span class="number">0</span>,ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//一定要初始化！</span></span><br><span class="line">        <span class="built_in">memset</span>(dis1,<span class="number">0</span>,<span class="built_in">sizeof</span>(dis1));</span><br><span class="line">        <span class="built_in">memset</span>(dis2,<span class="number">0</span>,<span class="built_in">sizeof</span>(dis2));</span><br><span class="line">        max_d = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//找e[i-1].first所在子树的直径</span></span><br><span class="line">        <span class="built_in">dfs</span>(e[i<span class="number">-1</span>].first,e[i<span class="number">-1</span>].second);</span><br><span class="line">        d1 = max_d;</span><br><span class="line">        <span class="comment">////找e[i-1].second所在子树的直径</span></span><br><span class="line">        max_d = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(e[i<span class="number">-1</span>].second,e[i<span class="number">-1</span>].first);</span><br><span class="line">        d2 = max_d;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans,d1*d2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">writeln</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1512C A-B Palindrome 题解</title>
    <url>/2023/10/04/CF1512C%20A-B%20Palindrome%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf1512c-a-b-palindrome-题解">CF1512C A-B Palindrome 题解</h1>
<h2 id="link">Link</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1512C">洛谷</a></p>
<p><a href="https://www.luogu.com.cn/problem/CF1512C">Codeforces</a></p>
<h2 id="description">Description</h2>
<p>给出 <span class="math inline">\(T\)</span> 个只由
<code>0</code>、<code>1</code> 和 <code>?</code> 组成的字符串 <span
class="math inline">\(s\)</span>，将字符串中的 <code>?</code> 替换成
<code>0</code> 或 <code>1</code> 之后形成一个回文串并且恰好有 <span
class="math inline">\(a\)</span> 个 <code>0</code> 和 <span
class="math inline">\(b\)</span> 个 <code>1</code>，无解输出
<code>-1</code>。</p>
<h2 id="solution">Solution</h2>
<p>首先，若不考虑 <code>?</code> 原串不为回文串一定无解，输出
<code>-1</code> 即可。</p>
<p>下面进行分类讨论。</p>
<ol type="1">
<li>若 <span class="math inline">\(s_{i}\)</span> 为
<code>?</code>：</li>
</ol>
<ul>
<li>当 <span class="math inline">\(s_{n - i + 1}\)</span> 为
<code>0</code> 时，<span class="math inline">\(s_{i}\)</span> 也应该为
<code>0</code>，将 <span class="math inline">\(a\)</span> 减一并将 <span
class="math inline">\(s_{i}\)</span> 改为 <code>0</code>。</li>
<li>当 <span class="math inline">\(s_{n - i + 1}\)</span> 为
<code>1</code> 时，<span class="math inline">\(s_{i}\)</span> 也应该为
<code>1</code>，将 <span class="math inline">\(b\)</span> 减一并将 <span
class="math inline">\(s_{i}\)</span> 改为 <code>1</code>。</li>
<li>当 <span class="math inline">\(s_{n - i + 1}\)</span> 为
<code>?</code> 时，二者相等即可，记录一下个数为 <span
class="math inline">\(cnt\)</span>。</li>
</ul>
<ol start="2" type="1">
<li><p>若 <span class="math inline">\(s_{i}\)</span> 为
<code>0</code>：当 <span class="math inline">\(s_{n - i + 1}\)</span> 为
<code>1</code> 时，无解。否则 <span class="math inline">\(a\)</span>
减一即可（对 <span class="math inline">\(s_{n - i + 1}\)</span>
的处理在枚举到该位置时处理）。</p></li>
<li><p>若 <span class="math inline">\(s_{i}\)</span> 为
<code>1</code>：当 <span class="math inline">\(s_{n - i + 1}\)</span> 为
<code>0</code> 时，无解。否则 <span class="math inline">\(b\)</span>
减一即可（对 <span class="math inline">\(s_{n - i + 1}\)</span>
的处理在枚举到该位置时处理）。</p></li>
</ol>
<p>当处理完成时，若 <span class="math inline">\(a &lt; 0\)</span> 或
<span class="math inline">\(b &lt; 0\)</span> 或 <span
class="math inline">\(a + b \ne cnt\)</span> 无解。</p>
<p>若 <span class="math inline">\(n\)</span> 为奇数：</p>
<ul>
<li><p>当 <span class="math inline">\(s_{\left \lfloor \frac{n}{2}
\right \rfloor + 1}\)</span> 为 <code>?</code> 时，<span
class="math inline">\(a\)</span> 和 <span
class="math inline">\(b\)</span> 只能有一个为奇数，并将 <span
class="math inline">\(s_{\left \lfloor \frac{n}{2} \right \rfloor +
1}\)</span> 替换为对应的数即可。</p></li>
<li><p>否则 <span class="math inline">\(a\)</span> 和 <span
class="math inline">\(b\)</span> 必须均为偶数才有解。</p></li>
</ul>
<p>遍历一次，遇到 <code>?</code> 判断能填哪个就可以了。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 310010</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">int</span> a, b, cnt;</span><br><span class="line"><span class="type">char</span> s[max_n];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _clang_</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">read</span>(a), <span class="built_in">read</span>(b);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (n != a + b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">bool</span> ans = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[n - i + <span class="number">1</span>] != s[i] &amp;&amp; s[n - i + <span class="number">1</span>] != <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                b--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[n - i + <span class="number">1</span>] != s[i] &amp;&amp; s[n - i + <span class="number">1</span>] != <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ans = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                a--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[n - i + <span class="number">1</span>] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    s[i] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                    a--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (s[n - i + <span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    s[i] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">                    b--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    ++cnt;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!ans)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (a &lt; <span class="number">0</span> || b &lt; <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cnt == a + b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; s[n / <span class="number">2</span> + <span class="number">1</span>] == <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a &amp; <span class="number">1</span>) &amp;&amp; (!(b &amp; <span class="number">1</span>)))</span><br><span class="line">                &#123;</span><br><span class="line">                    a--;</span><br><span class="line">                    s[n / <span class="number">2</span> + <span class="number">1</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((b &amp; <span class="number">1</span>) &amp;&amp; (!(a &amp; <span class="number">1</span>)))</span><br><span class="line">                &#123;</span><br><span class="line">                    b--;</span><br><span class="line">                    s[n / <span class="number">2</span> + <span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((a &amp; <span class="number">1</span>) || (b &amp; <span class="number">1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[i] == <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (a)</span><br><span class="line">                    &#123;</span><br><span class="line">                        a -= <span class="number">2</span>;</span><br><span class="line">                        s[i] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                        s[n - i + <span class="number">1</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        b -= <span class="number">2</span>;</span><br><span class="line">                        s[i] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">                        s[n - i + <span class="number">1</span>] = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">putchar</span>(s[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1580D Subsequence 题解</title>
    <url>/2023/10/04/CF1580D%20Subsequence%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf1580d-subsequence-题解">CF1580D Subsequence 题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1580D">Luogu</a></p>
<p><a
href="https://codeforces.com/problemset/problem/1580/D">Codeforces</a></p>
<h2 id="description">Description</h2>
<p>从长度为 <span class="math inline">\(n\)</span> 的序列中按顺序选择
<span class="math inline">\(m\)</span> 个值，定义其权值为所选数和的
<span class="math inline">\(m\)</span>
倍减去在原序列中所选的数两两之间的最小值。</p>
<p>首先我们看一下要求的这一个东西，对它进行一下化简。</p>
<hr />
<p><span class="math display">\[\begin{aligned} \sum_{i = 1}^m (m \cdot
a_{b_i}) - \sum_{i = 1}^m \sum_{j = 1}^m f(\min(b_i, b_j), \max(b_i,
b_j)) &amp;= \sum_{i = 1}^m (m \cdot a_{b_i}) - 2 \times \sum_{i = 1}^{m
-1} \sum_{j = i + 1}^m f(b_{i},b_{j}) - \sum_{i = 1}^{m} a_{b_{i}} \\
&amp;= (m - 1) \times \sum_{i = 1}^m a_{b_i} - 2 \times \sum_{i = 1}^{m
- 1} \sum_{j = i + 1}^m f(b_{i},b_{j}) \end{aligned}\]</span></p>
<hr />
<p>考虑到后面 <span class="math inline">\(f(i,j)\)</span>
的部分为取区间最小值，因此我们可以构建出笛卡尔树。</p>
<p><a
href="https://oi-wiki.org/ds/cartesian-tree/#%E6%A0%88%E6%9E%84%E5%BB%BA">利用栈构建笛卡尔树</a>的代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">read</span>(nums[i]);</span><br><span class="line">    st[st[<span class="number">0</span>] + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (st[<span class="number">0</span>] &amp;&amp; nums[st[st[<span class="number">0</span>]]] &gt; nums[i])</span><br><span class="line">    &#123;</span><br><span class="line">        --st[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    son[st[st[<span class="number">0</span>]]][<span class="number">1</span>] = i;</span><br><span class="line">    son[i][<span class="number">0</span>] = st[st[<span class="number">0</span>] + <span class="number">1</span>];</span><br><span class="line">    st[++st[<span class="number">0</span>]] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>考虑利用树上 dp 求解，设 <span
class="math inline">\(dp_{i,j}\)</span> 表示在以 <span
class="math inline">\(i\)</span> 为根的子树中选取 <span
class="math inline">\(j\)</span> 个值的最大权值。<span
class="math inline">\(lc\)</span> 为树上当前节点的左孩子，<span
class="math inline">\(rc\)</span> 为树上当前节点的右孩子。</p>
<p>则有如下转移（没有左右节点时特判处理即可）：</p>
<p>不选当前节点时：</p>
<p><span class="math display">\[dp_{x,i + j} = dp_{lc,i} + dp_{rc,j} - 2
\times i \times j \times nums_{x}\]</span></p>
<p>即左节点最大贡献加右节点最大贡献减去最小值的贡献。显然若左子树选了
<span class="math inline">\(i\)</span> 个，右子树选了 <span
class="math inline">\(j\)</span> 个，则根据题意有 <span
class="math inline">\(i \times j\)</span> 个区间最小值为 <span
class="math inline">\(nums_{x}\)</span>，减去即可。</p>
<p>选择当前节点时：</p>
<p><span class="math display">\[dp_{x,i + j + 1} = dp_{lc,i} + dp_{rc,j}
- 2 \times i \times j \times nums_{x} + \left (m - 1 \right) \times
nums_{x} - 2 \times \left (i + j \right) \times nums_{x}\]</span></p>
<p>前面的部分不变，在加上最小值单独的贡献即可。</p>
<p>该部分代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= siz[lc]; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= siz[rc]; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[u][i + j] = <span class="built_in">max</span>(dp[u][i + j], dp[lc][i] + dp[rc][j] - <span class="number">2</span> * i * j * nums[u]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= siz[lc]; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= siz[rc]; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[u][i + j + <span class="number">1</span>] = <span class="built_in">max</span>(dp[u][i + j + <span class="number">1</span>], dp[lc][i] + dp[rc][j] + (m - <span class="number">1</span>) * nums[u] - <span class="number">2</span> * (i * j + i + j) * nums[u]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<p>dp 方程满足在 dfs 条件下的无后效性，利用 dfs 求解即可。</p>
<p>最后答案即为 <span class="math inline">\(dp_{root,m}\)</span>。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 5101</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n, m, nums[max_n];</span><br><span class="line"><span class="type">int</span> root, siz[max_n], st[max_n], son[max_n][<span class="number">2</span>], fa[max_n]; <span class="comment">// 分别为根、子树大小、构建用的栈、左/右孩子、父亲节点</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> dp[max_n][max_n];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    siz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> lc = son[u][<span class="number">0</span>], rc = son[u][<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 没有左右孩子（即区间长度为 1），不取贡献为 0，取贡献为 (m - 1) * nums[u];</span></span><br><span class="line">    <span class="keyword">if</span> (!lc &amp;&amp; !rc)</span><br><span class="line">    &#123;</span><br><span class="line">        dp[u][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[u][<span class="number">1</span>] = nums[u] * (m - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 只有右孩子</span></span><br><span class="line">    <span class="keyword">if</span> (!lc &amp;&amp; rc)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(rc);</span><br><span class="line">        siz[u] += siz[rc];</span><br><span class="line">        <span class="built_in">memcpy</span>(dp[u], dp[rc], <span class="built_in">sizeof</span>(dp[rc]));<span class="comment">//不取当前点直接复制过来</span></span><br><span class="line">        <span class="comment">// 取当前点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= siz[rc]; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[u][i + <span class="number">1</span>] = <span class="built_in">max</span>(dp[u][i + <span class="number">1</span>], dp[rc][i] + (m - <span class="number">1</span>) * nums[u] - <span class="number">2</span> * i * nums[u]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 只有左孩子同上</span></span><br><span class="line">    <span class="keyword">if</span> (lc &amp;&amp; !rc)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dfs</span>(lc);</span><br><span class="line">        siz[u] += siz[lc];</span><br><span class="line">        <span class="built_in">memcpy</span>(dp[u], dp[lc], <span class="built_in">sizeof</span>(dp[lc]));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= siz[lc]; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[u][i + <span class="number">1</span>] = <span class="built_in">max</span>(dp[u][i + <span class="number">1</span>], dp[lc][i] + (m - <span class="number">1</span>) * nums[u] - <span class="number">2</span> * i * nums[u]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 左右孩子都有</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">dfs</span>(lc), <span class="built_in">dfs</span>(rc);</span><br><span class="line">    siz[u] += siz[lc];</span><br><span class="line">    siz[u] += siz[rc];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= siz[lc]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= siz[rc]; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[u][i + j] = <span class="built_in">max</span>(dp[u][i + j], dp[lc][i] + dp[rc][j] - <span class="number">2</span> * i * j * nums[u]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= siz[lc]; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= siz[rc]; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            dp[u][i + j + <span class="number">1</span>] = <span class="built_in">max</span>(dp[u][i + j + <span class="number">1</span>], dp[lc][i] + dp[rc][j] + (m - <span class="number">1</span>) * nums[u] - <span class="number">2</span> * (i * j + i + j) * nums[u]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _clang_</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(nums[i]);</span><br><span class="line">        st[st[<span class="number">0</span>] + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (st[<span class="number">0</span>] &amp;&amp; nums[st[st[<span class="number">0</span>]]] &gt; nums[i])</span><br><span class="line">        &#123;</span><br><span class="line">            --st[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        son[st[st[<span class="number">0</span>]]][<span class="number">1</span>] = i;</span><br><span class="line">        son[i][<span class="number">0</span>] = st[st[<span class="number">0</span>] + <span class="number">1</span>];</span><br><span class="line">        st[++st[<span class="number">0</span>]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fa[son[i][<span class="number">0</span>]] = fa[son[i][<span class="number">1</span>]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    root = <span class="built_in">min_element</span>(fa + <span class="number">1</span>, fa + n + <span class="number">1</span>) - fa; <span class="comment">// 找到根节点</span></span><br><span class="line">    <span class="built_in">dfs</span>(root);</span><br><span class="line">    <span class="built_in">writeln</span>(dp[root][m]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1512D Permutation by Sum 题解</title>
    <url>/2023/10/04/CF1512D%20Permutation%20by%20Sum%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf1512d-permutation-by-sum-题解">CF1512D Permutation by Sum
题解</h1>
<h2 id="link">Link</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1512E">洛谷</a></p>
<p><a
href="https://codeforces.com/problemset/problem/1512/E">Codeforces</a></p>
<h2 id="description">Description</h2>
<p><span class="math inline">\(T\)</span> 组数据，每组数据由互相独立的
<span class="math inline">\(n,l,r,s\)</span> 组成，求 <span
class="math inline">\(\{a\}\)</span>，<span
class="math inline">\(\{a\}\)</span> 是 <span
class="math inline">\(1\)</span> 到 <span
class="math inline">\(n\)</span> 的一个排列使得 <span
class="math inline">\(\sum_{i = l}^ra_i =
s\)</span>，并输出这个排列，如果无法找到这样的排列输出
<code>-1</code>。</p>
<h2 id="solution">Solution</h2>
<p>只计算 <span class="math inline">\(l\)</span> 到 <span
class="math inline">\(r\)</span> 的和，与其他位置无关。计算部分的长度
<span class="math inline">\(len\)</span> 为 <span
class="math inline">\(r - l + 1\)</span>。所以答案的最小值为 <span
class="math inline">\(\sum_{i = 1}^{len} i\)</span>，最大值为 <span
class="math inline">\(\sum_{i = n - len + 1}^{n} i\)</span>。</p>
<p>先令在 <span class="math inline">\([l,r]\)</span> 的范围内的数为
<span class="math inline">\(1\)</span> 到 <span
class="math inline">\(len\)</span>。则需要增大 <span
class="math inline">\(s - \frac{ len \times \left ( len + 1\right
)}{2}\)</span>。可以想到从对大的数开始增大，直到不能增大或和为 <span
class="math inline">\(s\)</span>
停止。这样不会产生冲突，其余位置填充剩余的数即可。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 101010</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">int</span> n, l, r, s;</span><br><span class="line"><span class="type">int</span> nums[max_n];</span><br><span class="line"><span class="type">int</span> vis[max_n], now;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _clang_</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(n), <span class="built_in">read</span>(l), <span class="built_in">read</span>(r), <span class="built_in">read</span>(s);</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, (n + <span class="number">2</span>) * (<span class="built_in">sizeof</span>(<span class="type">int</span>)));</span><br><span class="line">        now = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> len = (r - l + <span class="number">1</span>), sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">            nums[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum2 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n; i &gt; n - len; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            sum2 += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum &gt; s || s &gt; sum2)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ps = n - len;</span><br><span class="line">        <span class="keyword">if</span> (len == n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (sum == s)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">writesp</span>(i);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((s - sum) &gt; ps * len)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//   cout &lt;&lt; ps &lt;&lt; endl;</span></span><br><span class="line">            <span class="type">int</span> i = len;</span><br><span class="line">            <span class="keyword">for</span> (; s - sum &gt; ps; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                sum += ps;</span><br><span class="line">                nums[i] += ps;</span><br><span class="line">                <span class="comment">//    cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; nums[i] &lt;&lt; endl;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; i + l - 1 &lt;&lt; endl;</span></span><br><span class="line">            <span class="comment">// cout &lt;&lt; nums[len] &lt;&lt; endl;</span></span><br><span class="line">            <span class="comment">//   cout &lt;&lt; s - sum &lt;&lt; endl;</span></span><br><span class="line">            nums[i] += s - sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            vis[nums[i]] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; l; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (vis[now])</span><br><span class="line">            &#123;</span><br><span class="line">                ++now;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">writesp</span>(now);</span><br><span class="line">            ++now;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = l; i &lt;= r; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">writesp</span>(nums[i - l + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = r + <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">while</span> (vis[now])</span><br><span class="line">            &#123;</span><br><span class="line">                ++now;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">writesp</span>(now);</span><br><span class="line">            ++now;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1667A 题解</title>
    <url>/2023/10/04/CF1667A%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf1667a-make-it-increasing-题解">CF1667A Make it Increasing
题解</h1>
<h2 id="题目链接">题目链接</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1667A">洛谷</a></p>
<p><a
href="https://codeforces.com/contest/1667/problem/A">Codeforces</a></p>
<h2 id="题目讲解">题目讲解</h2>
<p>有一个比较显然的性质：在<strong>最优方案</strong>下一定有一个位置<strong>不需要改动</strong>。因为若没有位置为
<span
class="math inline">\(0\)</span>，则我们一定可以对绝对值最小的位置不改动，仍满足单调递增条件。</p>
<p>观察数据范围，本题支持 <span class="math inline">\(O(N^2)\)</span>
的做法，那么我们可以枚举哪一个位置为 <span
class="math inline">\(0\)</span>。之后分别向前、向后枚举，使得数列满足单调递增性质。</p>
<p>记上一个更改的数为 <span
class="math inline">\(last\)</span>，则本次对答案的贡献为</p>
<p><span class="math display">\[\left \lfloor
\frac{last}{nums_{i}}  \right \rfloor +1\]</span> 同时更新 <span
class="math display">\[last = (\left \lfloor
\frac{last}{nums_{i}}  \right \rfloor  + 1) \times nums_i\]</span></p>
<p>这里由于在同一方向上符号相同，因此都用正数表示较为方便。</p>
<hr />
<p>下面给出示例代码，代码中有一定的注释：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 5100</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> nums[max_n];</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _clang_</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    ans = LONG_LONG_MAX;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">// 枚举为 0 的位置</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> last = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> tms = <span class="number">0</span>; <span class="comment">// 本次需要更改的次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">1</span>; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            tms = (last / nums[j]) + <span class="number">1</span>;</span><br><span class="line">            res += tms;</span><br><span class="line">            last = tms * nums[j];</span><br><span class="line">        &#125;</span><br><span class="line">        last = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            tms = (last / nums[j]) + <span class="number">1</span>;</span><br><span class="line">            res += tms;</span><br><span class="line">            last = tms * nums[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// writeln(res);</span></span><br><span class="line">        ans = <span class="built_in">min</span>(ans, res);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">writeln</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1767C Count Binary Strings 题解</title>
    <url>/2023/10/04/CF1767C%20Count%20Binary%20Strings%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf1767c-count-binary-strings-题解">CF1767C Count Binary Strings
题解</h1>
<h2 id="foreword">Foreword</h2>
<p>感谢 <a href="https://www.luogu.com.cn/user/234074"><span
class="citation" data-cites="樱雪喵">@樱雪喵</span></a>、<a
href="https://www.luogu.com.cn/user/183154"><span class="citation"
data-cites="swiftc">@swiftc</span></a> 两位大佬的耐心指导。</p>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1767C">洛谷</a></p>
<p><a
href="https://codeforces.com/problemset/problem/1767/C">Codeforces</a></p>
<h2 id="description">Description</h2>
<p>有一个长度为 <span class="math inline">\(n\)</span> 的 01 串 <span
class="math inline">\(s\)</span>（下标从 <span
class="math inline">\(1\)</span> 开始）和一些限制 <span
class="math inline">\(a_{i,j}(1 \le i \le j \le n)\)</span>。</p>
<p><span class="math inline">\(a_{i,j}\)</span> 的含义如下：</p>
<table>
<thead>
<tr class="header">
<th style="text-align: center;"><span
class="math inline">\(a_{i,j}=\)</span></th>
<th style="text-align: center;">含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><span
class="math inline">\(0\)</span></td>
<td style="text-align: center;">没有限制</td>
</tr>
<tr class="even">
<td style="text-align: center;"><span
class="math inline">\(1\)</span></td>
<td style="text-align: center;">对于所有的 <span class="math inline">\(i
\le p \le q \le j\)</span> 均有 <span
class="math inline">\(s_p=s_q\)</span></td>
</tr>
<tr class="odd">
<td style="text-align: center;"><span
class="math inline">\(2\)</span></td>
<td style="text-align: center;">存在 <span class="math inline">\(i \le p
\le q \le j\)</span> 使得 <span class="math inline">\(s_p \neq
s_q\)</span></td>
</tr>
</tbody>
</table>
<p>求可能的 <span class="math inline">\(s\)</span>
的个数。<strong>答案对 <span
class="math inline">\(998\,244\,353\)</span> 取模。</strong></p>
<p>对于 <span class="math inline">\(100\%\)</span> 的数据，<span
class="math inline">\(2 \le n \le 100\)</span>，<span
class="math inline">\(0 \le a_{i,j} \le 2\)</span>。</p>
<h2 id="solution">Solution</h2>
<p>这种计数类问题大概率是组合数学或者
dp，然而这道题限制条件很多，组合数学大概是做不成了，那么考虑 dp。</p>
<p>首先一个很显然的情况是如果 <span class="math inline">\(a_{i,i} =
2\)</span> 那么无解。接下来考虑对 <span class="math inline">\(a_{i,j} =
1\)</span>
的限制，我们把这些需要区间内全相同的合并成一个块，对块内每个位置的限制等价于对整个块的限制，使用并查集维护即可，注意每个块合并的时候都合并到最前面的位置。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> fa[<span class="number">222</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        fa[i] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[u] == u)</span><br><span class="line">        <span class="keyword">return</span> fa[u];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> fa[u] = <span class="built_in">find</span>(fa[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">find</span>(u) == <span class="built_in">find</span>(v))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">find</span>(u) &lt; <span class="built_in">find</span>(v))</span><br><span class="line">        fa[<span class="built_in">find</span>(v)] = <span class="built_in">find</span>(u);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        fa[<span class="built_in">find</span>(u)] = <span class="built_in">find</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主函数中：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(nums[i][j]);</span><br><span class="line">        <span class="keyword">if</span> (nums[i][j] == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = i + <span class="number">1</span>; k &lt;= j; k++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">merge</span>(i, k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之后，我们很容易想到，对于每个块 <span
class="math inline">\(p\)</span>，我们找到对于 <span
class="math inline">\(i \in p\)</span>，<span
class="math inline">\(a_{i,j} = 2\)</span> 这样的限制中最大的 <span
class="math inline">\(j\)</span>，只要满足这条限制，在前面的限制也就都满足了，求出
<span class="math inline">\(mx_{i}\)</span> 表示块 <span
class="math inline">\(i\)</span> 之前最后一个能满足从 <span
class="math inline">\(mx_{i}\)</span> 到 <span
class="math inline">\(i\)</span> 与 <span
class="math inline">\(i\)</span> 填的数全相同的块。</p>
<p>DP
的思路有两种，一种是一维的，另一种是二维的。我开始写的一维，然而没有考虑到一些问题写挂了，尝试了二维通过之后又回到了一维。</p>
<p>这里先从二维 DP 开始讲。</p>
<p>考虑某个位置和前一位是否相同，有：</p>
<p><span class="math display">\[\begin{cases}
dp_{i,j} = dp_{i - 1,j} &amp; \texttt{if } s_{i} = s_{i - 1}
\\
dp_{i,i} = \sum_{j = mx_{i}}^{i - 1} dp_{i - 1,j} &amp; \texttt{if }
s_{i} \neq s_{i - 1}
\end{cases}\]</span></p>
<p>即如果要求和前一位相同，不会有新的贡献，否则累加贡献。</p>
<p>直接判断是否可行并转移即可。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">dp[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">find</span>(i) == i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt; i; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            (dp[i][i] += dp[i - <span class="number">1</span>][j]) %= <span class="number">998244353</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = mx[<span class="built_in">find</span>(i)]; j &lt; i; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        (dp[i][j] += dp[i - <span class="number">1</span>][j]) %= <span class="number">998244353</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = mmx; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    (res += dp[n][i]) %= <span class="number">998244353</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">writeln</span>(<span class="number">2</span> * res % <span class="number">998244353</span>);</span><br></pre></td></tr></table></figure>
<p>接下来考虑一维 DP 怎么做。</p>
<p><span class="math display">\[\begin{cases}
dp_{i,j} = dp_{i - 1,j} &amp; \texttt{if } s_{i} = s_{i - 1}
\\
dp_{i,i} = \sum_{j = mx_{i}}^{i - 1} dp_{i - 1,j} &amp; \texttt{if }
s_{i} \neq s_{i - 1}
\end{cases}\]</span></p>
<p>上面的方程实际上就是 相同的地方 复制了 前面第一个不同的地方。</p>
<p>定义 <span class="math inline">\(k\)</span> 为 <span
class="math inline">\(i\)</span> 之前第一个不同的。有 <span
class="math display">\[
dp_{i,i} = \sum_{k}\sum_{j = mx_{i}}^{i - 1} dp_{k,j} \ \texttt{  if }
s_{i} \neq s_{i - 1}
\]</span></p>
<p>也就是我们每次从 <span class="math inline">\(k\)</span>
转移并且累加一下。</p>
<p>注意到由于 <span class="math inline">\(s_{k} \neq s_{k -
1}\)</span>，我们之前计算 <span
class="math inline">\(dp_{k,j&#39;}\)</span> 的时候应该只更新了 <span
class="math inline">\(dp_{k,k}\)</span>。</p>
<p>因此实际上我们得到的是 <span class="math inline">\(dp_{i,i} =
\sum_{k}dp_{k,k} \ \texttt{ if } mx_{i} \leq k \leq i - 1\)</span>。</p>
<p>优化掉第二维，有 $dp_{i} = <em>{k = mx</em>{i}}^{i - 1}dp_{k} $。</p>
<p><strong>注意：这里有个问题，假设有按顺序 <span
class="math inline">\(A,B,C,D\)</span> 四个块，如果限制 <span
class="math inline">\(B,C\)</span> 不能相同，那么显然我们无法从 <span
class="math inline">\(A\)</span> 到 <span
class="math inline">\(D\)</span> 全部相同，因此我们 <span
class="math inline">\(mx\)</span> 还要取一个前缀 <span
class="math inline">\(\operatorname{max}\)</span></strong>。</p>
<p>由于我们合并块的编号并不连续，这不利于我们
dp，因此将块的编号离散化一下即可。 <figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 由于 fa 更新的时候不是 1,2,3,4 这样，而是每块第一个的编号</span></span><br><span class="line"><span class="comment">// 我们把 fa[i] 离散化，pos 表示是第几个，rea 表示第 i 个的实际 fa</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">find</span>(i) == i)</span><br><span class="line">    &#123;</span><br><span class="line">        rea[++rea[<span class="number">0</span>]] = i;</span><br><span class="line">        pos[i] = rea[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
之后枚举上一个不同的点转移就可以了，方程：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">find</span>(i) != i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ++cnt;</span><br><span class="line">    <span class="comment">// 现在只有无限制和要求出现不同了</span></span><br><span class="line">    <span class="comment">// 我们可以枚举上一个不同的位置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = pos[mx[rea[cnt]]]; j &lt; cnt; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        (dp[cnt] += dp[j]) %= <span class="number">998244353</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>把所有 <span class="math inline">\(0\)</span>，<span
class="math inline">\(1\)</span> 交换不会违反限制，因此答案要乘 <span
class="math inline">\(2\)</span>。</p>
<h2 id="codes">Codes</h2>
<p>一维完整代码。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Problem: C. Count Binary Strings</span></span><br><span class="line"><span class="comment">// Contest: Educational Codeforces Round 140 (Rated for Div. 2)</span></span><br><span class="line"><span class="comment">// URL: https://codeforces.com/contest/1767/problem/C</span></span><br><span class="line"><span class="comment">// Memory Limit: 512 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n, nums[<span class="number">200</span>][<span class="number">200</span>];</span><br><span class="line"><span class="type">int</span> fa[<span class="number">222</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        fa[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fa[u] == u)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> fa[u];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> fa[u] = <span class="built_in">find</span>(fa[u]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">find</span>(u) == <span class="built_in">find</span>(v))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">find</span>(u) &lt; <span class="built_in">find</span>(v))</span><br><span class="line">    &#123;</span><br><span class="line">        fa[<span class="built_in">find</span>(v)] = <span class="built_in">find</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        fa[<span class="built_in">find</span>(u)] = <span class="built_in">find</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dp[<span class="number">222</span>];</span><br><span class="line"><span class="type">int</span> mx[<span class="number">222</span>];</span><br><span class="line"><span class="type">int</span> rea[<span class="number">222</span>];</span><br><span class="line"><span class="type">int</span> pos[<span class="number">222</span>];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(nums[i][j]);</span><br><span class="line">            <span class="keyword">if</span> (nums[i][j] == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = i + <span class="number">1</span>; k &lt;= j; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">merge</span>(i, k);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i][i] == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对于每一个需要找到最晚需要不同的，这样能满足前面的所有条件</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mx[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i - <span class="number">1</span>; j; j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[j][i] == <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">find</span>(i) == <span class="built_in">find</span>(j))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                mx[<span class="built_in">find</span>(i)] = <span class="built_in">max</span>(mx[<span class="built_in">find</span>(i)], <span class="built_in">find</span>(j));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mx[i] = <span class="built_in">max</span>(mx[i], mx[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(i) == i)</span><br><span class="line">        &#123;</span><br><span class="line">            rea[++rea[<span class="number">0</span>]] = i;</span><br><span class="line">            pos[i] = rea[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">find</span>(i) != i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ++cnt;</span><br><span class="line">        <span class="comment">// 现在只有无限制和要求出现不同了</span></span><br><span class="line">        <span class="comment">// 我们可以枚举上一个不同的位置</span></span><br><span class="line">        <span class="comment">// 由于 fa 更新的时候不是 1,2,3,4 这样，而是每块第一个的编号</span></span><br><span class="line">        <span class="comment">// 我们把 fa[i] 离散化，pos 表示是第几个，rea 表示第 i 个的实际 fa</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = pos[mx[rea[cnt]]]; j &lt; cnt; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            (dp[cnt] += dp[j]) %= <span class="number">998244353</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//   cout &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class="line">    <span class="built_in">writeln</span>(<span class="number">2</span> * dp[cnt] % <span class="number">998244353</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1778C Flexible String 题解</title>
    <url>/2023/10/04/CF1778C%20Flexible%20String%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf1778c-flexible-string-题解">CF1778C Flexible String 题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1778C">洛谷</a></p>
<p><a
href="https://codeforces.com/problemset/problem/1778/C">Codeforces</a></p>
<h2 id="description">Description</h2>
<p>对于长度为 <span class="math inline">\(n\)</span> 的 <span
class="math inline">\(a,b\)</span> 两个字符串，<span
class="math inline">\(a\)</span> 初始最多含有 <span
class="math inline">\(10\)</span> 个不同字母。你可以选择至多 <span
class="math inline">\(k\)</span> 个不同字母，将 <span
class="math inline">\(a\)</span> 中的这些字母替换为任意字母。</p>
<p>你需要求出经过上述操作后，<span class="math inline">\(a,b\)</span>
相同位置且相同字母的子串尽可能多。</p>
<p>数据范围：<span class="math inline">\(1 \le t \le 10^4,1 \le n \le
10^5,0 \le k \le 10\)</span>。</p>
<h2 id="solution">Solution</h2>
<p>分析一下答案，发现答案是对于每段极长的相同字串长度 <span
class="math inline">\(l\)</span>，求 <span
class="math inline">\(\sum\frac{l \times \left (l +1
\right)}{2}\)</span>。</p>
<p>首先考虑两个个贪心的性质。</p>
<ul>
<li><p>一个位置不会被改变两次。</p></li>
<li><p>如果一个字母被改变，所有这个字母的位置都会被改变（可能改变成本身）。</p></li>
</ul>
<p>证明：只要一个字符在集合里，再操作不会有代价，但会增加贡献，一定更优。</p>
<p>看到不同的字母少于 <span
class="math inline">\(10\)</span>，直接枚举每个字母是否改变即可计算答案，注意要满足不超过
<span class="math inline">\(k\)</span> 个被改变，时间复杂度为 <span
class="math inline">\(O\left(n \times 2^{n}\right)\)</span>。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 510101</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T,n,k;</span><br><span class="line"><span class="type">char</span> s[max_n];</span><br><span class="line">map&lt;<span class="type">char</span>,<span class="type">int</span>&gt; mp1;</span><br><span class="line"><span class="type">char</span> mp2[<span class="number">20</span>];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (-x) &amp; x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">pop_count</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(x)</span><br><span class="line">    &#123;</span><br><span class="line">        tot += x &amp; <span class="number">1</span>;</span><br><span class="line">        x &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> s2[max_n],s3[max_n];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">check</span><span class="params">(<span class="type">int</span> flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> now_ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(flag &amp; (<span class="number">1</span> &lt;&lt; (mp1[s[i]] - <span class="number">1</span>) ) )</span><br><span class="line">        &#123;</span><br><span class="line">            s3[i] = s2[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            s3[i] = s[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ls = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(s2[i] != s3[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> ap = i - <span class="number">1</span> - ls;</span><br><span class="line">            now_ans += ap * (ap + <span class="number">1</span>) / <span class="number">2</span>; </span><br><span class="line">            ls = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ap = n - ls;</span><br><span class="line">    now_ans += ap * (ap + <span class="number">1</span>) / <span class="number">2</span>; </span><br><span class="line">    <span class="comment">// cout&lt;&lt;now_ans&lt;&lt;endl;</span></span><br><span class="line">    <span class="comment">// for(int i = 1;i &lt;= n;i++)</span></span><br><span class="line">    <span class="comment">// &#123;</span></span><br><span class="line">    <span class="comment">//     cout&lt;&lt;s3[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line">    ans = <span class="built_in">max</span>(ans,now_ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cnt = <span class="number">0</span>;</span><br><span class="line">    mp1.<span class="built_in">clear</span>();</span><br><span class="line">    ans= <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">read</span>(n),<span class="built_in">read</span>(k);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s2 + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!mp1[s[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            mp1[s[i]] = ++cnt;</span><br><span class="line">            mp2[cnt] = s[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; (<span class="number">1LL</span> &lt;&lt; cnt);i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">pop_count</span>(i) &lt;= k)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="comment">// cout&lt;&lt;&quot;@&quot;&lt;&lt;i&lt;&lt;&quot; &quot;;</span></span><br><span class="line">            <span class="built_in">check</span>(i);</span><br><span class="line">        </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">writeln</span>(ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solution</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1828B Permutation Swap 题解</title>
    <url>/2023/10/04/CF1828B%20Permutation%20Swap%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf1828b-permutation-swap-题解">CF1828B Permutation Swap
题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1828B">Luogu</a></p>
<p><a
href="https://codeforces.com/problemset/problem/1828/B">Codeforces</a></p>
<h2 id="description">Description</h2>
<p>给你一个长度为 <span class="math inline">\(n\)</span>
的未排序的排列。找到最大的整数 <span class="math inline">\(k\)</span>
满足可以通过只交换<strong>下标差为 <span
class="math inline">\(k\)</span></strong>
的元素使排列被从小到大排序。</p>
<h2 id="solution">Solution</h2>
<p>数字 <span class="math inline">\(x\)</span> 的最终位置应下标为 <span
class="math inline">\(x\)</span>（此处下标从 <span
class="math inline">\(1\)</span> 开始）。设数 <span
class="math inline">\(x\)</span> 在原排列中位置下标为 <span
class="math inline">\(i\)</span>，原排列为 <span
class="math inline">\(p\)</span>，则若经过若干次交换 <span
class="math inline">\(x\)</span> 能到达下标为 <span
class="math inline">\(x\)</span> 的位置的条件为 $ | x - i | k$，即 <span
class="math inline">\(k\)</span> 为 <span class="math inline">\(\left |
x - i \right |\)</span> 的约数。为了使所有的数都能满足该条件，<span
class="math inline">\(k\)</span> 应为 <span
class="math inline">\(\gcd_{i = 1}^{n}(|p_{i} - i|)\)</span>。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 201010</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T, n, nums[max_n];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _clang_</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, val; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(val);</span><br><span class="line">            nums[i] = <span class="built_in">abs</span>(val - i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = __gcd(nums[<span class="number">1</span>], nums[<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">3</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans = __gcd(ans, nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">writeln</span>(ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1832B Maximum Sum 题解</title>
    <url>/2023/10/04/CF1832B%20Maximum%20Sum%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf1832b-maximum-sum-题解">CF1832B Maximum Sum 题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1832B">Luogu</a></p>
<p><a
href="https://codeforces.com/problemset/problem/1832/B">Codeforces</a></p>
<h2 id="description">Description</h2>
<p>给定一个长度为 <span class="math inline">\(n\)</span> 的数列，进行
<span class="math inline">\(k\)</span>
次操作，每次可以选择删除序列中最小的两个数或最大的一个数。求操作后剩余数的和的最大值。</p>
<p><span class="math inline">\(3 \leq n \leq 2 \times
10^{5}\)</span>，<span class="math inline">\(1 \leq k \leq
99999\)</span>，<span class="math inline">\(2k \leq n\)</span>。</p>
<h2 id="solution">Solution</h2>
<p>观察题目，<span class="math inline">\(n\)</span> 和 <span
class="math inline">\(k\)</span>
的范围不大，我们可以直接枚举删了多少次最小值。</p>
<p>先将整个序列从小到大排序，根据取数的性质易知取的是一部分前缀和一部分后缀。记
<span class="math inline">\(sum_{i}\)</span> 为 <span
class="math inline">\(i\)</span> 位置的前缀和。这部分可以 <span
class="math inline">\(O(n)\)</span> 求得。</p>
<p>接下来，枚举删除最小的两个值的次数，设这个次数为 <span
class="math inline">\(x\)</span>，则删去后缀的次数为 <span
class="math inline">\(k - x\)</span>。删去前缀的个数为 <span
class="math inline">\(2x\)</span>，和为 <span
class="math inline">\(sum_{2x}\)</span>，删去后缀后剩余数的和为 <span
class="math inline">\(sum_{n - (k - x)}\)</span>。此时答案为 <span
class="math inline">\(sum_{n - (k - x)} -
sum_{2x}\)</span>。此部分时间复杂度为 <span
class="math inline">\(O(n)\)</span>。</p>
<p>总时间复杂度为 <span class="math inline">\(O(n)\)</span>。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 301010</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">int</span> n, k, nums[max_n], sum[max_n];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(k);</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(nums + <span class="number">1</span>, nums + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum[i] = sum[i - <span class="number">1</span>] + nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, sum[n - (k - i)] - sum[<span class="number">2</span> * i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">writeln</span>(ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _clang_</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solution</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1833B Restore the Weather 题解</title>
    <url>/2023/10/04/CF1833B%20Restore%20the%20Weather%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf1833b-restore-the-weather-题解">CF1833B Restore the Weather
题解</h1>
<h2 id="link">Link</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1833B">洛谷</a></p>
<p><a
href="https://codeforces.com/contest/1833/problem/B">Codefoces</a></p>
<h2 id="description">Description</h2>
<p><strong>多组测试数据。</strong></p>
<p>给定两个长度为 <span class="math inline">\(n\)</span> 的序列 <span
class="math inline">\(a,b\)</span> 以及整数 <span
class="math inline">\(d\)</span>，重新排列 <span
class="math inline">\(b\)</span> 序列使得 <span
class="math inline">\(\forall i \in [1,n], | a_{i} - b_{i} | \leq
d\)</span>。</p>
<p>数据保证有解。</p>
<h2 id="solution">Solution</h2>
<p>既然数据保证有解，我们可以将两个序列<strong>从小到大排序</strong>，同时记录
<span class="math inline">\(a\)</span>
序列中各数字原来所在的位置。最后记录答案即可。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 110001</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num, id;</span><br><span class="line">&#125; a[max_n];</span><br><span class="line"><span class="type">int</span> b[max_n], n, k, ans[max_n];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(a[i].num);</span><br><span class="line">        a[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(a + <span class="number">1</span>, a + n + <span class="number">1</span>, [](node nd1, node nd2)</span><br><span class="line">         &#123; <span class="keyword">return</span> nd1.num &lt; nd2.num; &#125;);</span><br><span class="line">    <span class="built_in">sort</span>(b + <span class="number">1</span>, b + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[a[i].id] = b[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">writesp</span>(ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _clang_</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solution</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1852B Imbalanced Arrays 题解</title>
    <url>/2023/10/04/CF1852B%20Imbalanced%20Arrays%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf1852b-imbalanced-arrays-题解">CF1852B Imbalanced Arrays
题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1852B">洛谷</a></p>
<p><a
href="https://codeforces.com/problemset/problem/1852/B">Codeforces</a></p>
<h2 id="description">Description</h2>
<p>对于一个给定的长度为 <span class="math inline">\(n\)</span> 的数组
<span class="math inline">\(A\)</span>，定义一个长度为 <span
class="math inline">\(n\)</span> 的数组 <span
class="math inline">\(B\)</span>
是不平衡的当且仅当以下全部条件满足：</p>
<ul>
<li><p><span class="math inline">\(-n \leq B_{i} \leq n\)</span> 且
<span class="math inline">\(B_{i} \ne 0\)</span>。即每个数在 <span
class="math inline">\([-n,n]\)</span> 内且不为 <span
class="math inline">\(0\)</span>。</p></li>
<li><p><span class="math inline">\(\forall i,j \in [1,n], B_{i} + B_{j}
\neq 0\)</span>。即数组内不存在一对相反数。</p></li>
<li><p><span class="math inline">\(\forall i \in [1,n], \sum_{j = 1}^{n}
[ \left (B_{i} + B_{j} \right) &gt; 0] = A_{i}\)</span>。即对于任意的
<span class="math inline">\(i\)</span>，数组中与 <span
class="math inline">\(B_{i}\)</span> 和大于 <span
class="math inline">\(0\)</span> 的数的个数恰好为 <span
class="math inline">\(A_{i}\)</span>。<strong>注意：这里需要计算本身。也即
<span class="math inline">\(i\)</span> 与 <span
class="math inline">\(j\)</span> 可以相等。</strong></p></li>
</ul>
<p>请构造长度为 <span class="math inline">\(n\)</span>
的不平衡序列。</p>
<p>多组测试数据。</p>
<h2 id="solution">Solution</h2>
<p>手模了一下数据。发现<strong>绝对值最大的数</strong>很有意义。假设这个数下标为
<span class="math inline">\(k\)</span>，继续研究可以发现，若这个数大于
<span class="math inline">\(0\)</span>，则它与所有数相加都大于 <span
class="math inline">\(0\)</span>，此时 <span
class="math inline">\(a_{k}\)</span> 为 <span
class="math inline">\(n\)</span>，否则它与所有数相加都小于 <span
class="math inline">\(0\)</span>，此时 <span
class="math inline">\(a_{k}\)</span> 为 <span
class="math inline">\(0\)</span>。由于绝对值最大的数要么是正数，要么是负数（题目中说了没有
<span
class="math inline">\(0\)</span>），因此以上两个必定满足一个，否则无解。</p>
<p>按照上面的思路，我们只能求出一个数，如何才能把这个思路延续下去呢，我们发现可以不考虑这个数，将序列的长度减
<span
class="math inline">\(1\)</span>，若绝对值最大的数为正数，我们还需要将
<span class="math inline">\(a\)</span> 数组的每个数减 <span
class="math inline">\(1\)</span> 来排除这个数的贡献。</p>
<p>于是每个数就都可以根据序列能剩余数的数量确定。</p>
<p>如果上面没看懂就来看一下实现吧，首先方便找最大数和 <span
class="math inline">\(0\)</span>，将 <span
class="math inline">\(a\)</span>
从大到小排序，注意要记录原来的位置。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">read</span>(n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">read</span>(nums[i].first);</span><br><span class="line">    nums[i].second = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(nums + <span class="number">1</span>,nums + n + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">reverse</span>(nums + <span class="number">1</span>,nums + n + <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>接下来开始枚举。用 <code>det</code> 记录整个序列被减去的值。</p>
<p>判断两种无解的情况，并计算当前数的答案。由于每次都会减少一个数，因此数组中的数绝对值互不相同，满足了第一个条件。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> tail = n,det = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= tail;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(nums[i].first - det == tail - i + <span class="number">1</span> &amp;&amp; nums[tail].first - det &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(nums[i].first - det != tail - i + <span class="number">1</span> &amp;&amp; nums[tail].first - det != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(nums[i].first - det == tail - i + <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans[nums[i].second] = tail - i + <span class="number">1</span>;</span><br><span class="line">        ++det;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ans[nums[tail].second] = -(tail - i + <span class="number">1</span>);</span><br><span class="line">        --tail;</span><br><span class="line">        --i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 520011</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; nums[max_n];</span><br><span class="line"><span class="type">int</span> ans[max_n];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(nums[i].first);</span><br><span class="line">        nums[i].second = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(nums + <span class="number">1</span>,nums + n + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">reverse</span>(nums + <span class="number">1</span>,nums + n + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> tail = n,det = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= tail;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i].first - det == tail - i + <span class="number">1</span> &amp;&amp; nums[tail].first - det &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums[i].first - det != tail - i + <span class="number">1</span> &amp;&amp; nums[tail].first - det != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums[i].first - det == tail - i + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans[nums[i].second] = tail - i + <span class="number">1</span>;</span><br><span class="line">            ++det;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans[nums[tail].second] = -(tail - i + <span class="number">1</span>);</span><br><span class="line">            --tail;</span><br><span class="line">            --i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">writesp</span>(ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solution</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1854B Earn or Unlock 题解</title>
    <url>/2023/10/04/CF1854B%20Earn%20or%20Unlock%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf1854b-earn-or-unlock-题解">CF1854B Earn or Unlock 题解</h1>
<h2 id="link">Link</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1854B">洛谷</a></p>
<p><a
href="https://codeforces.com/problemset/problem/1854/B">Codeforce</a></p>
<h2 id="description">Description</h2>
<p>有一长度为 <span class="math inline">\(n\)</span>
的一副牌，每张牌上都有一个数字，设第 <span
class="math inline">\(i\)</span> 张牌上的数字为 <span
class="math inline">\(a_i\)</span>。初始时，你手里只有第一张牌。对于每一张牌，你有两种选择：</p>
<ul>
<li><p>如果剩余的牌数量 <span class="math inline">\(&lt;
a_i\)</span>，则将牌摸完，否则继续往下摸 <span
class="math inline">\(a_i\)</span>
张牌。摸牌完成后，这张牌会被丢弃。</p></li>
<li><p>获得 <span class="math inline">\(a_i\)</span>
的分数，并丢弃这张牌。</p></li>
</ul>
<p>当你手里没有牌时结束，求你能获得的最大分数。</p>
<p>对于所有数据，保证 <span class="math inline">\(1 \le n \le 10 ^
5\)</span>，<span class="math inline">\(0 \le a_i \le n\)</span>。</p>
<h2 id="hint">Hint</h2>
<h3 id="hint-1">Hint <span class="math inline">\(1\)</span></h3>
<p>我们会以什么顺序使用已经解锁的牌？</p>
<blockquote>
<p>使用牌的顺序没有影响，因此我们可以假定从上向下依次使用牌。</p>
</blockquote>
<h3 id="hint-2">Hint <span class="math inline">\(2\)</span></h3>
<p>假设我们一共翻开了<strong>恰好</strong> <span
class="math inline">\(k\)</span>
张牌（包括第一张），最终的答案是什么？</p>
<blockquote>
<p>可以发现，当用一张牌 <span class="math inline">\(i\)</span>
用来解锁之后的牌时，对答案的贡献为 <span
class="math inline">\(0\)</span>，对翻开牌数量的贡献为 <span
class="math inline">\(a_{i}\)</span>。否则对答案贡献为 <span
class="math inline">\(a_{i}\)</span>，对翻开牌数量的贡献为 <span
class="math inline">\(0\)</span>。因此每张牌的贡献都为 <span
class="math inline">\(a_{i}\)</span>，因此有 <span
class="math inline">\(ans + k - 1 = \sum_{i = 1}^{k}
a_{i}\)</span>。左侧减一的原因是第一张牌是一开始就翻开了。</p>
</blockquote>
<h3 id="hint-3">Hint <span class="math inline">\(3\)</span></h3>
<p>如何确定能否恰好翻开 <span class="math inline">\(k\)</span>
张牌？</p>
<blockquote>
<p>使用 dp，每张牌可以由之前的转移过来。</p>
</blockquote>
<h2 id="solution">Solution</h2>
<p>根据上面的提示，我们使用 dp 判断能否恰好取 <span
class="math inline">\(k\)</span> 张牌，当 <span
class="math inline">\(dp_{i} = 1\)</span> 时，<span
class="math inline">\(ans = \max \left ( ans,\left( \sum_{j = 1}^{i}
a_{j} \right) - i + 1 \right)\)</span>。后面的部分可以使用前缀和 <span
class="math inline">\(O(1)\)</span> 求出。</p>
<p>根据题目，初始状态 <span class="math inline">\(dp_{1} =
1\)</span>，那么如何进行状态转移呢？假设有一张编号为 <span
class="math inline">\(i\)</span> 的卡牌，并且存在一种恰好解锁 <span
class="math inline">\(j\)</span> 张卡牌的方式，那么就存在一种恰好解锁
<span class="math inline">\(j + a_{i}\)</span>
张卡牌的方式。于是反过来就有转移：</p>
<p><span class="math display">\[dp_{j} = dp_{j}\ | \ dp_{j -
a_{i}}\]</span></p>
<p>每次转移之后要把这个转移方程时间复杂度为 <span
class="math inline">\(O \left ( n^{2}\right )\)</span>，无法通过。</p>
<p>由于转移只有或操作，并且 <span class="math inline">\(dp\)</span> 是
<code>bool</code> 类型的，我们可以考虑用 <code>bitset</code>
优化。具体的，我们将 <span class="math inline">\(dp_{i}\)</span> 转化为
<code>bitset</code> 中的第 <span class="math inline">\(i\)</span>
位。于是有新的转移方程写法：<code>dp = dp | (dp &lt;&lt; a[i])</code>。时间复杂度
<span class="math inline">\(O \left ( \frac{ n^{2} }{\omega} \right
)\)</span>，可以通过，为了避免转移的时候使用到没解锁的牌，我们转移后记录下
<span class="math inline">\(dp_{i}\)</span> 并将 <span
class="math inline">\(dp_{i} = 0\)</span>。</p>
<p>另外，根据题目中所给的信息，可能会出现选择卡牌的数值大于剩余卡牌数量，这时我们在后面开一些虚拟卡牌，权值为
<span class="math inline">\(0\)</span>
即可，根据题目条件，我们只需要开出 <span
class="math inline">\(n\)</span> 张虚拟卡牌就足够了。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 210101</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">bitset&lt;max_n&gt; dp;</span><br><span class="line"><span class="type">bool</span> dp2[max_n];</span><br><span class="line"><span class="type">int</span> T, n, nums[max_n];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp = (dp | (dp &lt;&lt; nums[i]));</span><br><span class="line">        dp2[i] = dp[i];</span><br><span class="line">        dp[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dp2[i] = dp[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">        <span class="keyword">if</span> (dp2[i])</span><br><span class="line">        &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, sum - i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n + <span class="number">1</span>; i &lt;= <span class="number">2</span> * n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp2[i])</span><br><span class="line">        &#123;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, sum - i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">writeln</span>(ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solution</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1854D Michael and Hotel 题解</title>
    <url>/2023/10/04/CF1854D%20Michael%20and%20Hotel%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf1854d-michael-and-hotel-题解">CF1854D Michael and Hotel
题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1854D">洛谷</a></p>
<p><a
href="https://codeforces.com/problemset/problem/1854/D">Codeforces</a></p>
<h2 id="description">Description</h2>
<p>这是一个交互题。</p>
<p>有一个有 <span class="math inline">\(n\)</span>
个点的内向基环树森林，zlsim 位于 <span class="math inline">\(1\)</span>
号节点，请你通过以下操作求出哪些节点（包括 <span
class="math inline">\(1\)</span>）可以通过从这两点开始沿边行走若干步汇至一点。</p>
<ul>
<li>给出两个参数 <span class="math inline">\(u,k\)</span> 和点集 <span
class="math inline">\(S\)</span>，询问是否能够通过从 <span
class="math inline">\(u\)</span> 出发走 <span
class="math inline">\(k\)</span> 步达到任意 <span
class="math inline">\(S\)</span> 中的节点。</li>
</ul>
<p>你最多可以询问 <span class="math inline">\(2000\)</span> 次。</p>
<h2 id="solution">Solution</h2>
<p>一个很显然的题意转化是我们要找到的是节点 <span
class="math inline">\(1\)</span>
所在的连通块。这个连通块一定是一颗内向基环树，因此我们可以很容易的找到一个环上的点。具体的方法如下：</p>
<ul>
<li><p>将剩余点分等为两部分。</p></li>
<li><p>询问从 <span class="math inline">\(1\)</span> 出发，行进 <span
class="math inline">\(n\)</span>
次之后是否能到达第一部分，若能到达，保留第一部分，若不能，保留第二部分。</p></li>
<li><p>重复上述步骤，只剩一个点时停止。</p></li>
</ul>
<p>每次减半，因此我们只需要 $ _{2}500 = 9$ 次操作就能找到一个点。</p>
<p>接下来我们不断按照上面的方式询问从上一个找到的在环上的点开始行进一次能到达的点，就能找到所有环上的点。假设环上有
<span class="math inline">\(k\)</span> 个点，我们需要 <span
class="math inline">\(9\times k\)</span>
次操作，这样不能满足题目条件。</p>
<p>考虑如何加快找点的速度，我们可以进行以下操作：</p>
<ul>
<li><p>设已经找到的在连通块内的点集为 <span
class="math inline">\(S\)</span>，剩余点集为 <span
class="math inline">\(V\)</span>。</p></li>
<li><p><span class="math inline">\(\forall i \in V\)</span>，询问从
<span class="math inline">\(i\)</span> 开始行进 <span
class="math inline">\(|S|\)</span> 步能否到达 <span
class="math inline">\(S\)</span>，若能，将其加入 <span
class="math inline">\(S\)</span>。</p></li>
<li><p>如果这次新找到的点数量小于 <span
class="math inline">\(|S|\)</span>，结束查找。</p></li>
</ul>
<p>这样我们就能找到环上的点，但也会找到一些在该连通块内不属于环上的点，这对我们接下来的操作没有影响。</p>
<p>现在环内所有点已经确定，我们可以用 <span class="math inline">\(n -
|S|\)</span> 次询问确定剩余的点，具体的，对于每个不在 <span
class="math inline">\(S\)</span> 中的点 <span
class="math inline">\(u\)</span>，询问从 <span
class="math inline">\(u\)</span> 开始行进 <span
class="math inline">\(n\)</span> 步能否到达 <span
class="math inline">\(S\)</span>，若能到达一定在该连通块内，否则不在该连通块内。</p>
<p>假设我们通过二分找到 <span class="math inline">\(p\)</span>
个环上的点，需要的询问数如下：</p>
<ol type="1">
<li><p>二分：<span class="math inline">\(9 \times p\)</span>。</p></li>
<li><p>倍增找点：令 <span class="math inline">\(p_{1} = p, \forall i
&gt; 1,p_{i} = 2 p_{i - 1}\)</span>，则第 <span
class="math inline">\(i\)</span> 次需要 <span class="math inline">\(n -
p_{i}\)</span> 个询问，当 <span class="math inline">\(p_{i} \ge
n\)</span> 时结束（假设这时 <span class="math inline">\(i =
x\)</span>）。</p></li>
<li><p>最后需要 <span class="math inline">\(n - p_{x}\)</span>
次询问确定剩余点。</p></li>
</ol>
<p>当 <span class="math inline">\(p\)</span> 取 <span
class="math inline">\(63\)</span> 时满足题意。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 511</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> tot = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> ls = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> tim,<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;? &quot;</span>&lt;&lt;ls&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;tim&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;r - l + <span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = l;i &lt;= r;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="type">int</span> op;</span><br><span class="line">    cin&gt;&gt;op;</span><br><span class="line">    <span class="keyword">return</span> op;</span><br><span class="line">&#125;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; nodes;</span><br><span class="line"><span class="type">bool</span> vis[max_n];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>), cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>,r = n;</span><br><span class="line">    ls = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(<span class="number">1000</span>,l,mid))</span><br><span class="line">        &#123;</span><br><span class="line">            r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    nodes.<span class="built_in">insert</span>(l);</span><br><span class="line">    vis[l] = <span class="number">1</span>;</span><br><span class="line">    ls = l;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">62</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        l = <span class="number">1</span>,r = n;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">check</span>(<span class="number">1</span>,l,mid))</span><br><span class="line">            &#123;</span><br><span class="line">                r = mid;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(vis[l])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[l] = <span class="number">1</span>;</span><br><span class="line">        nodes.<span class="built_in">insert</span>(l);</span><br><span class="line">        ls = l;</span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">if</span>(nodes.<span class="built_in">size</span>() == <span class="number">63</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> sz = nodes.<span class="built_in">size</span>(); </span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            tot = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!vis[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    cout&lt;&lt;<span class="string">&quot;? &quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;sz&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;nodes.<span class="built_in">size</span>();</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">auto</span> node:nodes)</span><br><span class="line">                    &#123;</span><br><span class="line">                        cout&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;node;</span><br><span class="line">                    &#125;</span><br><span class="line">                    cout&lt;&lt;endl;</span><br><span class="line">                    <span class="type">int</span> op;</span><br><span class="line">                    cin&gt;&gt;op;</span><br><span class="line">                    <span class="keyword">if</span>(op)</span><br><span class="line">                    &#123;</span><br><span class="line">                        vis[i] = <span class="number">1</span>;</span><br><span class="line">                        nodes.<span class="built_in">insert</span>(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            sz *= <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(sz &gt; nodes.<span class="built_in">size</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            cout&lt;&lt;<span class="string">&quot;? &quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;<span class="number">1110</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;nodes.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> node:nodes)</span><br><span class="line">            &#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;node;</span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">            <span class="type">int</span> op;</span><br><span class="line">            cin&gt;&gt;op;</span><br><span class="line">            <span class="keyword">if</span>(op == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                nodes.<span class="built_in">insert</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;! &quot;</span>&lt;&lt;nodes.<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> node:nodes)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;node&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1856E PermuTree 题解</title>
    <url>/2023/10/04/CF1856E%20PermuTree%20%E9%A2%98%E8%A7%A3%20(1)/</url>
    <content><![CDATA[<h1 id="cf1856e-permutree-题解">CF1856E PermuTree 题解</h1>
<p>该题解同时包括 E1 和 E2 的解法。</p>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1856E1">洛谷 E1</a> <a
href="https://www.luogu.com.cn/problem/CF1856E2">洛谷 E2</a></p>
<p><a
href="https://codeforces.com/problemset/problem/1856/E1">Codeforces
E1</a> <a
href="https://codeforces.com/problemset/problem/1856/E2">Codeforces
E2</a></p>
<h2 id="description">Description</h2>
<p>给定一棵以 <span class="math inline">\(1\)</span>
为根的有根树，你需要给出一个 <span class="math inline">\(1\)</span> 到
<span class="math inline">\(n\)</span> 的排列 <span
class="math inline">\(a\)</span>，最大化二元组 <span
class="math inline">\((u,v)\)</span> 的数量，满足 <span
class="math inline">\(a_u &lt; a_{\rm {lca(a_u,a_v)}} &lt;
a_v\)</span>，输出这个最大值。</p>
<h2 id="solution">Solution</h2>
<h3 id="solution-of-easy-version">Solution of easy version</h3>
<p>考虑什么时候会造成贡献，显然对于一个节点，将以它儿子为根的所有子树分为两部分，一部分权值大于该点权值，另一部分权值小于该点权值，贡献为这两部分大小乘积。</p>
<p>因此我们的需要做的就是尽可能平均的将子树平分。是一个简单的 <span
class="math inline">\(O(n^2)\)</span> 01 背包，不在赘述。</p>
<h3 id="solution-of-hard-version">Solution of hard version</h3>
<p>这个背包问题并没有 <span class="math inline">\(O(n \log n)\)</span>
的做法，那么我们只能进行二进制优化了，然而复杂度是 <span
class="math inline">\(O(n \sqrt n)\)</span> 的，于是我们用
<code>bitset</code> 将复杂度变为 <span class="math inline">\(O(\dfrac{n
\sqrt n}{\omega})\)</span>。</p>
<p>需要注意的是如果对于所有数据都开一个很大的 <code>bitset</code> 仍然会
TLE。只能动态确定大小，但 <code>bitset</code>
不支持这么做。有两种解决方案。</p>
<ul>
<li><p>按照 <a href="https://www.luogu.com.cn/user/161697"><span
class="citation" data-cites="ღ">@ღ</span>ꦿ࿐</a>
大佬的方式，手动倍增写出各个大小的
<code>bitset</code>，然后手动判断用哪个。</p></li>
<li><p>使用 C++ 模板的语法，倍增实现。大概长这个样子：</p></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> len = <span class="number">1</span>&gt;<span class="type">void</span> <span class="built_in">sol</span>(<span class="type">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(len &lt;= siz[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sol</span>&lt;<span class="built_in">min</span>(len*<span class="number">2</span>,(<span class="type">long</span> <span class="type">long</span>)max_n)&gt;(y);</span><br><span class="line">    &#125;</span><br><span class="line">    bitset&lt;len&gt; bst;</span><br><span class="line">    <span class="comment">// other work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了方便我用了第二个方法，并且成功抢到了最优解。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 1001010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max(AA,BB) ((AA&gt;BB)?(AA):(BB))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> min(AA,BB) ((AA&lt;BB)?(AA):(BB))</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> to,nxt;</span><br><span class="line">&#125;edge[max_n];</span><br><span class="line"><span class="type">int</span> head[max_n],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].to = v;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> son[max_n],siz[max_n],fa[max_n];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res,ans;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; wp,ap;</span><br><span class="line"><span class="type">int</span> cnt[max_n];</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> len = <span class="number">1</span>&gt;<span class="type">void</span> <span class="built_in">sol</span>(<span class="type">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(len &lt;= siz[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sol</span>&lt;<span class="built_in">min</span>(len*<span class="number">2</span>,(<span class="type">long</span> <span class="type">long</span>)max_n)&gt;(y);</span><br><span class="line">    &#125;</span><br><span class="line">    bitset&lt;len&gt; bst;</span><br><span class="line">    bst = <span class="number">0</span>;</span><br><span class="line">    res = <span class="number">0</span>;</span><br><span class="line">    bst[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:wp)</span><br><span class="line">    &#123;</span><br><span class="line">        bst |= bst &lt;&lt; v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= (siz[y] - <span class="number">1</span>)/<span class="number">2</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(bst[i])</span><br><span class="line">        &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res,(<span class="type">long</span> <span class="type">long</span>)i * (<span class="type">long</span> <span class="type">long</span>)(siz[y] - i - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> p:ap)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt[p] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ap.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = head[u];i;i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = edge[i].to;</span><br><span class="line">        cnt[siz[v]]++;</span><br><span class="line">        ap.<span class="built_in">push_back</span>(siz[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(ap.<span class="built_in">begin</span>(),ap.<span class="built_in">end</span>());</span><br><span class="line">    ap.<span class="built_in">erase</span>(<span class="built_in">unique</span>(ap.<span class="built_in">begin</span>(),ap.<span class="built_in">end</span>()),ap.<span class="built_in">end</span>());</span><br><span class="line">    wp.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:ap)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> c = <span class="number">1</span>,nw = cnt[v];</span><br><span class="line">        <span class="keyword">while</span>(nw)</span><br><span class="line">        &#123;</span><br><span class="line">            wp.<span class="built_in">push_back</span>(<span class="built_in">min</span>(nw,c)*v);</span><br><span class="line">            nw -= <span class="built_in">min</span>(nw,c);</span><br><span class="line">            c&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sol</span>(u);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// find the max_size subtree</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = head[u];i;i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(siz[v] &gt; siz[son[u]])</span><br><span class="line">        &#123;</span><br><span class="line">            son[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// if the max_size subtree has more than half of the node on subtree_u</span></span><br><span class="line">    <span class="keyword">if</span>((siz[son[u]] &lt;&lt; <span class="number">1LL</span>) &gt;= (siz[u] - <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// then the ans is size[son[u]] * num_of_other_subtree</span></span><br><span class="line">        ans += (<span class="type">long</span> <span class="type">long</span>)siz[son[u]] * (<span class="type">long</span> <span class="type">long</span>)(siz[u] - siz[son[u]] - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solve</span>(u);</span><br><span class="line">        ans += res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = head[u];i;i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = edge[i].to;</span><br><span class="line">        <span class="built_in">dfs</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(fa[i]);</span><br><span class="line">        <span class="built_in">add</span>(fa[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n;i;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        siz[i]++;</span><br><span class="line">        siz[fa[i]] += siz[i];</span><br><span class="line">    &#125;</span><br><span class="line">    siz[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">writeln</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1855B Longest Divisors Interval 题解</title>
    <url>/2023/10/04/CF1855B%20Longest%20Divisors%20Interval%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf1855b-longest-divisors-interval-题解">CF1855B Longest Divisors
Interval 题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1855B">洛谷</a></p>
<p><a
href="https://codeforces.com/problemset/problem/1855/B">Codeforces</a></p>
<h2 id="description">Description</h2>
<p>给出一个正整数 <span class="math inline">\(n\)</span>，求出一个区间
<span class="math inline">\([l,r]\)</span> 使得区间内的每一个整数都是
<span class="math inline">\(n\)</span>
的因数且该区间的大小最大。输出这个区间的大小。</p>
<p>多测。数据范围：<span class="math inline">\(1 \leq n \leq 10^{18}, 1
\leq t \leq 10^4\)</span>。</p>
<h2 id="solution">Solution</h2>
<p>这道题的主要难点在于找到一个性质：对于任意一个数 <span
class="math inline">\(n\)</span>，另 <span
class="math inline">\(x\)</span> 是使得 <span class="math inline">\(n
\bmod x \ne 0\)</span> 的最小的正整数，则答案为 <span
class="math inline">\(x - 1\)</span>。</p>
<p>引理一： 对于任意区间 <span class="math inline">\([L,R]\)</span> 有
<span class="math inline">\(\forall i \in [1,R - L + 1]\)</span>，<span
class="math inline">\(\exists j \in [L,R]\)</span> 满足 <span
class="math inline">\(j\)</span> 是 <span
class="math inline">\(i\)</span> 的倍数。</p>
<p>证明可以考虑 <span class="math inline">\([L,R]\)</span> 内所有数对
<span class="math inline">\(i\)</span> 取模，由于余数在 <span
class="math inline">\(0 \sim i- 1\)</span> 内递增循环，周期为 <span
class="math inline">\(i\)</span>，且 <span class="math inline">\(i \leq
R - L + 1\)</span>，因此一定存在一个余数为 <span
class="math inline">\(0\)</span> 的。</p>
<p>引理二：若区间 <span class="math inline">\([L,R]\)</span>
满足题目条件，则区间 <span class="math inline">\([1,R - L + 1]\)</span>
满足题目条件。</p>
<p>根据引理一：</p>
<p><span class="math display">\[\forall i \in [1,R - L + 1] , \exists j
\in [L,R], j \bmod n = 0\]</span></p>
<p>同时因为区间 <span class="math inline">\([L,R]\)</span>
满足条件，有：</p>
<p><span class="math display">\[\forall j \in [L,R],n \bmod j =
0\]</span></p>
<p>结合上述两条以及取模的性质，易得：</p>
<p><span class="math display">\[\forall i \in [1,R - L + 1],n \bmod i =
0\]</span></p>
<p>因此区间 <span class="math inline">\([1,R - L + 1]\)</span>
满足条件。</p>
<p>所以我们只需要考虑左端点为 <span class="math inline">\(1\)</span>
的区间即可找到答案。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (n % i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">writeln</span>(i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">writeln</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solution</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1856E PermuTree 题解</title>
    <url>/2023/10/04/CF1856E%20PermuTree%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf1856e-permutree-题解">CF1856E PermuTree 题解</h1>
<p>该题解同时包括 E1 和 E2 的解法。</p>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1856E1">洛谷 E1</a> <a
href="https://www.luogu.com.cn/problem/CF1856E2">洛谷 E2</a></p>
<p><a
href="https://codeforces.com/problemset/problem/1856/E1">Codeforces
E1</a> <a
href="https://codeforces.com/problemset/problem/1856/E2">Codeforces
E2</a></p>
<h2 id="description">Description</h2>
<p>给定一棵以 <span class="math inline">\(1\)</span>
为根的有根树，你需要给出一个 <span class="math inline">\(1\)</span> 到
<span class="math inline">\(n\)</span> 的排列 <span
class="math inline">\(a\)</span>，最大化二元组 <span
class="math inline">\((u,v)\)</span> 的数量，满足 <span
class="math inline">\(a_u &lt; a_{\rm {lca(a_u,a_v)}} &lt;
a_v\)</span>，输出这个最大值。</p>
<h2 id="solution">Solution</h2>
<h3 id="solution-of-easy-version">Solution of easy version</h3>
<p>考虑什么时候会造成贡献，显然对于一个节点，将以它儿子为根的所有子树分为两部分，一部分权值大于该点权值，另一部分权值小于该点权值，贡献为这两部分大小乘积。</p>
<p>因此我们的需要做的就是尽可能平均的将子树平分。是一个简单的 <span
class="math inline">\(O(n^2)\)</span> 01 背包，不在赘述。</p>
<h3 id="solution-of-hard-version">Solution of hard version</h3>
<p>这个背包问题并没有 <span class="math inline">\(O(n \log n)\)</span>
的做法，那么我们只能进行二进制优化了，然而复杂度是 <span
class="math inline">\(O(n \sqrt n)\)</span> 的，于是我们用
<code>bitset</code> 将复杂度变为 <span class="math inline">\(O(\dfrac{n
\sqrt n}{\omega})\)</span>。</p>
<p>需要注意的是如果对于所有数据都开一个很大的 <code>bitset</code> 仍然会
TLE。只能动态确定大小，但 <code>bitset</code>
不支持这么做。有两种解决方案。</p>
<ul>
<li><p>按照 <a href="https://www.luogu.com.cn/user/161697"><span
class="citation" data-cites="ღ">@ღ</span>ꦿ࿐</a>
大佬的方式，手动倍增写出各个大小的
<code>bitset</code>，然后手动判断用哪个。</p></li>
<li><p>使用 C++ 模板的语法，倍增实现。大概长这个样子：</p></li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> len = <span class="number">1</span>&gt;<span class="type">void</span> <span class="built_in">sol</span>(<span class="type">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(len &lt;= siz[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sol</span>&lt;<span class="built_in">min</span>(len*<span class="number">2</span>,(<span class="type">long</span> <span class="type">long</span>)max_n)&gt;(y);</span><br><span class="line">    &#125;</span><br><span class="line">    bitset&lt;len&gt; bst;</span><br><span class="line">    <span class="comment">// other work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了方便我用了第二个方法，并且成功抢到了最优解。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 1001010</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max(AA,BB) ((AA&gt;BB)?(AA):(BB))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> min(AA,BB) ((AA&lt;BB)?(AA):(BB))</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">long</span> <span class="type">long</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> to,nxt;</span><br><span class="line">&#125;edge[max_n];</span><br><span class="line"><span class="type">int</span> head[max_n],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].to = v;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> son[max_n],siz[max_n],fa[max_n];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> res,ans;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; wp,ap;</span><br><span class="line"><span class="type">int</span> cnt[max_n];</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="type">int</span> len = <span class="number">1</span>&gt;<span class="type">void</span> <span class="built_in">sol</span>(<span class="type">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(len &lt;= siz[y])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sol</span>&lt;<span class="built_in">min</span>(len*<span class="number">2</span>,(<span class="type">long</span> <span class="type">long</span>)max_n)&gt;(y);</span><br><span class="line">    &#125;</span><br><span class="line">    bitset&lt;len&gt; bst;</span><br><span class="line">    bst = <span class="number">0</span>;</span><br><span class="line">    res = <span class="number">0</span>;</span><br><span class="line">    bst[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:wp)</span><br><span class="line">    &#123;</span><br><span class="line">        bst |= bst &lt;&lt; v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= (siz[y] - <span class="number">1</span>)/<span class="number">2</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(bst[i])</span><br><span class="line">        &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res,(<span class="type">long</span> <span class="type">long</span>)i * (<span class="type">long</span> <span class="type">long</span>)(siz[y] - i - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> p:ap)</span><br><span class="line">    &#123;</span><br><span class="line">        cnt[p] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ap.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = head[u];i;i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = edge[i].to;</span><br><span class="line">        cnt[siz[v]]++;</span><br><span class="line">        ap.<span class="built_in">push_back</span>(siz[v]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(ap.<span class="built_in">begin</span>(),ap.<span class="built_in">end</span>());</span><br><span class="line">    ap.<span class="built_in">erase</span>(<span class="built_in">unique</span>(ap.<span class="built_in">begin</span>(),ap.<span class="built_in">end</span>()),ap.<span class="built_in">end</span>());</span><br><span class="line">    wp.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> v:ap)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> c = <span class="number">1</span>,nw = cnt[v];</span><br><span class="line">        <span class="keyword">while</span>(nw)</span><br><span class="line">        &#123;</span><br><span class="line">            wp.<span class="built_in">push_back</span>(<span class="built_in">min</span>(nw,c)*v);</span><br><span class="line">            nw -= <span class="built_in">min</span>(nw,c);</span><br><span class="line">            c&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sol</span>(u);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// find the max_size subtree</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = head[u];i;i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(siz[v] &gt; siz[son[u]])</span><br><span class="line">        &#123;</span><br><span class="line">            son[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// if the max_size subtree has more than half of the node on subtree_u</span></span><br><span class="line">    <span class="keyword">if</span>((siz[son[u]] &lt;&lt; <span class="number">1LL</span>) &gt;= (siz[u] - <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// then the ans is size[son[u]] * num_of_other_subtree</span></span><br><span class="line">        ans += (<span class="type">long</span> <span class="type">long</span>)siz[son[u]] * (<span class="type">long</span> <span class="type">long</span>)(siz[u] - siz[son[u]] - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solve</span>(u);</span><br><span class="line">        ans += res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = head[u];i;i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = edge[i].to;</span><br><span class="line">        <span class="built_in">dfs</span>(v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(fa[i]);</span><br><span class="line">        <span class="built_in">add</span>(fa[i],i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = n;i;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        siz[i]++;</span><br><span class="line">        siz[fa[i]] += siz[i];</span><br><span class="line">    &#125;</span><br><span class="line">    siz[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">writeln</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1863B Split Sort 题解</title>
    <url>/2023/10/04/CF1863B%20Split%20Sort%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf1863b-split-sort-题解">CF1863B Split Sort 题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1863B">洛谷</a></p>
<p><a
href="https://codeforces.com/problemset/problem/1863/B">Codeforces</a></p>
<h2 id="description">Description</h2>
<p>给定一个 <span class="math inline">\(1 \sim n\)</span> 的排列 <span
class="math inline">\(q\)</span>，你可以多次进行以下操作：</p>
<ul>
<li>新建一个初始为空的序列 <span class="math inline">\(q\)</span>；</li>
<li>选择一个整数 <span class="math inline">\(x\)</span>（<span
class="math inline">\(2 \leq x \leq n\)</span>）；</li>
<li>按照在 <span class="math inline">\(p\)</span> 中出现的顺序将所有小于
<span class="math inline">\(x\)</span> 的数添加到序列 <span
class="math inline">\(q\)</span> 末尾。</li>
<li>按照在 <span class="math inline">\(p\)</span>
中出现的顺序将所有大于等于 <span class="math inline">\(x\)</span>
的数添加到序列 <span class="math inline">\(q\)</span> 末尾。</li>
<li>用序列 <span class="math inline">\(q\)</span> 替代排列 <span
class="math inline">\(p\)</span>。</li>
</ul>
<p>你需要找到使 <span class="math inline">\(\forall i \in
[1,n]\)</span>，<span class="math inline">\(p_{i} = i\)</span>
的最小操作次数。</p>
<p>本题有多组测试数据，<span class="math inline">\(1 \leq T \leq
10^{3}\)</span>，<span class="math inline">\(1 \leq n,\sum n \leq
10^{5}\)</span>。</p>
<h2 id="solution">Solution</h2>
<p>比较简单的题，一个很显然的结论，设 <span
class="math inline">\(pos_{i}\)</span> 是 <span
class="math inline">\(i\)</span> 在原序列出现的的位置，如果 <span
class="math inline">\(pos_{i} &gt; pos_{i - 1}\)</span> 那么我们必须选择
<span class="math inline">\(i\)</span> 进行一次操作。只有这样能改变
<span class="math inline">\(i\)</span> 与 <span class="math inline">\(i
- 1\)</span>
的相对顺序，而选择其他位置不会改变其相对顺序。因此我们有唯一的操作方案，对于每个
<span class="math inline">\(pos_{i - 1} &gt; pos_{i}\)</span> 的 <span
class="math inline">\(i\)</span> 操作一次。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T,n,ans;</span><br><span class="line"><span class="type">int</span> nums[<span class="number">100001</span>],pos[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(nums[i]);</span><br><span class="line">        pos[nums[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(pos[i] &gt; pos[i + <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">writeln</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// freopen(&quot;1.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solution</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1852A Ntarsis&#39; Set 题解</title>
    <url>/2023/10/04/CF1852A%20Ntarsis&#39;%20Set%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf1852a-ntarsis-set-题解">CF1852A Ntarsis' Set 题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1852A">洛谷</a></p>
<p><a
href="https://codeforces.com/problemset/problem/1852/A">Codeforces</a></p>
<h2 id="description">Description</h2>
<p>有一个集合，初始状态里面按顺序有数字 <span class="math inline">\(1
\sim 10^{1000}\)</span>。</p>
<p>现在给你一个长度为 <span class="math inline">\(n\)</span> 数组 <span
class="math inline">\(a (1\leq a_i \leq 10^9 )\)</span>，要进行 <span
class="math inline">\(k\)</span> 次操作，每次操作将当前集合中第 <span
class="math inline">\(a_1\)</span> 小、第 <span
class="math inline">\(a_2\)</span> 小、......、第 <span
class="math inline">\(a_n\)</span> 小的数同时移除。</p>
<p>请问 <span class="math inline">\(k\)</span>
次操作之后，最小的数是多少。</p>
<h2 id="solution">Solution</h2>
<p>看到这道题的数据范围，第一想法是二分答案。于是需要思考的就是如何判断对于一个数
<span class="math inline">\(p\)</span>，所有小于 <span
class="math inline">\(p\)</span> 的数是否都会被删除。</p>
<p>由于我们在删除的时候只关心数字是第几小的，因此我们可以在每次删除后对数字进行重新编号。对于一个编号为
<span class="math inline">\(x\)</span> 的数，若删除了 <span
class="math inline">\(p\)</span> 个编号小于 <span
class="math inline">\(x\)</span> 的数，那么它的编号变为 <span
class="math inline">\(x - p\)</span>。</p>
<p>由此，我们可以枚举 <span class="math inline">\(k\)</span>
轮，最终只需要检查这个数最后的编号是否大于 <span
class="math inline">\(0\)</span> 即可。</p>
<p>check 部分的代码单独给出：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tim = k;</span><br><span class="line">    <span class="keyword">while</span>(tim--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="built_in">lower_bound</span>(nums + <span class="number">1</span>,nums + n + <span class="number">1</span>,x) - nums;</span><br><span class="line">        <span class="keyword">if</span>(p &gt; n || nums[p] &gt; x)</span><br><span class="line">        &#123;</span><br><span class="line">            p--;</span><br><span class="line">        &#125;</span><br><span class="line">        x -= p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于二分的上下界，显然最小为 <span
class="math inline">\(1\)</span>，由于删去了 <span
class="math inline">\(n \times k\)</span> 个数，所以答案不会大于 <span
class="math inline">\(n \times k + 1\)</span>。注意此题要开
<code>long long</code>。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 210101</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T,n,k;</span><br><span class="line"><span class="type">int</span> nums[max_n];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> tim = k;</span><br><span class="line">    <span class="keyword">while</span>(tim--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> p = <span class="built_in">lower_bound</span>(nums + <span class="number">1</span>,nums + n + <span class="number">1</span>,x) - nums;</span><br><span class="line">        <span class="keyword">if</span>(p &gt; n || nums[p] &gt; x)</span><br><span class="line">        &#123;</span><br><span class="line">            p--;</span><br><span class="line">        &#125;</span><br><span class="line">        x -= p;</span><br><span class="line">        <span class="keyword">if</span>(x &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n),<span class="built_in">read</span>(k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>,r = n * k + <span class="number">1</span>,mid,ans = <span class="number">1</span>; <span class="comment">// ans 设置为 1，若 a[1] &gt; 1 不影响</span></span><br><span class="line">    <span class="keyword">while</span>(l &lt;= r)</span><br><span class="line">    &#123;</span><br><span class="line">        mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(mid)) <span class="comment">// 不会被删去</span></span><br><span class="line">        &#123;</span><br><span class="line">            r = mid - <span class="number">1</span>;</span><br><span class="line">            ans = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">writeln</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solution</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1863C MEX Repetition 题解</title>
    <url>/2023/10/04/CF1863C%20MEX%20Repetition%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf1863c-mex-repetition-题解">CF1863C MEX Repetition 题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1863C">洛谷</a></p>
<p><a
href="https://codeforces.com/problemset/problem/1863/C">Codeforces</a></p>
<h2 id="description">Description</h2>
<p>给你一个长度为 <span class="math inline">\(n\)</span> 的序列 <span
class="math inline">\(a\)</span>，满足 <span
class="math inline">\(\forall i \in [1,n]\)</span>，<span
class="math inline">\(0 \leq a_{i} \leq n\)</span>
且序列中的数互不相同。</p>
<p>定义一次操作为：</p>
<ul>
<li>按照 <span class="math inline">\(i\)</span> 从 <span
class="math inline">\(1\)</span> 到 <span
class="math inline">\(n\)</span> 的顺序，<span
class="math inline">\(a_{i} \gets \operatorname{MEX}(a_{1} \ldots
a_{n})\)</span>。</li>
</ul>
<p>注意：一次操作中的每一步改变 <strong>不是</strong>
同时进行的，即每一步求 <span
class="math inline">\(\operatorname{MEX}\)</span> 的序列 <span
class="math inline">\(a\)</span> 都在上一步被改变。</p>
<p>你需要求出经过 <span class="math inline">\(k\)</span>
次操作之后的序列 <span class="math inline">\(a\)</span>。</p>
<p>本题有多组测试数据，<span class="math inline">\(1 \leq T,n,\sum n
\leq 10^5\)</span>，<span class="math inline">\(1 \leq k \leq
10^{9}\)</span>。</p>
<h2 id="solution">Solution</h2>
<p>看到题目，让我们先来模拟一下。</p>
<p><span class="math display">\[\begin{array}{c}
\left \{1,2,3,4,5 \right\} \\
\left \{0,1,2,3,4 \right\} \\
\left \{5,0,1,2,3 \right\} \\
\left \{4,5,0,1,2 \right\} \\
\left \{3,4,5,0,1 \right\} \\
\left \{2,3,4,5,0 \right\} \\
\left \{1,2,3,4,5 \right\} \\
\end{array}\]</span></p>
<p>很容易知道，我们在替换时，第一个数总是在上次没出现的数。然后没出现的数就变成了刚才被替换掉的数。假设经过第
<span class="math inline">\(i\)</span> 次替换的序列中第 <span
class="math inline">\(j\)</span> 个数是 <span
class="math inline">\(a_{i,j}\)</span>，那么有 <span
class="math inline">\(a_{i,1} = a_{i-2,n}\)</span>，<span
class="math inline">\(\forall j \in [2,n]\)</span>，<span
class="math inline">\(a_{i,j} = a_{i - 1,j - 1}\)</span>。</p>
<p>虽然我们推出了规律，但这玩意是 <span
class="math inline">\(O(nk)\)</span> 的，炸裂 TLE。</p>
<p>但我们可以尝试找一找规律，如果看上面的看不出来就看看下面这个吧。</p>
<p><span class="math display">\[
\begin{array}{c}
\left \{1,2,3,4,5,(0) \right\} \\
\left \{0,1,2,3,4,(5) \right\} \\
\left \{5,0,1,2,3,(4) \right\} \\
\left \{4,5,0,1,2,(3) \right\} \\
\left \{3,4,5,0,1,(2) \right\} \\
\left \{2,3,4,5,0,(1) \right\} \\
\left \{1,2,3,4,5,(0) \right\}
\end{array}
\]</span></p>
<p>发现什么了嘛，其实每次的只是相当于上一次平移了一下，因为当前没有的就是刚被替换掉的。</p>
<p>于是我们只需要找到起始的数字就可以了。由于每次移动一个，初始的位置就是
<span class="math inline">\((1 - k) \bmod (n +
1)\)</span>。负数取模请自行处理。</p>
<p>答案从起始位置输出 <span class="math inline">\(n\)</span>
个就可以了。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 310101</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T,n,k;</span><br><span class="line"><span class="type">int</span> nums[max_n],vis[max_n];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n),<span class="built_in">read</span>(k);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(nums[i]);</span><br><span class="line">        vis[nums[i]] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[i])</span><br><span class="line">        &#123;</span><br><span class="line">            nums[<span class="number">0</span>] = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> beg = (n + <span class="number">2</span> - (k % (n + <span class="number">1</span>))) % ( n + <span class="number">1</span>);</span><br><span class="line">  <span class="comment">//  cout&lt;&lt;&quot;@&quot;&lt;&lt;beg&lt;&lt;endl;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++,beg++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">writesp</span>(nums[beg % (n + <span class="number">1</span>)]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        vis[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// freopen(&quot;1.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solution</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1864B Swap and Reverse 题解</title>
    <url>/2023/10/04/CF1864B%20Swap%20and%20Reverse%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf1864b-swap-and-reverse-题解">CF1864B Swap and Reverse
题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1864B">洛谷</a></p>
<p><a
href="https://codeforces.com/problemset/problem/1864/B">Codeforces</a></p>
<h2 id="description">Description</h2>
<p>给定正整数 <span class="math inline">\(n,k\)</span> 和一个长度为
<span class="math inline">\(n\)</span> 的字符串 <span
class="math inline">\(s\)</span>，找到能通过任意次数的以下操作得到的具有最小字典序的字符串。</p>
<ul>
<li><p>选择一个 <span class="math inline">\(i \in [1,n -
2]\)</span>，交换 <span class="math inline">\(s_{i}\)</span> 和 <span
class="math inline">\(s_{i + 2}\)</span>。</p></li>
<li><p>选择一个 <span class="math inline">\(i \in [1,n - k +
1]\)</span>，将字符串的区间 <span class="math inline">\(s[i \dots i +
k-1]\)</span> 翻转。</p></li>
</ul>
<p>多组测试数据， <span class="math inline">\(1\leq k &lt; n \leq
10^{5}\)</span>。</p>
<h2 id="solution">Solution</h2>
<ul>
<li><p>操作一：看到可以任意次数交换 <span
class="math inline">\(s_{i}\)</span> 和 <span class="math inline">\(s_{i
+ 2}\)</span>，就可以想到神奇的排序算法，就相当于可以交换
<strong>奇偶性相同的两个字符</strong>。</p></li>
<li><p>操作二：翻转长度为 <span class="math inline">\(k\)</span>
的区间</p>
<ul>
<li>若 <span class="math inline">\(k\)</span>
为奇数，可以通过操作一实现，没有任何意义。</li>
<li>若 <span class="math inline">\(k\)</span>
为偶数，可以改变某字符出现位置奇偶性，结合操作一，可以任意交换字符串内字符。</li>
</ul></li>
</ul>
<p>因此我们只需分类讨论 <span class="math inline">\(k \bmod 2\)</span>
的值进行排序即可。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 510101</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="type">char</span> s[max_n];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n),<span class="built_in">read</span>(k);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(k &amp; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        vector&lt;<span class="type">char</span>&gt; mp[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            mp[i &amp; <span class="number">1</span>].<span class="built_in">push_back</span>(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(mp[<span class="number">1</span>].<span class="built_in">begin</span>(),mp[<span class="number">1</span>].<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(mp[<span class="number">0</span>].<span class="built_in">begin</span>(),mp[<span class="number">0</span>].<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> cnt[<span class="number">2</span>];</span><br><span class="line">        cnt[<span class="number">0</span>] = cnt[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">putchar</span>(mp[i &amp; <span class="number">1</span>][cnt[i &amp; <span class="number">1</span>]++]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sort</span>(s + <span class="number">1</span>,s + n + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">putchar</span>(s[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solution</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1863D Two-Colored Dominoes 题解</title>
    <url>/2023/10/04/CF1863D%20Two-Colored%20Dominoes%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf1863d-two-colored-dominoes-题解">CF1863D Two-Colored Dominoes
题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1863D">洛谷</a></p>
<p><a
href="https://codeforces.com/problemset/problem/1863/D">Codeforces</a></p>
<h2 id="description">Description</h2>
<p>有一个 <span class="math inline">\(n \times m\)</span>
的棋盘，上面铺着一些 <span class="math inline">\(1 \times 2\)</span>
的多米诺骨牌（横竖均有可能），骨牌之间没有重叠。</p>
<p>你需要找到一种染色方案满足以下条件：</p>
<ul>
<li>每个多米诺骨牌一端被染白，另一端被染黑。其他没有骨牌的格子不染色。</li>
<li>对于棋盘的每一行，被染黑的格子数等于被染白的格子数。</li>
<li>对于棋盘的每一列，被染黑的格子数等于被染白的格子数。</li>
</ul>
<p>请输出任意一种染色方案，如果无解，输出 <span
class="math inline">\(-1\)</span>。</p>
<p>本题有多组测试数据，<span class="math inline">\(1 \leq T \leq
10^{4}\)</span>，<span class="math inline">\(2 \leq n,m \leq
500\)</span>，<span class="math inline">\(\sum (n \times m) \leq 2.5
\times 10^{5}\)</span>。</p>
<h2 id="solution">Solution</h2>
<p>由于题目限制每个多米诺骨牌一端被染白，另一端被染黑，因此容易得出
<strong>横着摆放的骨牌对行的限制没有影响，横着摆放的骨牌对列的限制没有影响。</strong></p>
<p>因此我们可以先看行的限制，显然，如果一行中有奇数个竖着放的骨牌则无解。</p>
<p>然后分类讨论：</p>
<ul>
<li>若当前格子是骨牌的上侧，没有限制，但要考虑后面的格子。</li>
<li>若当前格子是骨牌的下侧，由于上一行已经遍历过，当前格子的状态就已经确定了。</li>
</ul>
<p>因此我们可以记录三个数字，<span
class="math inline">\(cnt_{1}\)</span> 表示没有限制的格子数量，<span
class="math inline">\(cnt_{2}\)</span> 表示一定需要染黑的数量，<span
class="math inline">\(cnt_{3}\)</span> 表示一定需要染白的数量。</p>
<p>统计结束后，对于每个没有限制的格子，我们贪心的选择当前少的颜色涂，数量相同的时候随便选一个就行，这样到最后如果两个颜色数量还不同就无解了。</p>
<p>列的限制同理即可。</p>
<p>时间复杂度 <span class="math inline">\(\Omicron \left( n \times
m\right)\)</span>。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">char</span> mp[<span class="number">510</span>][<span class="number">510</span>],ans[<span class="number">510</span>][<span class="number">510</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n),<span class="built_in">read</span>(m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            ans[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,mp[i] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 是否有答案；</span></span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">// 先考虑行的情况，由于横着的不会造成影响直接跳过</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,cnt1,cnt2,cnt3;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// cnt1 无法确定个数</span></span><br><span class="line">        <span class="comment">// cnt2 确定的 B</span></span><br><span class="line">        <span class="comment">// cnt3 确定的 W</span></span><br><span class="line">        cnt1 = cnt2 = cnt3 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(mp[i][j] == <span class="string">&#x27;U&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ++cnt1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mp[i][j] == <span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(ans[i - <span class="number">1</span>][j] == <span class="string">&#x27;W&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ++cnt2;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    ++cnt3;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((cnt1 + cnt2 + cnt3) &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j] == <span class="string">&#x27;U&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(cnt2 &gt; cnt3)</span><br><span class="line">                    &#123;</span><br><span class="line">                        ans[i][j] = <span class="string">&#x27;W&#x27;</span>;</span><br><span class="line">                        ++cnt3;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        ans[i][j] = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">                        ++cnt2;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(mp[i][j] == <span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(ans[i - <span class="number">1</span>][j] == <span class="string">&#x27;W&#x27;</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        ans[i][j] = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        ans[i][j] = <span class="string">&#x27;W&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt2 != cnt3) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>,cnt1,cnt2,cnt3;j &lt;= m;j++) &#123;</span><br><span class="line">        cnt1 = cnt2 = cnt3 = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(mp[i][j] == <span class="string">&#x27;L&#x27;</span>) &#123;</span><br><span class="line">                ++cnt1;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(mp[i][j] == <span class="string">&#x27;R&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(ans[i][j - <span class="number">1</span>] == <span class="string">&#x27;W&#x27;</span>) &#123;</span><br><span class="line">                    ++cnt2;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    ++cnt3;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((cnt1 + cnt2 + cnt3) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(mp[i][j] == <span class="string">&#x27;L&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(cnt2 &gt; cnt3) &#123;</span><br><span class="line">                        ans[i][j] = <span class="string">&#x27;W&#x27;</span>;</span><br><span class="line">                        ++cnt3;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        ans[i][j] = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">                        ++cnt2;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(mp[i][j] == <span class="string">&#x27;R&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(ans[i][j - <span class="number">1</span>] == <span class="string">&#x27;W&#x27;</span>)&#123;</span><br><span class="line">                        ans[i][j] = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span>&#123;</span><br><span class="line">                        ans[i][j] = <span class="string">&#x27;W&#x27;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt2 != cnt3)&#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag == <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= m;j++)&#123;</span><br><span class="line">            <span class="built_in">putchar</span>(ans[i][j]);</span><br><span class="line">            ans[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;<span class="built_in">solution</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1864C Divisor Chain 题解</title>
    <url>/2023/10/04/CF1864C%20Divisor%20Chain%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf1864c-divisor-chain-题解">CF1864C Divisor Chain 题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1864C">洛谷</a></p>
<p><a
href="https://codeforces.com/problemset/problem/1864/C">Codeforce</a></p>
<h2 id="description">Description</h2>
<p>给定一个整数 <span class="math inline">\(x\)</span>，目标是在最多
<span class="math inline">\(10^{3}\)</span> 次操作内把 <span
class="math inline">\(x\)</span> 减到 <span
class="math inline">\(1\)</span>。</p>
<p>定义一个操作：选择一个 <span class="math inline">\(x\)</span> 的因数
<span class="math inline">\(d\)</span>，把 <span
class="math inline">\(x\)</span> 修改为 <span
class="math inline">\(x-d\)</span>。</p>
<p>同时还有一个额外的限制：相同的 <span class="math inline">\(d\)</span>
值不能选择超过 <span class="math inline">\(2\)</span> 次。</p>
<p>有 <span class="math inline">\(t\)</span> 组测试数据。</p>
<p>数据范围：<span class="math inline">\(1\le t\le 10^3,2\le x\le
10^9\)</span>。</p>
<h2 id="solution">Solution</h2>
<p>一个很显然的事情是对于一个 <span class="math inline">\(x =
2^{k}\)</span>，我们只需要 <span class="math inline">\(k\)</span>
次操作就可以了，具体的，每次我们让 <span
class="math inline">\(x\)</span> 变为 <span
class="math inline">\(\frac{x}{2}\)</span>，直到 <span
class="math inline">\(x = 1\)</span>，这个过程每个数只会用一次。</p>
<p>因此让我们考虑如何让 <span class="math inline">\(x =
2^{k}\)</span>，我们可以保留其二进制下最高位的 <span
class="math inline">\(1\)</span>，将其余的全部删除。具体的，我们每次将
<span class="math inline">\(x\)</span> 消掉二进制下最低位的 <span
class="math inline">\(1\)</span>，这个过程可以用 <span
class="math inline">\(\operatorname{lowbit}(x)\)</span> 轻松完成。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T,n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (-x)&amp;x;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans.<span class="built_in">clear</span>();</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    ans.<span class="built_in">push_back</span>(n);</span><br><span class="line">    <span class="type">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n != <span class="built_in">lowbit</span>(n))</span><br><span class="line">    &#123;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(n - <span class="built_in">lowbit</span>(n));</span><br><span class="line">        n -= <span class="built_in">lowbit</span>(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(n &gt; <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ans.<span class="built_in">push_back</span>(n / <span class="number">2</span>);</span><br><span class="line">        n /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">writeln</span>(ans.<span class="built_in">size</span>());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> now:ans)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">writesp</span>(now);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solution</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1864D Matrix Cascade 题解</title>
    <url>/2023/10/04/CF1864D%20Matrix%20Cascade%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf1864d-matrix-cascade-题解">CF1864D Matrix Cascade 题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1864D">洛谷</a></p>
<p><a href="codeforces.com/problemset/problem/1864/D">Codeforces</a></p>
<h2 id="description">Description</h2>
<p>给定一个 <span class="math inline">\(n\times n\)</span> 的 01
矩阵。</p>
<p>定义一次操作为：选择矩阵上第 <span class="math inline">\(i\)</span>
行第 <span class="math inline">\(j\)</span> 列的格子 <span
class="math inline">\((i,j)\)</span>，将其取反，并取反所有满足 <span
class="math inline">\(x &gt; i, x - i \ge |y - j|\)</span> 的位置 <span
class="math inline">\((x,y)\)</span>。</p>
<p>其中，“取反”的意思为：把 <span class="math inline">\(0\)</span> 变为
<span class="math inline">\(1\)</span>，<span
class="math inline">\(1\)</span> 变为 <span
class="math inline">\(0\)</span>。</p>
<p>求要把给定矩阵全变为 <span class="math inline">\(0\)</span>
的最少操作次数。</p>
<p>有 <span class="math inline">\(t\)</span> 组测试数据。</p>
<p>数据范围：<span class="math inline">\(1\le t\le 10^5,2\le n\le
3\times10^3\)</span>，保证所有测试数据中 <span
class="math inline">\(1\le \sum n^2\le 9\times10^6\)</span>。</p>
<h2 id="solution">Solution</h2>
<p>观察题目的操作，我们可以很容易的发现每次操作改变的是下面的一个等腰直角三角形（当然会因为矩阵有边界被截掉一部分）。</p>
<p>观察这个区域左边的那条线，发现它的表达式为 <span
class="math inline">\(x + y = i + j\)</span>，<span
class="math inline">\(\left(i,j \right)\)</span>
是选择的位置。也就是说，我们选择一个位置 <span
class="math inline">\((i,j)\)</span>，一定不能改变 <span
class="math inline">\(x + y &lt; i + j\)</span> 的点 <span
class="math inline">\((x,y)\)</span>，于是我们可以按照 <span
class="math inline">\(x + y\)</span> 从小到大的顺序枚举所有点，在 <span
class="math inline">\(x + y\)</span> 相同时，显然我们选择更高（即 <span
class="math inline">\(x\)</span>
更小）的位置能影响的范围更大，这样就能确定唯一也是最优的方案。</p>
<p>如果我们对于每个点直接暴力修改得到的是 <span
class="math inline">\(O(n^4)\)</span> 的算法。</p>
<p>按照顺序枚举后，我们就不需要考虑左边界了，让我们来看一下右侧的边界，根据题目条件很容易得到满足的条件是是
<span class="math inline">\(x - y &gt; i -
j\)</span>。因此我们可以使用树状数组实现差分，维护每一个 <span
class="math inline">\(x - y\)</span> 被更新了几次，枚举到一个点时如果
<span class="math inline">\(\left([mp_{i,j} = \texttt{1}] +
\texttt{这个点被更新的次数}\right) \equiv 1 \pmod
2\)</span>，我们需要更新 <span class="math inline">\(i - j\)</span> 并让
<span class="math inline">\(ans \gets ans + 1\)</span>。</p>
<p>需要注意的是，树状数组无法支持负下标，因此我们将所有的 <span
class="math inline">\(x - y\)</span> 统一变为 <span
class="math inline">\(x - y + n\)</span>，枚举范围变为 <span
class="math inline">\([0,2n]\)</span> 即可。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> mp[<span class="number">5100</span>][<span class="number">5100</span>];</span><br><span class="line"><span class="type">int</span> tree[<span class="number">10011</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">const</span> <span class="type">int</span> &amp;i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (-i)&amp;(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;x &lt;= <span class="number">2</span> * n;x+= <span class="built_in">lowbit</span>(x))</span><br><span class="line">    &#123;</span><br><span class="line">        tree[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x -= <span class="built_in">lowbit</span>(x))</span><br><span class="line">    &#123;</span><br><span class="line">        res += tree[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">2</span> * n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[i] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,mp[i] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> sum = <span class="number">2</span>;sum &lt;= <span class="number">2</span> * n;++sum)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="built_in">max</span>(<span class="number">1LL</span>,sum - n),j = <span class="built_in">min</span>(n,sum - <span class="number">1</span>);i &lt; sum &amp;&amp; i &lt;= n;i++,j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(((mp[i][j] - <span class="string">&#x27;0&#x27;</span>) + <span class="built_in">query</span>(i - j + n)) &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                ++ans;</span><br><span class="line">                <span class="built_in">update</span>(i - j + n);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">writeln</span>(ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solution</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF485B Valuable Resources 题解</title>
    <url>/2023/10/04/CF485B%20Valuable%20Resources%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf485b-valuable-resources-题解">CF485B Valuable Resources
题解</h1>
<h2 id="题意简述">题意简述</h2>
<p>在同一平面直角坐标系中有 <span class="math inline">\(n\)</span>
个点，给出它们的横纵坐标，用最小的<strong>平行于坐标轴</strong>的正方形将它们全部框起来，求该正方形的面积。</p>
<h2 id="题目解析">题目解析</h2>
<p>首先如果我们需要把所有点框起来，就要保证<strong>正方形的左侧边横坐标小于等于所有点最小的横坐标，正方形的右侧边横坐标大于等于所有点最大的横坐标</strong>，上下边同理,如图，不在赘述。
<img
src="https://cdn.luogu.com.cn/upload/image_hosting/vt67x3xw.png" /></p>
<p>由于题目需要的是一个<strong>正方形</strong>，那我们就取最长边的长度作为边长即可包围所有点，于是有以下公式。</p>
<p><span class="math display">\[S = a \times a = max^2 (\max_{i =
1}^{n}x_{i} - \min_{i = 1}^{n}x_{i} ,\max_{i = 1}^{n}y_{i} - \min_{i =
1}^{n}y_{i})\]</span></p>
<p>同时需要注意数据范围（题目中没写，原题为 <span
class="math inline">\(10^9\)</span>），开 <code>long long</code>
即可。</p>
<h2 id="完整代码">完整代码</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define int long long</span><br><span class="line">#define max(A, B) (A &gt; B) ? (A) : (B)</span><br><span class="line">#define min(A, B) (A &lt; B) ? (A) : (B)</span><br><span class="line">void read(int &amp;p)</span><br><span class="line">&#123;</span><br><span class="line">    p = 0;</span><br><span class="line">    int k = 1;</span><br><span class="line">    char c = getchar();</span><br><span class="line">    while (c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        if (c == &#x27;-&#x27;)</span><br><span class="line">        &#123;</span><br><span class="line">            k = -1;</span><br><span class="line">        &#125;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    while (c &gt;= &#x27;0&#x27; &amp;&amp; c &lt;= &#x27;9&#x27;)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * 10 + c - &#x27;0&#x27;;</span><br><span class="line">        c = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    return;</span><br><span class="line">&#125;</span><br><span class="line">void write_(int x)</span><br><span class="line">&#123;</span><br><span class="line">    if (x &lt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        putchar(&#x27;-&#x27;);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    if (x &gt; 9)</span><br><span class="line">    &#123;</span><br><span class="line">        write_(x / 10);</span><br><span class="line">    &#125;</span><br><span class="line">    putchar(x % 10 + &#x27;0&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">void writesp(int x)</span><br><span class="line">&#123;</span><br><span class="line">    write_(x);</span><br><span class="line">    putchar(&#x27; &#x27;);</span><br><span class="line">&#125;</span><br><span class="line">void writeln(int x)</span><br><span class="line">&#123;</span><br><span class="line">    write_(x);</span><br><span class="line">    putchar(&#x27;\n&#x27;);</span><br><span class="line">&#125;</span><br><span class="line">int n;</span><br><span class="line">int max_x, max_y, min_x, min_y;</span><br><span class="line">signed main()</span><br><span class="line">&#123;</span><br><span class="line">#if _clang_</span><br><span class="line">    freopen(&quot;1.in&quot;, &quot;r&quot;, stdin);</span><br><span class="line">    freopen(&quot;1.out&quot;, &quot;w&quot;, stdout);</span><br><span class="line">#endif</span><br><span class="line">    read(n);</span><br><span class="line">    max_x = max_y = LONG_LONG_MIN;</span><br><span class="line">    min_x = min_y = LONG_LONG_MAX;</span><br><span class="line">    for (int i = 1, x, y; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        read(x), read(y);</span><br><span class="line">        max_x = max(max_x, x);</span><br><span class="line">        min_x = min(min_x, x);</span><br><span class="line">        max_y = max(max_y, y);</span><br><span class="line">        min_y = min(min_y, y);</span><br><span class="line">    &#125;</span><br><span class="line">    int l = max(max_x - min_x, max_y - min_y);</span><br><span class="line">    writeln(l * l);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF587A Duff and Weight Lifting 题解</title>
    <url>/2023/10/04/CF587A%20Duff%20and%20Weight%20Lifting%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf587a-duff-and-weight-lifting-题解">CF587A Duff and Weight
Lifting 题解</h1>
<h2 id="link">Link</h2>
<p><a href="https://www.luogu.com.cn/problem/CF587A">Luogu</a></p>
<p><a
href="https://codeforces.com/problemset/problem/587/A">Codeforces</a></p>
<h2 id="description">Description</h2>
<p>给你一串数，两个 <span class="math inline">\(a\)</span> 可以合成一个
<span class="math inline">\(a +
1\)</span>，一直合成，最终剩余的数有多少个？</p>
<h2 id="solution">Solution</h2>
<p>既然两个 <span class="math inline">\(a\)</span> 可以合成 <span
class="math inline">\(a + 1\)</span>，<span
class="math inline">\(nums_a\)</span> 个 <span
class="math inline">\(a\)</span> 就可以合成 $ $ 个 <span
class="math inline">\(a + 1\)</span>，同时若剩余，答案加一。</p>
<p>写成代码就是这样：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">nums[i + <span class="number">1</span>] += nums[i] / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (nums[i] % <span class="number">2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ++ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每次只可能更改 <span class="math inline">\(nums_{a + 1}\)</span>
的值，正序循环无后效性，直接正序枚举即可。注意，最大的数字可能进位，因此我们的循环应该为</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= mx || nums[i] != <span class="number">0</span>; i++)</span><br></pre></td></tr></table></figure>
<p>其中 <span class="math inline">\(mx\)</span> 为输入的最大的数。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 1001001</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n, nums[max_n], mx;</span><br><span class="line"><span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _clang_</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, val; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(val);</span><br><span class="line">        ++nums[val];</span><br><span class="line">        mx = <span class="built_in">max</span>(mx, val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= mx || nums[i] != <span class="number">0</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!nums[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        nums[i + <span class="number">1</span>] += nums[i] / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] % <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ++ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">writeln</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<p><a href="https://badges.toozhao.com/stats/01GXQGTX3Q9S9FMKWNMRG4REBS"
title="Get your own page views count badge on badges.toozhao.com"><img
src="https://badges.toozhao.com/badges/01GXQGTX3Q9S9FMKWNMRG4REBS/orange.svg"
alt="Page Views Count" /></a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>CF878E Numbers on the blackboard 题解</title>
    <url>/2023/10/04/CF878E%20Numbers%20on%20the%20blackboard%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="cf878e-numbers-on-the-blackboard-题解">CF878E Numbers on the
blackboard 题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/CF878E">洛谷</a></p>
<p><a
href="https://codeforces.com/problemset/problem/878/E">Codeforces</a></p>
<h2 id="description">Description</h2>
<p>给出 <span class="math inline">\(n\)</span> 个数字，每次询问一个区间
<span
class="math inline">\([l,r]\)</span>，对这个区间内部的点进行如下操作。 -
每次操作可以合并<strong>相邻</strong>两个数 <span
class="math inline">\(x,y\)</span>，用 <span
class="math inline">\(x+2y\)</span> 替换它们。</p>
<p>对于每次询问，输出当最后只剩下一个数字时，这个数字的最大值。询问互相独立，答案对
<span class="math inline">\(10^9 + 7\)</span> 取模。</p>
<h2 id="solution">Solution</h2>
<p>我们考虑把整个区间从右向左依次合并答案是什么样的。</p>
<ul>
<li>第一次合并 <span class="math inline">\(nums_{r - 1} + 2 \times
nums_{r}\)</span>。</li>
<li>第二次合并 <span class="math inline">\(nums_{r - 2} + 2 \times \left
(nums_{r - 1} + 2 \times nums_{r} \right)\)</span>。</li>
<li><span class="math inline">\(\cdots\)</span></li>
<li>最后一次 <span class="math inline">\(nums_{l} + 2 \times \left
(nums_{l + 1} + 2\times ( nums_{l + 2} + \cdots )\right)\)</span></li>
</ul>
<p>可以看出，对于每一个 <span
class="math inline">\(nums_{i}\)</span>，对答案的贡献都是 <span
class="math inline">\(2^{k} (k \geq 0)\)</span>，并且 <span
class="math inline">\(\forall i \in [1,n-1]\)</span>，<span
class="math inline">\(k_{i + 1} = k_{i} + 1\)</span>。</p>
<p>那么如果我们不是这样合并的是否还有这样的性质呢？考虑把合并的区间分成从右向左按顺序合并的若干段，易证每段仍符合该性质。合并两段的时候会发生什么呢，可以想到是将右侧一段的贡献整个乘以
<span class="math inline">\(2\)</span>，也就是将右侧段的 <span
class="math inline">\(k\)</span> 全部加一。</p>
<p>因此，无论我们如何合并，最终对于整个区间每个数所乘的系数是一定的，系数变化如下（括号表示不一定存在）。即一个从
<span class="math inline">\(0\)</span> 开始的串和一些从 <span
class="math inline">\(1\)</span> 开始的串。</p>
<p><span
class="math display">\[0,1,\cdots,1,(2),\cdots,1,(2),\cdots\]</span></p>
<p>想让最终结果尽可能大，可以考虑贪心。</p>
<p>假设当前决策到第 <span class="math inline">\(i\)</span> 个数，<span
class="math inline">\(i - 1\)</span> 所在的块长度为 <span
class="math inline">\(len\)</span>。</p>
<ul>
<li>若 <span class="math inline">\(nums_{i} &lt;
0\)</span>，选择不合并，单独开出来一个块，系数为 <span
class="math inline">\(2^{0} = 1\)</span>。</li>
<li>若 <span class="math inline">\(nums_{i} \ge
0\)</span>，选择合并，系数为 <span
class="math inline">\(2^{len}\)</span>。</li>
<li><strong>若合并后使得该块变为正的，代表后面的可以抵消中间负数的影响，继续向前合并。</strong></li>
</ul>
<p>可以看出上面的过程存储每一个块类似于栈，因此我们用栈来模拟这个过程。直接实现复杂度为
<span class="math inline">\(O(nq)\)</span>，我们可以离线操作，将操作按照
<span class="math inline">\(r\)</span> 排序，再利用二分查找 <span
class="math inline">\(l\)</span> 右侧的第一个块，单独减去 <span
class="math inline">\(l\)</span> 左侧多出来的贡献即可。时间复杂度变为
<span class="math inline">\(O(n \log
n)\)</span>。合并过程中，如果遇到极大的块，不能直接继续合并，否则轻松炸
<code>long long</code>，特判这种情况，将这个块设为极大值即可。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 410101</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mo 1000000007</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k =  <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(c &gt;=<span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> lg2[max_n],nums[max_n],sum[max_n];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Query</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l,r,id;</span><br><span class="line">    <span class="type">bool</span> <span class="keyword">operator</span>&lt;(Query q2)</span><br><span class="line">    <span class="type">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;r != q2.r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>-&gt;r &lt; q2.r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>-&gt;l &gt; q2.l;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;querys[max_n];</span><br><span class="line"><span class="type">int</span> sum2[max_n],ans[max_n],pow_2[max_n],st[max_n],ans_sum[max_n],inv[max_n];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n),<span class="built_in">read</span>(m);</span><br><span class="line">    pow_2[<span class="number">0</span>] = inv[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(nums[i]);</span><br><span class="line">        pow_2[i] = (pow_2[i - <span class="number">1</span>] &lt;&lt; <span class="number">1LL</span>) % mo;</span><br><span class="line">        inv[i] = inv[i - <span class="number">1</span>] * <span class="number">500000004</span> % mo; <span class="comment">// 预处理逆元</span></span><br><span class="line"></span><br><span class="line">        ans_sum[i] = (ans_sum[i - <span class="number">1</span>] + pow_2[i] * nums[i]) % mo; <span class="comment">// 预处理不分块贡献</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(querys[i].l);       </span><br><span class="line">        <span class="built_in">read</span>(querys[i].r);</span><br><span class="line">        querys[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">stable_sort</span>(querys + <span class="number">1</span>,querys + m + <span class="number">1</span>);<span class="comment">// 按照右区间排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,j = <span class="number">1</span>,l,r;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        l = querys[i].l,r = querys[i].r;</span><br><span class="line">        <span class="keyword">for</span>(;j &lt;= r;j++)</span><br><span class="line">        &#123;    </span><br><span class="line">            st[++st[<span class="number">0</span>]] = j;</span><br><span class="line">            sum[st[<span class="number">0</span>]] = nums[j];</span><br><span class="line">            <span class="comment">// 存在多余的块且当前块大于 0</span></span><br><span class="line">            <span class="keyword">while</span>(st[<span class="number">0</span>] &gt; <span class="number">1</span> &amp;&amp; sum[st[<span class="number">0</span>]] &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 为了避免爆炸的数字大小，特殊处理一些情况</span></span><br><span class="line">                <span class="keyword">if</span>(st[st[<span class="number">0</span>]] - st[st[<span class="number">0</span>] - <span class="number">1</span>] &gt;= <span class="number">40</span> || (<span class="number">1LL</span> &lt;&lt; (st[st[<span class="number">0</span>]] - st[st[<span class="number">0</span>] - <span class="number">1</span>])) &gt; (<span class="number">0x7fffff7f</span> - sum[st[<span class="number">0</span>] - <span class="number">1</span>])/ sum[st[<span class="number">0</span>]])</span><br><span class="line">                &#123;</span><br><span class="line">                    sum[st[<span class="number">0</span>] - <span class="number">1</span>] = <span class="number">0x7fffff7f</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    sum[st[<span class="number">0</span>] - <span class="number">1</span>] += (<span class="number">1LL</span> &lt;&lt; (st[st[<span class="number">0</span>]] - st[st[<span class="number">0</span>] - <span class="number">1</span>])) * sum[st[<span class="number">0</span>]];</span><br><span class="line">                &#125;</span><br><span class="line">                --st[<span class="number">0</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(sum[st[<span class="number">0</span>]] &lt; <span class="number">0x7fffff7f</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                sum2[st[<span class="number">0</span>]] = (sum2[st[<span class="number">0</span>] - <span class="number">1</span>] + sum[st[<span class="number">0</span>]]) % mo;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                sum2[st[<span class="number">0</span>]] = ans_sum[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 末尾标记</span></span><br><span class="line">        st[st[<span class="number">0</span>] + <span class="number">1</span>] = r + <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// l 区间右侧的块</span></span><br><span class="line">        <span class="type">int</span> pos = <span class="built_in">upper_bound</span>(st + <span class="number">1</span>,st + st[<span class="number">0</span>] + <span class="number">2</span>,l) - st;</span><br><span class="line">        <span class="comment">// 单独处理左侧答案</span></span><br><span class="line">        (ans[querys[i].id] = ((sum2[st[<span class="number">0</span>]] - sum2[pos - <span class="number">1</span>]) * <span class="number">2</span> + ((ans_sum[st[pos] - <span class="number">1</span>] - ans_sum[l - <span class="number">1</span>]) * inv[l]) % mo ) % mo+ mo) %= mo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">writeln</span>(ans[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>P4216 [SCOI2015] 情报传递 题解</title>
    <url>/2023/10/04/P4216%20%5BSCOI2015%5D%20%E6%83%85%E6%8A%A5%E4%BC%A0%E9%80%92%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p4216-scoi2015-情报传递-题解">P4216 [SCOI2015] 情报传递
题解</h1>
<p>来一篇常数不大的<a
href="https://www.luogu.com.cn/record/list?pid=P4216&amp;orderBy=1&amp;status=&amp;page=1">最优解</a>题解。</p>
<h2 id="link">Link</h2>
<p><a href="https://www.luogu.com.cn/problem/P4216">洛谷题目</a>。</p>
<h2 id="solution">Solution</h2>
<p>对于每个询问，第一问是基础的树上问题，公式放在下面，不在赘述。</p>
<p><span class="math display">\[\operatorname{dis}\left(u,v\right) =
dep_{u} + dep_{v} - 2 \times dep_{\operatorname{lca}\left(u,v\right)} +
1\]</span></p>
<p>对于第二问，首先我们可以转化一下题意：题目求某条链上危险程度
<strong>大于</strong> <span class="math inline">\(C\)</span>
的节点数，而一个节点的危险程度又<strong>只与开始时间和查询时间有关</strong>，对于每个询问，查询时间是一定的，因此对于第
<span class="math inline">\(i\)</span> 个询问，我们查询的就是 <span
class="math inline">\(X_{i} \rArr Y_{i}\)</span>
这条链上开始搜集情报时间在 <span class="math inline">\(i -
C_{i}\)</span> 之前的节点数。</p>
<p>每次清空重新查询复杂度是 <span class="math inline">\(\Omicron
\left(n^{2} \log^{2}n\right)\)</span> 的。</p>
<p>考虑离线，由于只查询在 <span class="math inline">\(i - C_{i}\)</span>
之前的点，因此我们可以将查询按照 <span class="math inline">\(i -
C_{i}\)</span> 排序。查询时我们先加入满足开始搜集情报时间在 <span
class="math inline">\(i - C_{i}\)</span> 之前的新点。</p>
<p>利用树链剖分，我们可以把 <span class="math inline">\(X_{i} \rArr
Y_{i}\)</span> 的路径拆分成若干 dfs
序连续的短链，我们可以利用树状数组查询这些短链上符合要求的点数。</p>
<p>时间复杂度 <span class="math inline">\(\Omicron \left( n \log^2{n}
\right)\)</span>，树状数组常数小，跑的飞快。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 200001</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> to,nxt;</span><br><span class="line">&#125;edge[max_n];</span><br><span class="line"><span class="type">int</span> head[max_n],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].to = v;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,q,root;</span><br><span class="line"><span class="type">int</span> fa[max_n],siz[max_n],dfn[max_n],rev[max_n],dep[max_n],son[max_n],top[max_n],timer;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dep[u] = dep[fa[u]] + <span class="number">1</span>;</span><br><span class="line">    siz[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = head[u];i;i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = edge[i].to;</span><br><span class="line">        <span class="built_in">dfs1</span>(v);</span><br><span class="line">        siz[u] += siz[v];</span><br><span class="line">        <span class="keyword">if</span>(siz[v] &gt; siz[son[u]])</span><br><span class="line">        &#123;</span><br><span class="line">            son[u] = v;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[u] = ++timer;</span><br><span class="line">    rev[timer] = u;</span><br><span class="line">    top[u] = t;</span><br><span class="line">    <span class="keyword">if</span>(son[u])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">dfs2</span>(son[u],t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = head[u];i;i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = edge[i].to;</span><br><span class="line">        <span class="keyword">if</span>(v == son[u])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs2</span>(v,v);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans[max_n];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Query</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> u,v,lim,id,ans,cnt;</span><br><span class="line">&#125;ques[max_n];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Change</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> id,tim;</span><br><span class="line">&#125;changes[max_n];</span><br><span class="line"><span class="type">int</span> tree[max_n];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (-x) &amp; x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;x &lt;= n;x += <span class="built_in">lowbit</span>(x))</span><br><span class="line">    &#123;</span><br><span class="line">        tree[x]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;x;x -= <span class="built_in">lowbit</span>(x))</span><br><span class="line">    &#123;</span><br><span class="line">        res += tree[x];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(r) - <span class="built_in">query</span>(l - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(fa[i]);</span><br><span class="line">        <span class="keyword">if</span>(fa[i])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">add</span>(fa[i],i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            root = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">dfs1</span>(root);</span><br><span class="line">    <span class="built_in">dfs2</span>(root,root);</span><br><span class="line">    <span class="built_in">read</span>(q);</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,u,v,lim,op;i &lt;= q;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(op);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(u);</span><br><span class="line">            changes[i - cnt].id = u;</span><br><span class="line">            changes[i - cnt].tim = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ++cnt;</span><br><span class="line">            <span class="built_in">read</span>(u),<span class="built_in">read</span>(v),<span class="built_in">read</span>(lim);</span><br><span class="line">            ques[cnt].u = u;</span><br><span class="line">            ques[cnt].v = v;</span><br><span class="line">            ques[cnt].lim = lim;</span><br><span class="line">            ques[cnt].id = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(ques + <span class="number">1</span>,ques + cnt + <span class="number">1</span>,[](Query q1,Query q2)&#123;<span class="built_in">return</span> (q1.id - q1.lim) &lt; (q2.id - q2.lim);&#125;);;</span><br><span class="line">    <span class="type">int</span> now = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(now &lt;= q - cnt &amp;&amp; changes[now].tim &lt; (ques[i].id - ques[i].lim))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">update</span>(dfn[changes[now].id]);</span><br><span class="line">            ++now;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> u = ques[i].u,v = ques[i].v;</span><br><span class="line">        ques[i].cnt = dep[u] + dep[v];</span><br><span class="line">        <span class="keyword">while</span>(top[u] != top[v])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(dep[top[u]] &lt; dep[top[v]])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">swap</span>(u,v);</span><br><span class="line">            &#125;</span><br><span class="line">            ques[i].ans += <span class="built_in">query</span>(dfn[top[u]],dfn[u]);</span><br><span class="line">            u = fa[top[u]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dep[u] &lt; dep[v])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">swap</span>(u,v);</span><br><span class="line">        &#125;</span><br><span class="line">        ques[i].ans += <span class="built_in">query</span>(dfn[v],dfn[u]);</span><br><span class="line">        ques[i].cnt -= <span class="number">2</span> * dep[v] - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(ques + <span class="number">1</span>,ques + cnt + <span class="number">1</span>,[](Query q1,Query q2)&#123;<span class="keyword">return</span> q1.id &lt; q2.id;&#125;);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= cnt;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">writesp</span>(ques[i].cnt),<span class="built_in">writeln</span>(ques[i].ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>P5769 [JSOI2016]飞机调度 题解</title>
    <url>/2023/10/04/P5769%20%5BJSOI2016%5D%E9%A3%9E%E6%9C%BA%E8%B0%83%E5%BA%A6%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p5769-jsoi2016飞机调度-题解">P5769 [JSOI2016]飞机调度 题解</h1>
<h2 id="link">Link</h2>
<p><a href="https://www.luogu.com.cn/problem/P5769">P5769
[JSOI2016]飞机调度</a></p>
<h2 id="solution">Solution</h2>
<p>很好的一道题，主要难点在于建图和问题转化。</p>
<p>首先说建图：思路是如果第 <span class="math inline">\(i\)</span>
条航线 <strong>能衔接</strong> 第 <span class="math inline">\(j\)</span>
条航线，就在 <span class="math inline">\(i,j\)</span>
之间建边。这里，能衔接指的是第 <span class="math inline">\(i\)</span>
条航线到达终点的时间加上在终点维护的时间在第 <span
class="math inline">\(j\)</span> 条航线的起飞时间之前。</p>
<p>读入的时候初始化最短路：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(len[i][j]);</span><br><span class="line">        <span class="keyword">if</span> (i != j)</span><br><span class="line">        &#123;</span><br><span class="line">            mp[i][j] = len[i][j] + wit[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            mp[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了判断是否能够衔接，我们预处理出两点之间的最小时间，数据范围不大，直接套全员最短路。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            mp[i][j] = <span class="built_in">min</span>(mp[i][j], mp[i][k] + mp[k][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建边的部分代码：需要将每条航线拆成两个点，开始时初始化，<span
class="math inline">\(SS\)</span> 连向每条航线，每条航线连向 <span
class="math inline">\(TT\)</span>。满足有源汇网络流的格式。</p>
<ul>
<li>源点和汇点加边。</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">read</span>(lines[i].u), <span class="built_in">read</span>(lines[i].v), <span class="built_in">read</span>(lines[i].tim);</span><br><span class="line">    <span class="built_in">add</span>(SS, i);</span><br><span class="line">    <span class="built_in">add</span>(i + m, TT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>航线之间满足条件的可以加边，注意到达的点需要加 <span
class="math inline">\(m\)</span>。</p>
<ul>
<li>航线之间加边</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 左侧依次为: </span></span><br><span class="line"><span class="comment">         * 航线 i 起飞时间 </span></span><br><span class="line"><span class="comment">         * 航线 i 路上时间 </span></span><br><span class="line"><span class="comment">         * 航线 i 维护时间 </span></span><br><span class="line"><span class="comment">         * 航线 i 终点到航线 j 起点最短时间</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (lines[i].tim + len[lines[i].u][lines[i].v] + wit[lines[i].v] + mp[lines[i].v][lines[j].u] &lt;= lines[j].tim)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">add</span>(i, j + m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以发现，这样建出的图一定是一个<strong>有向无环图</strong>。我们只需要找到这张图的最小路径覆盖即可。</p>
<p>用网络流求解即可，不会的同学可以看一下<a
href="https://www.luogu.com.cn/problem/P2764">这道题</a>。</p>
<p>完整代码见下:</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_m 3000201</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 5020</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> to, nxt, val;</span><br><span class="line">&#125; edge[max_m];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">LINE</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> u, v, tim;</span><br><span class="line">&#125; lines[max_n];</span><br><span class="line"><span class="type">int</span> head[max_n], tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].to = v;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    edge[tot].val = <span class="number">1</span>;</span><br><span class="line">    head[u] = tot;</span><br><span class="line"></span><br><span class="line">    edge[++tot].to = u;</span><br><span class="line">    edge[tot].nxt = head[v];</span><br><span class="line">    edge[tot].val = <span class="number">0</span>;</span><br><span class="line">    head[v] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> wit[max_n];</span><br><span class="line"><span class="type">int</span> len[max_n][max_n], mp[max_n][max_n];</span><br><span class="line"><span class="type">int</span> SS, TT;</span><br><span class="line"><span class="type">int</span> now[max_n], dep[max_n];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dep, <span class="number">0x3f</span>, (TT + <span class="number">2</span>) * (<span class="built_in">sizeof</span>(<span class="type">int</span>)));</span><br><span class="line">    <span class="built_in">memcpy</span>(now, head, (TT + <span class="number">2</span>) * <span class="built_in">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; que;</span><br><span class="line">    que.<span class="built_in">push</span>(SS);</span><br><span class="line">    dep[SS] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!que.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = que.<span class="built_in">front</span>();</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = edge[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].to;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].val &amp;&amp; dep[v] &gt;= INT_MAX / <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                dep[v] = dep[u] + <span class="number">1</span>;</span><br><span class="line">                que.<span class="built_in">push</span>(v);</span><br><span class="line">                <span class="keyword">if</span>(v == TT)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> sum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == TT || sum == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> flow = <span class="number">0</span>, k;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = now[u]; i; i = edge[i].nxt)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = edge[i].to;</span><br><span class="line">        now[u] = i;</span><br><span class="line">        <span class="keyword">if</span> (edge[i].val &amp;&amp; dep[v] == dep[u] + <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="built_in">dfs</span>(v, <span class="built_in">min</span>(sum, edge[i].val));</span><br><span class="line">            <span class="keyword">if</span> (k)</span><br><span class="line">            &#123;</span><br><span class="line">                edge[i].val -= k;</span><br><span class="line">                edge[i ^ <span class="number">1</span>].val += k;</span><br><span class="line">                flow += k;</span><br><span class="line">                sum -= k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _clang_</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">    SS = (m &lt;&lt; <span class="number">1</span>) + <span class="number">2</span>, TT = (m &lt;&lt; <span class="number">2</span>) + <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(wit[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(len[i][j]);</span><br><span class="line">            <span class="keyword">if</span> (i != j)</span><br><span class="line">            &#123;</span><br><span class="line">                mp[i][j] = len[i][j] + wit[j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                mp[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                mp[i][j] = <span class="built_in">min</span>(mp[i][j], mp[i][k] + mp[k][j]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(lines[i].u), <span class="built_in">read</span>(lines[i].v), <span class="built_in">read</span>(lines[i].tim);</span><br><span class="line">        <span class="built_in">add</span>(SS, i);</span><br><span class="line">        <span class="built_in">add</span>(i + m, TT);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == j)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (lines[i].tim + len[lines[i].u][lines[i].v] + wit[lines[i].v] + mp[lines[i].v][lines[j].u] &lt;= lines[j].tim)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">add</span>(i, j + m);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> max_flow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">bfs</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        max_flow += <span class="built_in">dfs</span>(SS, <span class="number">0x7fffffffffff</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">writeln</span>(m - max_flow);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="end">End</h2>
<p><a
href="https://www.luogu.com.cn/record/107790449">提交记录，最优解第一页</a></p>
<p>第一次写黑题题解。</p>
<p><a href="https://badges.toozhao.com/stats/01GXQJC7SS17NZHN7Q1FYHQ9BZ"
title="Get your own page views count badge on badges.toozhao.com"><img
src="https://badges.toozhao.com/badges/01GXQJC7SS17NZHN7Q1FYHQ9BZ/green.svg"
alt="Page Views Count" /></a></p>
<hr />
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>P7624 [AHOI2021初中组] 地铁 题解</title>
    <url>/2023/10/04/P7624%20%5BAHOI2021%E5%88%9D%E4%B8%AD%E7%BB%84%5D%20%E5%9C%B0%E9%93%81%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p7624-ahoi2021初中组-地铁-题解">P7624 [AHOI2021初中组] 地铁
题解</h1>
<h2 id="题目链接">题目链接</h2>
<p><a href="https://www.luogu.com.cn/problem/P7624">传送门</a></p>
<h2 id="题目描述">题目描述</h2>
<p><span class="math inline">\(B\)</span>
市的地铁历史悠久，小雪和小可可乘坐的 <span
class="math inline">\(X\)</span> 形路线，上面分布着 <span
class="math inline">\(n\)</span>
个车站，<strong>相邻两个车站之间的铁路长度为正整数</strong>。现在小雪进行了一些观察，得到了
<span class="math inline">\(m\)</span> 条信息，第 <span
class="math inline">\(i\)</span> 条信息是如下形式之一：</p>
<ol type="1">
<li>环上顺时针由 <span class="math inline">\(S_i\)</span> 到 <span
class="math inline">\(T_i\)</span> 的一段距离不小于一个给定的值 <span
class="math inline">\(L_i\)</span>（<span
class="math inline">\(S_i\)</span> 和 <span
class="math inline">\(T_i\)</span> 是两个车站）；</li>
<li>环上顺时针由 <span class="math inline">\(S_i\)</span> 到 <span
class="math inline">\(T_i\)</span> 的一段距离不大于一个给定的值 <span
class="math inline">\(L_i\)</span>。</li>
</ol>
<p>小雪想要你计算最后 <span class="math inline">\(X\)</span>
线地铁的总长度有多少种不同的合法取值。</p>
<h2 id="题意简述">题意简述</h2>
<p>给定一个环，和一些约束条件。第 <span class="math inline">\(i\)</span>
条约束条件表示从点 <span class="math inline">\(a\)</span> 到点 <span
class="math inline">\(b\)</span>
的<strong>顺时针</strong>距离不大于（或不小于）<span
class="math inline">\(L_{i}\)</span>。求环的总长度有多少种可能。</p>
<hr />
<h2 id="题目分析">题目分析</h2>
<p>根据题目中信息，可以列出 <span class="math inline">\(m\)</span>
个不等关系，容易想到<strong>差分约束</strong>算法</p>
<p>由于题目中给出的限制都是顺时针的，我们可以把环砍成链，然后用 <span
class="math inline">\(dis\)</span> 数组储存这条链上从点 <span
class="math inline">\(1\)</span> 到点 <span
class="math inline">\(n\)</span>
之间的距离。我们需要求解环长，不妨设环长为 <span
class="math inline">\(sum\)</span>，根据题意我们可以先列出如下关系：</p>
<ul>
<li><p><span class="math inline">\(dis_1 = 0\)</span></p></li>
<li><p><span class="math inline">\(dis_{i+1} \ge dis_{i} +1\)</span>
转化为我们需要的形式（小于等于） $ { dis_{i} - dis_{i+1 } }$</p></li>
<li><p>关于总长度还有一个限制 <span class="math inline">\(sum \ge
dis_{n} +1\)</span>，依旧转化为小于等于形式：$ {dis_n sum-1}$</p>
<p>接下来分析题目中的输入信息，输入信息分为两类，分别进行讨论，每一类仍分为两种情况：</p></li>
</ul>
<ol type="1">
<li>对于 <span class="math inline">\(type = 1\)</span>，若有 <span
class="math inline">\(S &lt; T\)</span>，则有限制条件 <span
class="math inline">\({ dis_{S} - dis_{T} \le -L}\)</span>，若 <span
class="math inline">\(S &gt; T\)</span>，则有限制条件 $ {dis_S - dis_T
sum - L}$。</li>
<li>对于 <span class="math inline">\(type = 2\)</span>，若有 <span
class="math inline">\(S &lt; T\)</span>，则有限制条件 $ {dis_T - dis_S
L}$，若 <span class="math inline">\(S &gt; T\)</span>，则有限制条件
<span class="math inline">\({dis_S - dis_T \le L - sum}\)</span>。</li>
</ol>
<p>由以上限制条件，我们即可获得 <span class="math inline">\(sum\)</span>
的下界 <span class="math inline">\(l\)</span> 和上界 <span
class="math inline">\(r\)</span>，分析单调性可知可以使用二分计算，并应该对
<span class="math inline">\(sum\)</span> 前的系数正负进行讨论。</p>
<p>下面给出代码。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//author yuhang-ren</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 510</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> inf = <span class="number">2.65e11</span>;</span><br><span class="line"><span class="type">signed</span> n, m;</span><br><span class="line"><span class="type">int</span> dis[max_n], sum;</span><br><span class="line"><span class="comment">// 以下为读入输出优化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  p = <span class="number">0</span>;</span><br><span class="line">  <span class="type">signed</span> k = <span class="number">1</span>;</span><br><span class="line">  <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">  <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          k = <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      c = <span class="built_in">getchar</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">      p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">      c = <span class="built_in">getchar</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  p *= k;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">signed</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  p = <span class="number">0</span>;</span><br><span class="line">  <span class="type">signed</span> k = <span class="number">1</span>;</span><br><span class="line">  <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">  <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          k = <span class="number">-1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      c = <span class="built_in">getchar</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">  &#123;</span><br><span class="line">      p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">      c = <span class="built_in">getchar</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  p *= k;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">      x = -x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_sp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">write_</span>(x);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">write_</span>(x);</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以上为读入输出优化</span></span><br><span class="line"><span class="comment">// 以下为差分约束所用图论部分</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">signed</span> u, v, w, k;</span><br><span class="line">&#125; edges[max_n * <span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> tot, pre[max_n];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">signed</span> u, <span class="type">signed</span> v,<span class="type">signed</span> w, <span class="type">signed</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  edges[++tot] = &#123;v, u, w, k&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 以上为差分约束所用图论部分</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">checker</span><span class="params">(<span class="type">int</span> mid)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// ?printf(&quot;%lld\n&quot;, mid);</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">  &#123;</span><br><span class="line">      dis[i] = (<span class="type">int</span>)<span class="number">1e15</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  dis[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= tot; j++)</span><br><span class="line">      &#123;</span><br><span class="line">          edge e = edges[j];</span><br><span class="line">          <span class="type">int</span> u = e.u, v = e.v, w = e.w, k = e.k;</span><br><span class="line">          <span class="keyword">if</span> (dis[v] &gt; dis[u] + k * mid + w)</span><br><span class="line">          &#123;</span><br><span class="line">              dis[v] = dis[u] + k * mid + w;</span><br><span class="line">              pre[v] = j;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= tot; i++)</span><br><span class="line">  &#123;</span><br><span class="line">      edge e = edges[i];</span><br><span class="line">      <span class="type">int</span> u = e.u, v = e.v, w = e.w, k = e.k;</span><br><span class="line">      <span class="keyword">if</span> (dis[v] &gt; dis[u] + k * mid + w)</span><br><span class="line">      &#123;</span><br><span class="line">          <span class="type">int</span> head = u;</span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">          &#123;</span><br><span class="line">              head = edges[pre[head]].u;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="type">int</span> mid_k = edges[pre[head]].k;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> (<span class="type">int</span> v_ = edges[pre[head]].u; v_ != head; v_ = edges[pre[v_]].u)</span><br><span class="line">          &#123;</span><br><span class="line">              mid_k += edges[pre[v_]].k; <span class="comment">// 合并统计系数</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> (<span class="type">int</span>)(mid_k &gt; <span class="number">0</span>) * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 没有符合条件返回0</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 二分求解上下界的函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution_r</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="type">int</span> mid = (l + r + <span class="number">1</span>) / <span class="number">2</span>; <span class="comment">// 向上取整</span></span><br><span class="line">      <span class="type">int</span> mid_k = <span class="built_in">checker</span>(mid);</span><br><span class="line">      <span class="keyword">if</span> (mid_k == <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          l = mid;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (mid_k == <span class="number">1</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          l = mid + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">          r = mid - <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">solution_l</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="type">int</span> mid = (l + r) / <span class="number">2</span>; <span class="comment">// 与solution_r不同</span></span><br><span class="line">      <span class="type">int</span> mid_k = <span class="built_in">checker</span>(mid);</span><br><span class="line">      <span class="keyword">if</span> (mid_k == <span class="number">0</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          r = mid; <span class="comment">// 与solution_r不同</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (mid_k == <span class="number">1</span>)</span><br><span class="line">      &#123;</span><br><span class="line">          l = mid + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">          r = mid - <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">read</span>(n), <span class="built_in">read</span>(m);</span><br><span class="line">  <span class="comment">// 这个循环用来满足条件 dis[i+1] &gt;= dis[i] + 1 --&gt; dis[i]-dis[i+1] &lt;= -1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">signed</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="built_in">add</span>(i, i + <span class="number">1</span>, <span class="number">-1</span>, <span class="number">0</span>); <span class="comment">// 加边，这里第四个参数表示的是该限制下总长度的系数正负</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 另外一个限制  sum &gt;= dis[n]+1</span></span><br><span class="line">  <span class="built_in">add</span>(n, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="comment">// 插入全部限制条件</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="type">signed</span> op, s, t;</span><br><span class="line">      <span class="type">int</span> l; <span class="comment">// op表示限制类型,s、t是两个车站,l为限制长度。</span></span><br><span class="line">      <span class="built_in">read</span>(op), <span class="built_in">read</span>(s), <span class="built_in">read</span>(t), <span class="built_in">read</span>(l);</span><br><span class="line">      <span class="keyword">if</span> (op == <span class="number">1</span>) <span class="comment">// 限制长度为最短长度</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span> (s &lt; t) <span class="comment">// dis[t]-dis[s] &gt;= l &lt;---&gt; dis[s]-dis[t] &lt;= -l</span></span><br><span class="line">          &#123;</span><br><span class="line">              <span class="built_in">add</span>(s, t, -l, <span class="number">0</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="comment">// dis[s]-dis[t] &lt;= c-l;  画个图或许就理解了？</span></span><br><span class="line">          &#123;</span><br><span class="line">              <span class="built_in">add</span>(s, t, -l, <span class="number">1</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">          <span class="keyword">if</span> (s &lt; t) <span class="comment">// dis[t] - dis[s] &lt;= l</span></span><br><span class="line">          &#123;</span><br><span class="line">              <span class="built_in">add</span>(t, s, l, <span class="number">0</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">else</span> <span class="comment">// dis[t] - dis[s] &lt;= l-c</span></span><br><span class="line">          &#123;</span><br><span class="line">              <span class="built_in">add</span>(t, s, l, <span class="number">-1</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> r = <span class="built_in">solution_r</span>(<span class="number">0</span>, inf);</span><br><span class="line">  <span class="keyword">if</span> (r &gt;= inf - <span class="number">1000</span>)</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="built_in">writeln</span>(<span class="number">-1</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> l = <span class="built_in">solution_l</span>(<span class="number">0</span>, inf);</span><br><span class="line">  <span class="built_in">writeln</span>(r - l + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>P8924 题解</title>
    <url>/2023/10/04/P8924%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="洛谷-p8924-题解">洛谷 P8924 题解</h1>
<h2 id="题目描述">题目描述</h2>
<p>给你一个函数，画出它的函数图像（<code>*</code>
表示经过该点，<code>.</code> 表示不经过该点），大小为 <span
class="math inline">\(n\times m\)</span>，其中 <span
class="math inline">\(x\)</span> 的范围是 <span
class="math inline">\([0,n-1]\)</span>，<span
class="math inline">\(f(x)\)</span> 的范围是 <span
class="math inline">\([0,m-1]\)</span>。</p>
<hr />
<h2 id="题目分析">题目分析</h2>
<p>题目比较简单，我们看到数据范围，直接选择暴力枚举。</p>
<p>首先开一个二维字符数组 <span class="math inline">\(maps\)</span>
记录数据。记得初始化为 <code>.</code>。（这里手动初始化，也可以选择使用
<code>memset</code>。）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;<span class="number">500</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j&lt;<span class="number">500</span>;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        maps[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后处理输入，将输入的系数保存供后续使用。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;=k;i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之后循环遍历 <span class="math inline">\(x\)</span> 和 <span
class="math inline">\(k\)</span>，计算每一个 <span
class="math inline">\(x\)</span>
对应的函数值。由于函数值可能很大，这里需要加一个特判，避免数组爆炸。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> sum;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; n; x++)</span><br><span class="line">&#123;</span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += nums[i] * <span class="built_in">pow</span>(x, i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (sum &lt; m)</span><br><span class="line">    &#123;</span><br><span class="line">        maps[x][sum] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最终我们可以愉快的输出，记得纵坐标是倒序的哦。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; maps[j][i];</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="完整-ac-代码如下">完整 AC 代码如下</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 510</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">char</span> maps[max_n][max_n];</span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line"><span class="type">int</span> nums[max_n];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">500</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            maps[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= k; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> sum;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt; n; x++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= k; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum += nums[i] * <span class="built_in">pow</span>(x, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; m)</span><br><span class="line">        &#123;</span><br><span class="line">            maps[x][sum] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; maps[j][i];</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>P9033「KDOI-04」XOR Sum 题解</title>
    <url>/2023/10/04/P9033%E3%80%8CKDOI-04%E3%80%8DXOR%20Sum%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p9033kdoi-04xor-sum-题解">P9033「KDOI-04」XOR Sum 题解</h1>
<h2 id="题目链接">题目链接</h2>
<p><a href="https://www.luogu.com.cn/problem/P9033">传送门</a></p>
<h2 id="题意简述">题意简述</h2>
<p>构造一个长度为 <span class="math inline">\(n\)</span>，值域为 <span
class="math inline">\([0,m]\)</span> 的异或和为 <span
class="math inline">\(k\)</span> 的序列，如果不存在则输出 <span
class="math inline">\(-1\)</span>。</p>
<h2 id="题目分析">题目分析</h2>
<p>首先很容易想到，当 <span class="math inline">\(k \le m\)</span>
的时候，我们仅需要输出一个 <span class="math inline">\(k\)</span>
剩下的位置全部填 <span class="math inline">\(0\)</span> 即可。</p>
<p>而当 <span class="math inline">\(k &gt; m\)</span>
时，我们至少需要两个数，因此在此时判断 <span
class="math inline">\(n\)</span> 是否等于 <span
class="math inline">\(1\)</span>，若不等于 <span
class="math inline">\(1\)</span>，根据异或不进位原理，我们还需判断 <span
class="math inline">\(k\)</span> 和 <span
class="math inline">\(m\)</span> 的二进制位数关系。设 <span
class="math inline">\(l_k,l_m\)</span> 分别为 <span
class="math inline">\(k,m\)</span> 的二进制位数。</p>
<ul>
<li>若 <span class="math inline">\(l_m &lt; l_k\)</span> 则无解。</li>
<li>反之，我们可以让一个数是 <span
class="math inline">\(2^{l_k}\)</span>，此时再构造出 <span
class="math inline">\(k - 2^{l_k}\)</span> 即可，可以证明 <span
class="math inline">\(k - 2^{l_k} \le m\)</span> 因此只需两个数 <span
class="math inline">\(2^{l_k},k-2^{l_k}\)</span>
即可，剩余部位补零。</li>
</ul>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//author: yuhang-ren</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x/<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T,n,m,k;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">if</span> _clang_</span></span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">        <span class="built_in">freopen</span>(<span class="string">&quot;1.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span> </span></span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> t = <span class="number">1</span>;t&lt;=T;t++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(n),<span class="built_in">read</span>(k),<span class="built_in">read</span>(m);</span><br><span class="line">        <span class="keyword">if</span>(k &lt;= m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">writesp</span>(k);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">writesp</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> l_k = <span class="number">0</span>,l_m = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> k_ = k;<span class="comment">//k后面还需要用到，所以用k_代替k进行运算。</span></span><br><span class="line">            <span class="keyword">for</span>(;k_;k_&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                l_k++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(;m;m&gt;&gt;=<span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                l_m++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(n == <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">writeln</span>(<span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l_k &gt; l_m)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">writeln</span>(<span class="number">-1</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">writesp</span>((<span class="number">1</span>&lt;&lt;(l_k<span class="number">-1</span>)));</span><br><span class="line">            <span class="built_in">writesp</span>((k - (<span class="number">1</span>&lt;&lt;(l_k<span class="number">-1</span>))));</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>;i&lt;=n;i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">writesp</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>TEST</title>
    <url>/2023/10/04/TEST/</url>
    <content><![CDATA[<h1 id="test">TEST</h1>
<p>测试题解，勿动。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>P9504 『MGOI』Simple Round I | C. 魔法禁林 题解</title>
    <url>/2023/10/04/P9504%20%E3%80%8EMGOI%E3%80%8FSimple%20Round%20I%20_%20C.%20%E9%AD%94%E6%B3%95%E7%A6%81%E6%9E%97%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p9504-mgoisimple-round-i-c.-魔法禁林-题解">P9504 『MGOI』Simple
Round I | C. 魔法禁林 题解</h1>
<p>赛时常数大，没过，赛后就被讨论区大佬薄纱。</p>
<p><strong>Warning：这篇题解运用了拆点的思路，该思路常用于网络流，用在这题有点小题大作。如果实力不是很强并且只是想学习这题的普通最短路或
dp 可以看其他题解。</strong></p>
<h2 id="solution">Solution</h2>
<p>逆向考虑，从 <span class="math inline">\(t\)</span>
出发逐渐累加生命值和魔力值。</p>
<p>根据题目，我们可以把一个点拆成 <span
class="math inline">\(102\)</span> 个点，点 <span
class="math inline">\(u_{i}\)</span> 表示从 <span
class="math inline">\(t\)</span> 到达 <span
class="math inline">\(u\)</span> 时累加了 <span
class="math inline">\(i\)</span> <strong>魔力值</strong>，魔力值大于
<span class="math inline">\(100\)</span> 的都归到点 <span
class="math inline">\(u_{101}\)</span>
上，因为这些点剩余路程都不需要多累加生命值，没有差别。那么原来的连边就变为了
<span class="math inline">\(\forall i \in [0,100],u_{i} \to v_{i +
1},v_{i} \to u_{i + 1}\)</span>。</p>
<p>于是这个东西顺利转化为一个有向无环图（DAG），原因是每次行走魔力值都增加，不可能回到原点。在
DAG 上跑 Dijkstra 或者拓扑排序都可以，赛事写了 Dijkstra
并因为常数大被卡了，因此建议写拓扑排序。</p>
<p>Dijkstra 复杂度 <span
class="math inline">\(O(m\log\left(m\right))\)</span></p>
<p>代码有一些卡常的细节。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 2040001</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> min(AA,BB) ((AA&lt;BB)?(AA):(BB))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> id(AA,BB) ((AA - 1) * 102 + BB + 1)</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,s,t,ans;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> to,nxt,val;</span><br><span class="line">&#125;edge[max_n * <span class="number">8</span>];</span><br><span class="line"><span class="type">int</span> head[max_n],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++tot].to = v;</span><br><span class="line">    edge[tot].nxt = head[u];</span><br><span class="line">    edge[tot].val = w;</span><br><span class="line">    head[u] = tot;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; que;</span><br><span class="line"><span class="keyword">namespace</span> check_pp</span><br><span class="line">&#123;</span><br><span class="line">    vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt; edge[<span class="number">20003</span>];</span><br><span class="line">    <span class="type">int</span> dis[<span class="number">20003</span>], vis[<span class="number">20003</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">jk</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            dis[i] = <span class="number">9999999</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        que.<span class="built_in">push</span>(&#123;<span class="number">0</span>, t&#125;);</span><br><span class="line">        dis[t] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!que.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> u = que.<span class="built_in">top</span>().second;</span><br><span class="line">            que.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(vis[u])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            vis[u] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge[u].<span class="built_in">size</span>(); ++i)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">int</span> v = edge[u][i].first, w = edge[u][i].second;</span><br><span class="line">                <span class="keyword">if</span> (dis[v] &gt; dis[u] + w)</span><br><span class="line">                &#123;</span><br><span class="line">                    dis[v] = dis[u] + w;</span><br><span class="line">                    &#123;</span><br><span class="line">                        que.<span class="built_in">push</span>(&#123;dis[v], v&#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dis[max_n], vis[max_n];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dijkstra</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">register</span> <span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">id</span>(n,<span class="number">101</span>); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        dis[i] = (<span class="number">1LL</span> &lt;&lt; <span class="number">20</span>) - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    que.<span class="built_in">push</span>(&#123;<span class="number">0</span>, <span class="built_in">id</span>(t,<span class="number">0</span>)&#125;);</span><br><span class="line">    dis[<span class="built_in">id</span>(t,<span class="number">0</span>)] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">register</span> <span class="type">int</span> u;</span><br><span class="line">    <span class="keyword">while</span> (!que.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        u = que.<span class="built_in">top</span>().second;</span><br><span class="line">        que.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span> (vis[u])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vis[u] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">register</span> <span class="type">int</span> i = head[u]; i; i = edge[i].nxt)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].to, w = edge[i].val;</span><br><span class="line">            <span class="keyword">if</span>((v - <span class="number">1</span>) % <span class="number">102</span> &lt;= (u - <span class="number">1</span>) % <span class="number">102</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (dis[v] &gt; dis[u] + w)</span><br><span class="line">            &#123;</span><br><span class="line">                dis[v] = dis[u] + w;</span><br><span class="line">                que.<span class="built_in">push</span>(&#123;dis[v], v&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Line</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> u,v,w;</span><br><span class="line">&#125;Lines[<span class="number">41010</span>];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n),<span class="built_in">read</span>(m),<span class="built_in">read</span>(s),<span class="built_in">read</span>(t);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>,u,v,w;i &lt;= m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(u),<span class="built_in">read</span>(v),<span class="built_in">read</span>(w);</span><br><span class="line">        Lines[i] = &#123;u,v,w&#125;;</span><br><span class="line">        check_pp::edge[u].<span class="built_in">push_back</span>(&#123;v,<span class="number">1</span>&#125;);</span><br><span class="line">        check_pp::edge[v].<span class="built_in">push_back</span>(&#123;u,<span class="number">1</span>&#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    check_pp::<span class="built_in">jk</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= m;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = Lines[i].u,v = Lines[i].v,w = Lines[i].w;</span><br><span class="line">        <span class="keyword">if</span>(check_pp::dis[u] &gt; <span class="number">110</span> || check_pp::dis[v] &gt; <span class="number">110</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>;j &lt;= <span class="number">100</span>;j++) <span class="comment">// 到 u 的时候魔力值为 j</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">add</span>(<span class="built_in">id</span>(u,j),<span class="built_in">id</span>(v,j + <span class="number">1</span>),w / (j + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>;j &lt;= <span class="number">101</span>;j++)<span class="comment">// 到 u 的时候魔力值为 j</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">add</span>(<span class="built_in">id</span>(v,j - <span class="number">1</span>),<span class="built_in">id</span>(u,j),w / j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ans = <span class="number">999999999</span>;</span><br><span class="line">    <span class="built_in">dijkstra</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= n;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans,dis[<span class="built_in">id</span>(i,<span class="number">101</span>)]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">101</span>;++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ans = <span class="built_in">min</span>(ans,dis[<span class="built_in">id</span>(s,i)]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">writeln</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>P9538 「AWOI Round 2 A」最大和 题解</title>
    <url>/2023/10/04/P9538%20%E3%80%8CAWOI%20Round%202%20A%E3%80%8D%E6%9C%80%E5%A4%A7%E5%92%8C%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="p9538-awoi-round-2-a最大和-题解">P9538 「AWOI Round 2 A」最大和
题解</h1>
<h2 id="solution">Solution</h2>
<p>很简单的一道贪心题，由于是从低位向高位操作，后面的操作必然不会影响前面的操作，分类讨论一下。</p>
<ul>
<li><p>当前位为 <span class="math inline">\(0\)</span>，需要减 <span
class="math inline">\(1\)</span>，该位为 <span
class="math inline">\(9\)</span>，前一位减 <span
class="math inline">\(1\)</span>。</p></li>
<li><p>当前为 <span class="math inline">\(1 \sim 8\)</span>，直接加
<span class="math inline">\(1\)</span>。</p></li>
<li><p>当前为 <span class="math inline">\(9\)</span>，不操作。</p></li>
</ul>
<p>注意在操作时 <span class="math inline">\(n\)</span>
的位数可能发生变化。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T,n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solution</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">writeln</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n % <span class="number">10</span> == <span class="number">9</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans += <span class="number">9</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n % <span class="number">10</span> == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            n--;</span><br><span class="line">            ans += <span class="number">9</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            n++;</span><br><span class="line">            ans += n % <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">writeln</span>(ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">solution</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>[ABC301D] Bitmask 题解</title>
    <url>/2023/10/04/%5BABC301D%5D%20Bitmask%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="abc301d-bitmask-题解">[ABC301D] Bitmask 题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/AT_abc301_d">Luogu</a></p>
<p><a
href="https://atcoder.jp/contests/abc301/tasks/abc301_d">AtCoder</a></p>
<h2 id="description">Description</h2>
<p>给你一个包含 <code>?</code> 的 01 串，将每个 <code>?</code> 替换为
<code>0</code> 或 <code>1</code>。找到对应的二进制数小于 <span
class="math inline">\(n\)</span> 的最大值或判断无解。</p>
<h2 id="solution">Solution</h2>
<p>首先将所有 <code>?</code> 视为 <code>0</code>，此时计算出的值若大于
<span class="math inline">\(n\)</span>
则无解，否则从高位向低位枚举，判断是否能换为 <code>1</code>。根据倍增
LCA 和贪心的思想，此时一定可得到最优解策略。理由：若某高位能切换为
<code>1</code>，后面还有某低位在不考虑该高位时能切换为
<code>1</code>，分两种情况讨论。</p>
<ul>
<li>若可同时替换为 <code>1</code>，第一个一定选。</li>
<li>如只能选择一个，则选第一个对答案贡献更大。</li>
</ul>
<p>综上：策略为从高位开始，能换为 <code>1</code> 则换为
<code>1</code>。注意开 <code>long long</code>。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> s[<span class="number">70</span>];</span><br><span class="line"><span class="type">int</span> now_cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _clang_</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> l = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= l; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        now_cnt &lt;&lt;= <span class="number">1LL</span>;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            now_cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (now_cnt &gt; n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">writeln</span>(<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= l; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] == <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (now_cnt + (<span class="number">1LL</span> &lt;&lt; (l - i)) &lt;= n)</span><br><span class="line">            &#123;</span><br><span class="line">                now_cnt += (<span class="number">1LL</span> &lt;&lt; (l - i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">writeln</span>(now_cnt);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>[ABC301C] AtCoder Cards 题解</title>
    <url>/2023/10/04/%5BABC301C%5D%20AtCoder%20Cards%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="abc301c-atcoder-cards-题解">[ABC301C] AtCoder Cards 题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/AT_abc301_c">Luogu</a></p>
<p><a
href="https://atcoder.jp/contests/abc301/tasks/abc301_c">AtCoder</a></p>
<h2 id="description">Description</h2>
<p>给定两个等长的字符串，只包含小写字母和 <code>@</code> 字符。</p>
<p>判断能否通过重新排列某一字符串并将 <code>@</code> 换为任意
<code>a</code>，<code>t</code>，<code>c</code>，<code>o</code>，<code>d</code>，<code>e</code>，<code>r</code>
中的字符使得两个字符串变得完全相同。</p>
<h2 id="solution">Solution</h2>
<p>统计两个字符串中各个字符的数量，若数量不等的不是
<code>a</code>，<code>t</code>，<code>c</code>，<code>o</code>，<code>d</code>，<code>e</code>，<code>r</code>
中的字符则不能完成。否则判断 <code>@</code>
字符是否够用即可，若数量少于差异数量则无法完成。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 210101</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> s1[max_n], s2[max_n];</span><br><span class="line"><span class="type">int</span> cnt1[max_n], cnt2[max_n];</span><br><span class="line">map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _clang_</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s1 + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s2 + <span class="number">1</span>);</span><br><span class="line">    mp[<span class="string">&#x27;a&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">    mp[<span class="string">&#x27;t&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">    mp[<span class="string">&#x27;c&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">    mp[<span class="string">&#x27;o&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">    mp[<span class="string">&#x27;d&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">    mp[<span class="string">&#x27;e&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">    mp[<span class="string">&#x27;r&#x27;</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="built_in">strlen</span>(s1 + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (s1[i] == <span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ++cnt1[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s2[i] == <span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ++cnt1[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        cnt1[s2[i]]--;</span><br><span class="line">        cnt1[s1[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c = <span class="string">&#x27;a&#x27;</span>; c &lt;= <span class="string">&#x27;z&#x27;</span>; c++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (mp[c])</span><br><span class="line">        &#123;</span><br><span class="line">            cnt1[<span class="number">0</span>] -= <span class="built_in">abs</span>(cnt1[c]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cnt1[c] != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cnt1[<span class="number">0</span>] &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>[ARC133E] Cyclic Medians 题解</title>
    <url>/2023/10/04/%5BARC133E%5D%20Cyclic%20Medians%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="arc133e-cyclic-medians-题解">[ARC133E] Cyclic Medians 题解</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/AT_arc133_e">Luogu</a></p>
<p><a
href="https://atcoder.jp/contests/arc133/tasks/arc133_e">AtCoder</a></p>
<h2 id="description">Description</h2>
<p>给你四个整数 <span class="math inline">\(N,M,V,A\)</span>。</p>
<p>选择两个序列 <span class="math inline">\(x\)</span> 和 <span
class="math inline">\(y\)</span>，其中 <span
class="math inline">\(x\)</span> 的长度为 <span
class="math inline">\(n\)</span>，<span class="math inline">\(y\)</span>
的长度为 <span class="math inline">\(m\)</span>。两个序列中数的值域均为
<span class="math inline">\([1,V]\)</span>。</p>
<p>定义变量 <span class="math inline">\(a\)</span>，初始值为 <span
class="math inline">\(A\)</span>。</p>
<p>依次对所有 <span class="math inline">\(i \in [0, N \times M -
1]\)</span>，将 <span class="math inline">\(a\)</span> 替换为 <span
class="math inline">\(x_{\left ( i \bmod n \right ) + 1},a,x_{\left ( i
\bmod m \right ) + 1}\)</span> 的 <strong>中位数</strong>。</p>
<p>你需要求出对于所有满足条件的序列 <span
class="math inline">\(x,y\)</span>，经过 <span class="math inline">\(N
\times M\)</span> 次操作之后 <span class="math inline">\(a\)</span>
的值之和，答案对 <span class="math inline">\(998\,244\,353\)</span>
取模。</p>
<p>数据范围：</p>
<p><span class="math inline">\(1 \leq N,M \leq 2 \times 10 ^
{5}\)</span>，<span class="math inline">\(1 \leq A \leq 2 \times
10^{5}\)</span>。</p>
<h2 id="solution">Solution</h2>
<p>在讲解这道题目之前先<strong>引理：</strong>给定一个长度为 <span
class="math inline">\(n\)</span> 的序列 <span
class="math inline">\(A\)</span>，设最大值为 <span
class="math inline">\(mx\)</span>，序列中元素和为 <span
class="math inline">\(sum\)</span>。则有 <span
class="math inline">\(\sum_{i = 0}^{mx - 1}{\sum_{j = 1}^{n} \left
[A_{j} &gt; i \right]} = sum\)</span>。</p>
<p>引理的证明可以自己画一个该序列的柱状图，用一条线从小到大扫描。</p>
<p>接下来考虑这道题，显然对于所有序列，最终的 <span
class="math inline">\(a \in
[1,V]\)</span>。因此我们可以按照上面的方法枚举来统计所有最后的 <span
class="math inline">\(a\)</span> 的和。</p>
<p>设最终大于 <span class="math inline">\(k\)</span> 的 <span
class="math inline">\(a\)</span> 的数量为 <span
class="math inline">\(cnt_{k}\)</span>，则答案为 $ <em>{i = 0}^{V - 1}
cnt</em>{i}$。</p>
<p>接下来我们只需要考虑如何求出所有 <span
class="math inline">\(cnt_{i}\)</span> 即可。可以对两个序列进行 0-1
重写（当然，我们并不需要真的重写这个数组，只是用于思考），若当前计算的为
<span class="math inline">\(cnt_k\)</span>，大于等于 <span
class="math inline">\(k\)</span> 的标为 <span
class="math inline">\(1\)</span>，否则标为 <span
class="math inline">\(0\)</span>。</p>
<p>可以发现只要出现了一次 <span class="math inline">\(\left
(k,0,0\right)\)</span> 或 <span
class="math inline">\(\left(k,1,1\right)\)</span>，最终的答案就与 <span
class="math inline">\(k\)</span> 无关。且由于相反性，<span
class="math inline">\(k = k_{1}\)</span>
时最后一次操作时两个序列所选的为 <span class="math inline">\(\left
(0,0\right)\)</span> 和 <span class="math inline">\(k = V -
k_{1}\)</span> 时最后一次操作时两个序列所选的为 <span
class="math inline">\(\left (1,1\right)\)</span>
的个数是相同的。因此计算出序列数除二即为这部分的答案。</p>
<p>接下来考虑没有出现从两个序列中选取相同数的情况，此时最终答案全为
<span class="math inline">\(A\)</span>（即初始值），也即该部分对 <span
class="math inline">\(k &lt; A\)</span> 的 <span
class="math inline">\(cnt_{k}\)</span> 有贡献。</p>
<p>手模一下在两个序列中取数的过程，令 <span class="math inline">\(G =
\gcd(n,m)\)</span>，则对于 <span class="math inline">\(x_{(i + t_{1}
\cdot G)}\)</span>（<span class="math inline">\(1 \leq i &lt; G,0\leq
t_{1} &lt; \frac{n}{G}\)</span>）只会取到 <span
class="math inline">\(y_{(i + t_{2} \cdot G)}\)</span>（<span
class="math inline">\(1 \leq i &lt; G,0\leq t_{2} &lt;
\frac{m}{G}\)</span>）。因此，满足的条件为 <span
class="math inline">\(\forall i \in [1,G)\)</span>：</p>
<ul>
<li><p><span class="math inline">\(x_{i} = x_{(i + t_{1} \cdot
G)}\)</span>（<span class="math inline">\(0\leq t_{1} &lt;
\frac{n}{G}\)</span>）。</p></li>
<li><p><span class="math inline">\(y_{i} = y_{(i + t_{2} \cdot
G)}\)</span>（<span class="math inline">\(0\leq t_{2} &lt;
\frac{m}{G}\)</span>）。</p></li>
<li><p><span class="math inline">\(x_{i} \neq y_{i}\)</span>。</p></li>
</ul>
<p>分别计算 <span class="math inline">\(x_{i}\)</span> 转换后为 <span
class="math inline">\(0\)</span> 和转换后为 <span
class="math inline">\(1\)</span> 的数量即可。方案数为 $k^{}(V - k)^{} +
k^{}(V - k)^{}
$。利用快速幂求解即可。除了这些数量，剩余的就是出现相同的数量，注意根据上面的推导需要除二，本题有取模，要求
<span class="math inline">\(2\)</span> 的逆元。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mo 998244353</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n, m, V, A, ans, gcd__;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (; b; b &gt;&gt;= <span class="number">1</span>, a = (a * a) % mo)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res = (res * a) % mo;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _clang_</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="built_in">read</span>(n), <span class="built_in">read</span>(m), <span class="built_in">read</span>(V), <span class="built_in">read</span>(A);</span><br><span class="line">    ans = <span class="built_in">ksm</span>(V, n + m), gcd__ = __gcd(n, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; V; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> now = <span class="built_in">ksm</span>((<span class="built_in">ksm</span>(i, n / gcd__) * <span class="built_in">ksm</span>(V - i, m / gcd__) % mo + <span class="built_in">ksm</span>(V - i, n / gcd__) * <span class="built_in">ksm</span>(i, m / gcd__) % mo) % mo, gcd__);</span><br><span class="line">        <span class="keyword">if</span> (A &gt; i) <span class="comment">// 满足初始值 &gt; i 的条件才有贡献。</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans = (ans + now) % mo;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> all = <span class="built_in">ksm</span>(V, n + m);</span><br><span class="line">        now = (all - now + mo) % mo;</span><br><span class="line">        ans = (ans + now * <span class="built_in">ksm</span>(<span class="number">2</span>, mo - <span class="number">2</span>) % mo) % mo;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">writeln</span>(ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>[ARC160B] Triple Pair 题解</title>
    <url>/2023/10/04/%5BARC160B%5D%20Triple%20Pair%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="arc160b-triple-pair">[ARC160B] Triple Pair</h1>
<h2 id="link">Link</h2>
<p><a href="https://www.luogu.com.cn/problem/AT_arc160_b">Luogu</a></p>
<p><a
href="https://atcoder.jp/contests/arc160/tasks/arc160_b">AtCoder</a></p>
<h2 id="description">Description</h2>
<p><strong>本题单测试点多组测试数据。</strong></p>
<p>每次给出一个正整数 <span class="math inline">\(n\)</span>。求满足
<span class="math inline">\(x,y,z \in N_{+}\)</span> 且 <span
class="math inline">\(xy,xz,yz \leq n\)</span> 有序三元组 <span
class="math inline">\((x,y,z)\)</span> 的个数，并输出答案对 <span
class="math inline">\(998244353\)</span> 取模的结果。</p>
<h2 id="solution">Solution</h2>
<p>Update 2023.8.1：更正了两处笔误。</p>
<p>根据乘法的性质，若 <span class="math inline">\(x \times y \leq
n\)</span>，则 <span class="math inline">\(x,y\)</span> 中至多有一个大于
<span class="math inline">\(\sqrt{n}\)</span>。设满足条件的三元组为
<span class="math inline">\(\left (x,y,z \right )\)</span>。令 <span
class="math inline">\(x \leq y \leq z\)</span>。根据上述结论可以发现
<span class="math inline">\(1 \leq y \leq
\sqrt{n}\)</span>。我们可以枚举 <span
class="math inline">\(y\)</span>，根据题目限制得出 <span
class="math inline">\(1 \leq x \leq y \leq \left \lfloor \frac{n}{y}
\right \rfloor\)</span>。</p>
<p>根据乘法原理，据此得到的答案数量为 <span class="math inline">\(y
\times y \times \left ( \left \lfloor \frac{n}{y} \right \rfloor -
y\right )\)</span>。注意此时的 <span
class="math inline">\(x,y,z\)</span> 是有大小关系的。</p>
<p>考虑如何据此计算正确答案，进行分类讨论：</p>
<ul>
<li><p><span class="math inline">\(x = y = z\)</span>
时，排列只有一种。</p></li>
<li><p>有两个相同时，排列有三种。</p></li>
<li><p>全都不同时，排列有六种。</p></li>
</ul>
<p>回到上面 <span class="math inline">\(x,y,z\)</span>
的范围：三者相同只有一种情况，<span class="math inline">\(x = y\)</span>
有 <span class="math inline">\(\left \lfloor \frac{n}{y} \right \rfloor
- y\)</span> 种情况 <span class="math inline">\(y = z\)</span> 有 <span
class="math inline">\(y\)</span> 种情况，剩余为三者不同。最终答案为即为
<span class="math inline">\(\sum_{y = 1}^{\sqrt{n}}\left (6 \times \left
( \left \lfloor \frac{n}{y} \right \rfloor - y \right ) \times \left (y
- 1 \right )+ 3 \times \left (\left \lfloor \frac{n}{y} \right \rfloor -
1 \right ) + 1 \right )\)</span>。</p>
<p>时间复杂度为 <span class="math inline">\(O(\sum{
\sqrt{n}})\)</span>。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mo 998244353</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T, n;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(n);</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="built_in">sqrt</span>(n); i++) <span class="comment">// 枚举中间的数</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> mx = n / i; <span class="comment">// 最大的数</span></span><br><span class="line">            ans = (ans + (mx - i) * (i - <span class="number">1</span>) * <span class="number">6</span> % mo + <span class="number">3</span> * (mx - <span class="number">1</span>) + <span class="number">1</span>) % mo;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">writeln</span>(ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>[ARC161A] Make M 题解</title>
    <url>/2023/10/04/%5BARC161A%5D%20Make%20M%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="arc161a-make-m-题解">[ARC161A] Make M 题解</h1>
<h2 id="link">Link</h2>
<p><a href="https://www.luogu.com.cn/problem/AT_arc161_a">洛谷</a></p>
<p><a
href="https://atcoder.jp/contests/arc161/tasks/arc161_a">AtCoder</a></p>
<h2 id="description">Description</h2>
<p>给定长度为 <span class="math inline">\(n\)</span> 的整数序列 <span
class="math inline">\(S\)</span>，其中 <span
class="math inline">\(n\)</span>
为奇数。问能否重新排列该序列，使得对于所有偶数下标 <span
class="math inline">\(i\)</span>，有 <span class="math inline">\(S_{i}
&gt; S_{i - 1}\)</span> 且 <span class="math inline">\(S_{i} &gt; S_{i +
1}\)</span>。</p>
<h2 id="solution">Solution</h2>
<p>根据题目，可以想到将最大的几个数从大到小放在下标为偶数的位置。剩余的数按照从大到小的顺序放在其他位置。</p>
<p>简单证明合理性：若有 <span class="math inline">\(i,j,x,y\)</span>
满足 <span class="math inline">\(S_{i} &gt; S_{j}\)</span>，<span
class="math inline">\(S_{x} &gt; S_{y}\)</span> 且 <span
class="math inline">\(S_{x},S_{y}\)</span> 均不在序列中前 <span
class="math inline">\(\lfloor \frac{n}{2} \rfloor\)</span> 大，<span
class="math inline">\(S_{i},S_{j}\)</span>
放在新数列中偶数下标位置，<span
class="math inline">\(S_{x},S_{y}\)</span>
放在新数列中奇数下标位置，若原来将 <span
class="math inline">\(S_{x}\)</span> 放在 <span
class="math inline">\(S_{j}\)</span> 旁满足条件，则 <span
class="math inline">\(S_{i} &gt; S_{j} &gt; S_{x} &gt;
S_{y}\)</span>。则交换后一定满足条件。</p>
<p>因此将序列排序之后按照如上规则制造结果序列，最后判断一次即可，时间复杂度
<span class="math inline">\(O(n \log n)\)</span>。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 200101</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> nums[max_n];</span><br><span class="line"><span class="type">int</span> ans[max_n];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _clang_</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(nums + <span class="number">1</span>, nums + n + <span class="number">1</span>);</span><br><span class="line">    <span class="type">int</span> mid = n / <span class="number">2</span> + <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ans[i] = nums[mid--];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ans[i] = nums[r--];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; i += <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ans[i] &lt;= ans[i - <span class="number">1</span>] || ans[i] &lt;= ans[i + <span class="number">1</span>])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;No&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>[ARC161B] Exactly Three Bits 题解</title>
    <url>/2023/10/04/%5BARC161B%5D%20Exactly%20Three%20Bits%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="arc161b-exactly-three-bits-题解">[ARC161B] Exactly Three Bits
题解</h1>
<h2 id="link">Link</h2>
<p><a href="https://www.luogu.com.cn/problem/AT_arc161_b">洛谷</a></p>
<p><a
href="https://atcoder.jp/contests/arc161/tasks/arc161_b">AtCoder</a></p>
<h2 id="description">Description</h2>
<p>找到不大于 <span class="math inline">\(n\)</span> 的最大正整数 <span
class="math inline">\(x\)</span> 满足 <span
class="math inline">\(x\)</span> 的二进制表示中恰好有 <span
class="math inline">\(3\)</span> 位为 <span
class="math inline">\(1\)</span>。</p>
<h2 id="solution">Solution</h2>
<p>进行分类讨论：</p>
<ul>
<li><p>当 <span class="math inline">\(n\)</span> 的二进制表示中有不少于
<span class="math inline">\(3\)</span> 位是 <span
class="math inline">\(1\)</span> 是直接选择前三个，剩下的填 <span
class="math inline">\(0\)</span>。</p></li>
<li><p>当 <span class="math inline">\(n\)</span> 的二进制表示有 <span
class="math inline">\(2\)</span> 位是 <span
class="math inline">\(1\)</span> 时，无法通过全取 <span
class="math inline">\(1\)</span> 满足条件，那么应该将第二个 <span
class="math inline">\(1\)</span> 变为 <span
class="math inline">\(0\)</span>，然后取后面的两个 <span
class="math inline">\(1\)</span>，可以这么做的条件是第二个 <span
class="math inline">\(1\)</span> 后面至少有两位。如不满足则须将第一个
<span class="math inline">\(1\)</span> 变为 <span
class="math inline">\(0\)</span>，在后面选连续三个 <span
class="math inline">\(1\)</span>，条件是后面至少有 <span
class="math inline">\(3\)</span> 位，仍不满足只能输出 <span
class="math inline">\(-1\)</span>。</p></li>
<li><p>当 <span class="math inline">\(n\)</span> 的二进制表示有 <span
class="math inline">\(1\)</span> 位是 <span
class="math inline">\(1\)</span> 时，无法通过全取 <span
class="math inline">\(1\)</span> 满足条件，则须将第一个 <span
class="math inline">\(1\)</span> 变为 <span
class="math inline">\(0\)</span>，在后面选连续三个 <span
class="math inline">\(1\)</span>，条件是后面至少有 <span
class="math inline">\(3\)</span> 位，仍不满足只能输出 <span
class="math inline">\(-1\)</span>。</p></li>
</ul>
<p><strong>注意位运算的手动 <code>1LL</code></strong>，我在这里 WA
了三次。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T, n;</span><br><span class="line"><span class="type">int</span> ans[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _clang_</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(n);</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>, p = <span class="number">0</span>, nd = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                nd++;</span><br><span class="line">            &#125;</span><br><span class="line">            ans[++cnt] = (n &amp; <span class="number">1</span>);</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>, tot = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (nd &gt;= <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = cnt; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                res &lt;&lt;= <span class="number">1LL</span>;</span><br><span class="line">                <span class="keyword">if</span> (ans[i] == <span class="number">1</span> &amp;&amp; tot &lt; <span class="number">3</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    res |= <span class="number">1LL</span>;</span><br><span class="line">                    tot++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">writeln</span>(res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> p[<span class="number">3</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">            <span class="type">int</span> ct = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = cnt; i; i--)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (ans[i] == <span class="number">1</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    p[++ct] = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ct == <span class="number">1</span> || p[<span class="number">2</span>] &lt;= <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (p[<span class="number">1</span>] &lt;= <span class="number">3</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">writeln</span>((<span class="number">1LL</span> &lt;&lt; (p[<span class="number">1</span>] - <span class="number">2</span>)) + (<span class="number">1LL</span> &lt;&lt; (p[<span class="number">1</span>] - <span class="number">3</span>)) + (<span class="number">1LL</span> &lt;&lt; (p[<span class="number">1</span>] - <span class="number">4</span>)));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">writeln</span>((<span class="number">1LL</span> &lt;&lt; (p[<span class="number">1</span>] - <span class="number">1</span>)) + (<span class="number">1LL</span> &lt;&lt; (p[<span class="number">2</span>] - <span class="number">2</span>)) + (<span class="number">1LL</span> &lt;&lt; (p[<span class="number">2</span>] - <span class="number">3</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>[CF1582C] Grandma Capa Knits a Scarf 题解</title>
    <url>/2023/10/04/%5BCF1582C%5D%20Grandma%20Capa%20Knits%20a%20Scarf%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="grandma-capa-knits-a-scarf-题解">Grandma Capa Knits a Scarf
题解</h1>
<h2 id="link">Link</h2>
<p><a href="https://www.luogu.com.cn/problem/CF1582C">洛谷</a></p>
<p><a
href="https://codeforces.com/problemset/problem/1582/C">Codeforces</a></p>
<h2 id="description">Description</h2>
<p>给一个由小写字母组成的字符串 <span
class="math inline">\(s\)</span>，选择一个字母，删去这个字符串中任意个这个字母，使这个字符串变成回文的。</p>
<p>如果存在多个答案，输出删除的字母个数最少的答案。</p>
<h2 id="solution">Solution</h2>
<p>发现字符只有<code>a</code>~<code>z</code>，数据范围非常小，可以暴力枚举删除的字符，记这个字符为
<span class="math inline">\(S\)</span>，记删除字符为 <span
class="math inline">\(S\)</span> 时需要删除的字符个数为 <span
class="math inline">\(res\)</span>，最终结果为 <span
class="math inline">\(ans\)</span>。</p>
<p>在确定删除的字符后，利用双指针扫描，找到需要删除的个数。设双指针为
<span class="math inline">\(l,r\)</span>。</p>
<ul>
<li><p>若 <span class="math inline">\(s_{l} =
s_{r}\)</span>，无需删除，<code>++l</code>，<code>--r</code>即可。</p></li>
<li><p>若 <span class="math inline">\(s_{l} \ne
s_{r}\)</span>，需要删除。</p>
<ul>
<li><p><span class="math inline">\(s_{l} = S\)</span>，删除 <span
class="math inline">\(s_{l}\)</span>，操作为
<code>++l</code>，<code>++res</code>。</p></li>
<li><p><span class="math inline">\(s_{r} = S\)</span>，删除 <span
class="math inline">\(s_{r}\)</span>，操作为
<code>--l</code>，<code>++res</code>。</p></li>
<li><p><span class="math inline">\(s_{l} \ne S \text{且} s_{r} \ne
S\)</span>，无法删除，记录 <span class="math inline">\(res =
INT\_MAX\)</span>，返回即可。</p></li>
</ul></li>
</ul>
<p>每次取 <span class="math inline">\(ans = \min
(ans,res)\)</span>，最终答案即为 <span
class="math inline">\(ans\)</span>。</p>
<p>小优化：<span class="math inline">\(ans = 1\)</span>
时可直接输出，无需继续枚举。证明：若答案为 <span
class="math inline">\(0\)</span>，则当 <span
class="math inline">\(S\)</span> 为任意字符时 <span
class="math inline">\(res\)</span> 都为 <span
class="math inline">\(0\)</span>，不可能出现 <span
class="math inline">\(1\)</span>。因此 <span class="math inline">\(ans =
1\)</span> 即为最优解。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> max_n 101000</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> T, n;</span><br><span class="line"><span class="type">char</span> s[max_n];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> _clang_</span></span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;1.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(n);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, s + <span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">998244353</span>; <span class="comment">// 随便写的，开的大于1e5就行</span></span><br><span class="line">        <span class="type">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">26</span>; i++) <span class="comment">// 枚举删除的字符</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">            l = <span class="number">1</span>, r = n;</span><br><span class="line">            <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (s[l] == s[r])</span><br><span class="line">                &#123;</span><br><span class="line">                    ++l, --r;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (s[l] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span> == i)</span><br><span class="line">                &#123;</span><br><span class="line">                    ++res;</span><br><span class="line">                    ++l;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (s[r] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span> == i)</span><br><span class="line">                &#123;</span><br><span class="line">                    ++res, --r;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    res = INT_MAX;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">min</span>(ans, res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">writeln</span>(ans &lt; <span class="number">998244353</span> ? ans : <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<p><a href="https://badges.toozhao.com/stats/01GXQDDFCB85TTEA1PQXXYPZQT"
title="Get your own page views count badge on badges.toozhao.com"><img
src="https://badges.toozhao.com/badges/01GXQDDFCB85TTEA1PQXXYPZQT/blue.svg"
alt="Page Views Count" /></a></p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>Codeforces</tag>
      </tags>
  </entry>
  <entry>
    <title>[ARC165A] Sum equals LCM 题解</title>
    <url>/2023/10/04/%5BARC165A%5D%20Sum%20equals%20LCM%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="arc165a-sum-equals-lcm">[ARC165A] Sum equals LCM</h1>
<h2 id="links">Links</h2>
<p><a href="https://www.luogu.com.cn/problem/AT_arc165_a">洛谷</a></p>
<p><a
href="https://www.luogu.com.cn/problem/AT_arc165_a">AtCoder</a></p>
<h2 id="description">Description</h2>
<p><strong>单测试点存在多组测试数据。</strong></p>
<p>给定整数 <span class="math inline">\(x\)</span>，判断是否有 <span
class="math inline">\(n\)</span>（<span class="math inline">\(n \geq
2\)</span>）个数的和为 <span
class="math inline">\(x\)</span>，最小公倍数也为 <span
class="math inline">\(x\)</span>。</p>
<p><span class="math inline">\(1 \leq T \leq 100\)</span>，<span
class="math inline">\(2 \leq x \leq 10^{9}\)</span>。</p>
<h2 id="solution">Solution</h2>
<p>首先我们考虑到 <span class="math inline">\(1\)</span>
对最大公因数不会造成贡献，因此，如果我们找到了 <span
class="math inline">\(p \leq n\)</span> 个数的和 <span
class="math inline">\(sum \leq x\)</span> 且最小公倍数 <span
class="math inline">\(\operatorname{LCM} = x\)</span>
时，我们可以通过补充 <span class="math inline">\(1\)</span>
来满足题目条件。</p>
<p>在 <span class="math inline">\(a,b \geq 2\)</span> 时，我们可以证明
<span class="math inline">\(a + b \leq a \times b\)</span>。</p>
<p><span class="math display">\[\texttt{当}\ a,b \geq 2\
\texttt{时显然}\ \frac{1}{a} + \frac{1}{b} \leq 1\]</span> <span
class="math display">\[\texttt{两边同时乘}\ a\times b\ \texttt{得}\
a+b\leq a\times b\]</span></p>
<p>于是我们只需要知道 <span class="math inline">\(x\)</span>
能否分解为<strong>不同因数</strong>的 <span
class="math inline">\(\operatorname{LCM}\)</span>
即可，也就是存在不同的质因数。</p>
<p>直接写一个复杂度 <span class="math inline">\(\sqrt n\)</span>
的分解质因数即可，复杂度 <span class="math inline">\(O(\sum
\sqrt{n})\)</span>。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>洛谷 P9577 Dead Cells 题解</title>
    <url>/2023/10/04/%E6%B4%9B%E8%B0%B7%20P9577%20Dead%20Cells%20%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="洛谷-p9577-dead-cells-题解">洛谷 P9577 Dead Cells 题解</h1>
<h2 id="solution">Solution</h2>
<p>这道题的主要难点在于对于 <span class="math inline">\(a &gt;
b\)</span> 的特判。</p>
<p>当 <span class="math inline">\(a &gt; b\)</span> 时，如果最后一次是乘
<span class="math inline">\(2\)</span>，答案就是 <span
class="math inline">\(1 \times 2 = 2\)</span>，否则答案是 <span
class="math inline">\(1\)</span>。</p>
<p>当 <span class="math inline">\(a &lt; b\)</span>
时，直接按照题目操作即可：</p>
<ul>
<li>当 <span class="math inline">\(i \equiv 0 \pmod a\)</span> 且 <span
class="math inline">\(i \equiv 0 \pmod b\)</span> 时，直接跳过。</li>
<li>否则，当 <span class="math inline">\(i \equiv 0 \pmod a\)</span>
时，<span class="math inline">\(ans \gets ans \times 2\)</span>。</li>
<li>否则，当 <span class="math inline">\(i \equiv 0 \pmod b\)</span>
时，<span class="math inline">\(ans \gets ans \times
\operatorname{inv}(2)\)</span>。其中 <span
class="math inline">\(\operatorname{inv}(2) =
499\,122\,177\)</span>。</li>
</ul>
<p>注意要经常对 <span class="math inline">\(998\,244\,353\)</span>
取模。</p>
<h2 id="codes">Codes</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inv2 499122177</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mo 998244353</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(<span class="type">int</span> &amp;p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            k = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = p * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    p *= k;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write_</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">        x = -x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">write_</span>(x / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writesp</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeln</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">write_</span>(x);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a,b,k;</span><br><span class="line"><span class="type">int</span> nums = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;b;b &gt;&gt;= <span class="number">1</span>,a = (a * a) % mo)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            res = res * a % mo;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(a),<span class="built_in">read</span>(b),<span class="built_in">read</span>(k);</span><br><span class="line">    <span class="keyword">if</span>(a &gt; b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">writeln</span>(((k % a) &lt; (k % b))?(<span class="number">2</span>):(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt;= k;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>((i % a == <span class="number">0</span>) &amp;&amp; (i % b == <span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i % a == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            nums = nums * <span class="number">2</span>;</span><br><span class="line">            nums %= mo;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i % b == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            nums = nums * inv2;</span><br><span class="line">            nums %= mo;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">writeln</span>(nums);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
</search>
