{"meta":{"version":1,"warehouse":"5.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/CF1767C题解.md","hash":"083f28f93ffb09dfc409a369ce4dd17f3946cccc","modified":1696305521131},{"_id":"source/_posts/test.md","hash":"5da4828a975d6951c1048c1f87fb9188ca14ee40","modified":1696403245383},{"_id":"source/about/index.md","hash":"25476f4bd4b7b36e41d91954b4ae5722b53cbe76","modified":1696405766654},{"_id":"source/categories/index.md","hash":"f7341d66ea03f920e15f4683ca6f0eafeed8d4c8","modified":1696405694409},{"_id":"source/tags/index.md","hash":"a16e367177bc211d1aa0bdc60d83128156d9757c","modified":1696405711334},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1696401984007},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"dae3faa04648aeb0fd91961843a15122dcc73299","modified":1696401986148},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"7fa5fce5ae11760a636213044d42be17a47fbc0e","modified":1696401986182},{"_id":"node_modules/hexo-theme-next/README.md","hash":"7dfee02792f98c73ff0da7e8efc9a7c55ef52fa0","modified":1696401984086},{"_id":"node_modules/hexo-theme-next/package.json","hash":"a491d64d3d9277ed438a76d6244f43b5b2322f1e","modified":1696401983863},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1696401984060},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1696401986220},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"9f791494afa263c3e31f14b8a5fa2996dfc834c0","modified":1696401986297},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1696401986305},{"_id":"node_modules/hexo-theme-next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1696401986320},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1696401986314},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1696401986327},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"44cd26479f503751329f6da2ed80cce1bbf18117","modified":1696401986515},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1696401986334},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1696401986602},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1696401986634},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1696401986681},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1696401986694},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1696401986700},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1696401986717},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"70de366e10ea584ba039d40d6b35ac97f93454ad","modified":1696401986730},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1696401986741},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1696401986735},{"_id":"node_modules/hexo-theme-next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1696401986749},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1696401986773},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1696401986756},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1696401986780},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1696401986801},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1696401986866},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"88ea50eeb9097ab4a87a44981a102d8594feb064","modified":1696401986872},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"4695c87d6b81b3a23d16ad6513d9eaa925f8d8ad","modified":1696401986877},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1696401983917},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1696401983940},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1696401986136},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1696401984110},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1696401984177},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1696401984717},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1696401984932},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1696401985108},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1696401984305},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1696401985215},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"ca3088a27b9890402ffb18c4b6c4bedaff8d575b","modified":1696401984027},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1696401983975},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"abda600685ee972e1f6b7a2dcc56f13e2daa6263","modified":1696401984954},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1696401985191},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"8ae85453051faa7ed3b332ee488ff5eea8ddaa08","modified":1696401984040},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"65e9112fb7eb26d2880db624554a99aca028140b","modified":1696401985100},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1696401983991},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1696401984398},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"6fca18ed4234cf54146c2b3b97b0a6a3606ab33d","modified":1696401984515},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1696401984751},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1696401984937},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1696401985261},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1696401984665},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1696401985248},{"_id":"node_modules/hexo-theme-next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1696401984128},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1696401984686},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1696401984477},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1696401985153},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1696401984914},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1696401982619},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1696401981770},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"447db39d17775b2bd18d8af9c9d65b7b8449f751","modified":1696401983088},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1696401982966},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1696401980187},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1696401983486},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1696401980297},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1696401980410},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1696401982497},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1696401982643},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1696401982786},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1696401982832},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1696401983025},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1696401983344},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1696401983376},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1696401983550},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1696401983812},{"_id":"node_modules/hexo-theme-next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1696401983828},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1696401982058},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1696401982176},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1696401983196},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1696401983271},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1696401983285},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"ead37e9167b682f1fa34b5401c3050e18c7ee4a3","modified":1696401983250},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"957241c28796ff352de7f4cffba7bb289b043586","modified":1696401983327},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1696401985267},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1696401977283},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1696401985273},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1696401985281},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1696401986121},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1696401986128},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1696401980064},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1696401980852},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1696401981105},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1696401981641},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1696401983113},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"745bd828205da7e5fbd3f860cc3697097630f5f3","modified":1696401983219},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1696401983414},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1696401983537},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"d775148c2bf20c028622af5609a788167352bf1e","modified":1696401983590},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1696401985293},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"83647a6207333b9609ba90b0946b3fa9548e6381","modified":1696401985377},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1696401985802},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1696401985853},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1696401984622},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1696401984633},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1696401984232},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1696401984642},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1696401984874},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1696401985208},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1696401984259},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1696401984884},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1696401984292},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1696401984921},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1696401985182},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1696401985222},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1696401985026},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1696401985052},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1696401984966},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1696401985083},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1696401985078},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1696401985089},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1696401984653},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1696401984150},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1696401985202},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1696401984785},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1696401984360},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1696401985229},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1696401984337},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1696401984464},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1696401984417},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1696401984540},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1696401984729},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1696401984775},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1696401985242},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1696401984199},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1696401984372},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1696401984552},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1696401984567},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1696401984675},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1696401984817},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1696401984905},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1696401984948},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1696401985236},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1696401984697},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1696401984741},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1696401984164},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1696401984805},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1696401984795},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1696401984487},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1696401984705},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1696401984279},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1696401984896},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1696401984761},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1696401984942},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1696401985254},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1696401981596},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1696401982571},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1696401982681},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"6853e5433e3eaa19ea43fa20b08d956ba4cec4ac","modified":1696401983575},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1696401983177},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"464db1e7182e5b9cdbd32e8b5368d5e683b1d9c7","modified":1696401983782},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1696401980583},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1696401981423},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1696401981685},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1696401981863},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1696401981928},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1696401982207},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1696401982696},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1696401982868},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1696401983602},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1696401983145},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1696401978426},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1696401982087},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1696401983508},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1696401983359},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1696401985571},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1696401985824},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1696401985838},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"48f4f277946a168d0db1ea02804e85c22ca2c7db","modified":1696401985876},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"c4fc4e862d09221265ab1466085f057be2ad2e4d","modified":1696401985466},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1696401979650},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1696401982428},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1696401980783},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1696401982535},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1696401983563},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1696401983005},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1696401982761},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1696401982985},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1696401980706},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1696401981898},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1696401981999},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1696401982384},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1696401982720},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1696401982905},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1696401983688},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1696401979202},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1696401982936},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1696401982142},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1696401982805},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1696401983066},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1696401983840},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1696401983390},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1696401985439},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1696401985616},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1696401985993},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1696401985715},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"1dbf2c339adcd27026c3a2ded32ee91ce08cea26","modified":1696401985832},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1696401985454},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1696401985531},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1696401985518},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1696401985742},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1696401985845},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1696401985864},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1696401986080},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1696401986102},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1696401985762},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1696401985308},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1696401985359},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1696401985342},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1696401985769},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1696401985388},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1696401985334},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1696401985371},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"26a0cba1eee5de45a45a5e14e17707f905390512","modified":1696401985354},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1696401985411},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1696401985425},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1696401985781},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1696401985321},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1696401985348},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"82cda756f5b7092df2eee6641b9786df71623bdb","modified":1696401985365},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"547c0b5cd5e7ea10d21863d13a6b16579a49396c","modified":1696401985394},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1696401985419},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1696401985775},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1696401985513},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1696401985526},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1696401985641},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1696401986006},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1696401986095},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1696401985678},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"56d5b7ff73f466c9ae54f7204ae899281295d749","modified":1696401985903},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"7369928305330c73ae0b3f063a681a8384d8fde4","modified":1696401985940},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1696401985945},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1696401985959},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"1191f1bfa5c43e54be8e5b3cc0d802984e161747","modified":1696401985966},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1696401985973},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1696401985980},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1696401985986},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1696401985557},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1696401985577},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1696401985683},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1696401985807},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1696401986108},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1696401986012},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1696401985698},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1696401985499},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1696401985592},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1696401985704},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"bbbc40b03cb299d2a6a568f329b2ce98e1cdc430","modified":1696401985813},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1696401986065},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1696401986069},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1696401985727},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1696401986000},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1696401986018},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1696401986026},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1696401986032},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1696401986041},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1696401986049},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1696401986054},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1696401986060},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1696401986075},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1696401985543},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1696401985563},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"138f78147bc6bd6005f329ada34dc79b7625542d","modified":1696401985735},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1696401985482},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1696401985598},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1696401985750},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1696401985789},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1696401985797},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1696401985818},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1696401985859},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1696401985869},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"33dd6ad015dde65fd46f34961655442e8e82b52e","modified":1696401986087},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1696401986115},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1696401985953},{"_id":"public/search.xml","hash":"da751d22e351d1f6c9f5cbe3a8a8f1427aba4380","modified":1696408560429},{"_id":"public/about/index.html","hash":"e7a24c2357bc5050ddd8dd2ab1f1051cd55f6bd1","modified":1696408560429},{"_id":"public/categories/index.html","hash":"b7cc0f6bd7912a32b6c18768614e8f6f1d16ace6","modified":1696408560429},{"_id":"public/tags/index.html","hash":"1c1f55579bad32ede51bc2dc3d7cff94f3cc277e","modified":1696408560429},{"_id":"public/2023/10/04/test/index.html","hash":"466fa8c1abdbf772b73316241d6edf4f3eb76baa","modified":1696408560429},{"_id":"public/archives/index.html","hash":"2a49c9aa4941d2f06121df28535e01f1bfba56b2","modified":1696408560429},{"_id":"public/archives/2023/index.html","hash":"52149863d2fecf28a3543d007305c906c6fe5968","modified":1696408560429},{"_id":"public/archives/2023/10/index.html","hash":"90361a48bc4c51cd9069531ed5497108925d61fd","modified":1696408560429},{"_id":"public/2023/10/03/CF1767C题解/index.html","hash":"7ba5a865d348f98e7f76d7d54119b4fb61abe4a3","modified":1696408560429},{"_id":"public/index.html","hash":"812cdb12ae4f48b271c22a45e287df7a16260c4d","modified":1696408560429},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1696408560429},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1696408560429},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1696408560429},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1696408560429},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1696408560429},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1696408560429},{"_id":"public/css/spoiler.css","hash":"32d47611e4ddd56edb22c6e76b0748af9e2a7abb","modified":1696408560429},{"_id":"public/js/spoiler.js","hash":"bbcbcbb9e77933929819ad65345955df6d22246a","modified":1696408560429},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1696408560429},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1696408560429},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1696408560429},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1696408560429},{"_id":"public/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1696408560429},{"_id":"public/js/next-boot.js","hash":"745bd828205da7e5fbd3f860cc3697097630f5f3","modified":1696408560429},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1696408560429},{"_id":"public/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1696408560429},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1696408560429},{"_id":"public/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1696408560429},{"_id":"public/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1696408560429},{"_id":"public/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1696408560429},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1696408560429},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1696408560429},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1696408560429},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1696408560429},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1696408560429},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1696408560429},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1696408560429},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1696408560429},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1696408560429},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1696408560429},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1696408560429},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1696408560429},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1696408560429},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1696408560429},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1696408560429},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1696408560429},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1696408560429},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1696408560429},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1696408560429},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1696408560429},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1696408560429},{"_id":"public/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1696408560429},{"_id":"public/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1696408560429},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1696408560429},{"_id":"public/js/utils.js","hash":"d775148c2bf20c028622af5609a788167352bf1e","modified":1696408560429},{"_id":"public/css/main.css","hash":"87e9c4cde824d4156bc25905eff2190dc70ed4e6","modified":1696408560429}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2023-10-04T07:43:17.000Z","type":"about","_content":"\n\n喜报：`// freopen`","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-10-04 15:43:17\ntype: \"about\"\n---\n\n\n喜报：`// freopen`","updated":"2023-10-04T07:49:26.654Z","path":"about/index.html","comments":1,"layout":"page","_id":"clnbhuuv10000bopt46y8evzz","content":"<p>喜报：<code>// freopen</code></p>\r\n<link rel=\"stylesheet\" href=\"/project/css/spoiler.css\" type=\"text/css\"><script src=\"/project/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<p>喜报：<code>// freopen</code></p>\r\n"},{"title":"categories","date":"2023-10-04T07:43:13.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-10-04 15:43:13\ntype: \"categories\"\n---\n","updated":"2023-10-04T07:48:14.409Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clnbhuuv60002bopth92k3ayr","content":"\r\n<link rel=\"stylesheet\" href=\"/project/css/spoiler.css\" type=\"text/css\"><script src=\"/project/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"\r\n"},{"title":"tags","date":"2023-10-04T07:43:15.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-10-04 15:43:15\ntype: \"tags\"\n---\n","updated":"2023-10-04T07:48:31.334Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clnbhuuv70003boptgosh5qs0","content":"\r\n<link rel=\"stylesheet\" href=\"/project/css/spoiler.css\" type=\"text/css\"><script src=\"/project/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"\r\n"}],"Post":[{"title":"CF1767C题解","date":"2023-10-03T03:56:56.000Z","mathjax":true,"_content":"\n# CF1767C Count Binary Strings 题解\n\n## Foreword\n\n感谢 [@樱雪喵](https://www.luogu.com.cn/user/234074)、[@swiftc](https://www.luogu.com.cn/user/183154) 两位大佬的耐心指导。\n\n## Links \n\n[洛谷](https://www.luogu.com.cn/problem/CF1767C)\n\n[Codeforces](https://codeforces.com/problemset/problem/1767/C)\n\n## Description\n\n有一个长度为 $n$ 的 01 串 $s$（下标从 $1$ 开始）和一些限制 $a_{i,j}(1 \\le i \\le j \\le n)$。\n\n$a_{i,j}$ 的含义如下：\n\n| $a_{i,j}=$ |                      含义                       |\n| :--------: | :---------------------------------------------: |\n|    $0$     |                    没有限制                     |\n|    $1$     | 对于所有的 $i \\le p \\le q \\le j$ 均有 $s_p=s_q$ |\n|    $2$     | 存在 $i \\le p \\le q \\le j$ 使得 $s_p \\neq s_q$  |\n\n求可能的 $s$ 的个数。**答案对 $998244353$ 取模。**\n\n\n对于 $100\\%$ 的数据，$2 \\le n \\le 100$，$0 \\le a_{i,j} \\le 2$。\n\n## Solution\n\n这种计数类问题大概率是组合数学或者 dp，然而这道题限制条件很多，组合数学大概是做不成了，那么考虑 dp。\n\n首先一个很显然的情况是如果 $a_{i,i} = 2$ 那么无解。接下来考虑对 $a_{i,j} = 1$ 的限制，我们把这些需要区间内全相同的合并成一个块，对块内每个位置的限制等价于对整个块的限制，使用并查集维护即可，注意每个块合并的时候都合并到最前面的位置。\n\n```cpp\nint fa[222];\nvoid init()\n{\n    for (int i = 1; i <= n; i++)\n        fa[i] = i;\n}\nint find(int u)\n{\n    if (fa[u] == u)\n        return fa[u];\n    else\n        return fa[u] = find(fa[u]);\n}\nvoid merge(int u, int v)\n{\n    if (find(u) == find(v))\n        return;\n    if (find(u) < find(v))\n        fa[find(v)] = find(u);\n    else\n        fa[find(u)] = find(v);\n}\n```\n主函数中：\n\n```cpp\ninit();\nfor (int i = 1; i <= n; i++)\n{\n    for (int j = i; j <= n; j++)\n    {\n        read(nums[i][j]);\n        if (nums[i][j] == 1)\n        {\n            for (int k = i + 1; k <= j; k++)\n            {\n                merge(i, k);\n            }\n        }\n    }\n}\n```\n\n之后，我们很容易想到，对于每个块 $p$，我们找到对于 $i \\in p$，$a_{i,j} = 2$ 这样的限制中最大的 $j$，只要满足这条限制，在前面的限制也就都满足了，求出 $mx_{i}$ 表示块 $i$ 之前最后一个能满足从 $mx_{i}$ 到 $i$ 与 $i$ 填的数全相同的块。\n\n\nDP 的思路有两种，一种是一维的，另一种是二维的。我开始写的一维，然而没有考虑到一些问题写挂了，尝试了二维通过之后又回到了一维。\n\n这里先从二维 DP 开始讲。\n\n考虑某个位置和前一位是否相同，有：\n\n$$\\begin{cases}\n dp_{i,j} = dp_{i - 1,j} & \\texttt{if } s_{i} = s_{i - 1}\n\\\\\ndp_{i,i} = \\sum_{j = mx_{i}}^{i - 1} dp_{i - 1,j} & \\texttt{if } s_{i} \\neq s_{i - 1}\n\\end{cases}$$\n\n即如果要求和前一位相同，不会有新的贡献，否则累加贡献。\n\n直接判断是否可行并转移即可。\n\n```cpp\ndp[1][1] = 1;\nfor (int i = 2; i <= n; i++)\n{\n    if (find(i) == i)\n    {\n        for (int j = 1; j < i; j++)\n        {\n            (dp[i][i] += dp[i - 1][j]) %= 998244353;\n        }\n    }\n    for (int j = mx[find(i)]; j < i; j++)\n    {\n        (dp[i][j] += dp[i - 1][j]) %= 998244353;\n    }\n}\n\nint res = 0;\nfor (int i = mmx; i <= n; i++)\n{\n    (res += dp[n][i]) %= 998244353;\n}\nwriteln(2 * res % 998244353);\n```\n\n接下来考虑一维 DP 怎么做。\n\n$$\\begin{cases}\n dp_{i,j} = dp_{i - 1,j} & \\texttt{if } s_{i} = s_{i - 1}\n\\\\\ndp_{i,i} = \\sum_{j = mx_{i}}^{i - 1} dp_{i - 1,j} & \\texttt{if } s_{i} \\neq s_{i - 1}\n\\end{cases}$$\n\n上面的方程实际上就是 相同的地方 复制了 前面第一个不同的地方 /kk\n\n定义 $k$ 为 $i$ 之前第一个不同的。有\n$$\ndp_{i,i} = \\sum_{k}\\sum_{j = mx_{i}}^{i - 1} dp_{k,j} \\ \\texttt{  if } s_{i} \\neq s_{i - 1}\n$$\n\n也就是我们每次从 $k$ 转移并且累加一下。\n\n注意到由于 $s_{k} \\neq s_{k - 1}$，我们之前计算 $dp_{k,j'}$ 的时候应该只更新了 $dp_{k,k}$。\n\n因此实际上我们得到的是 $dp_{i,i} = \\sum_{k}dp_{k,k} \\ \\texttt{ if } mx_{i} \\leq k \\leq i - 1$。\n\n优化掉第二维，有 $dp_{i} = \\sum_{k = mx_{i}}^{i - 1}dp_{k} $。\n\n**注意：这里有个问题，假设有按顺序 $A,B,C,D$ 四个块，如果限制 $B,C$ 不能相同，那么显然我们无法从 $A$ 到 $D$ 全部相同，因此我们 $mx$ 还要取一个前缀 $\\operatorname{max}$**。\n\n\n由于我们合并块的编号并不连续，这不利于我们 dp，因此将块的编号离散化一下即可。\n```cpp\n// 由于 fa 更新的时候不是 1,2,3,4 这样，而是每块第一个的编号\n// 我们把 fa[i] 离散化，pos 表示是第几个，rea 表示第 i 个的实际 fa\nfor (int i = 1; i <= n; i++)\n{\n    if (find(i) == i)\n    {\n        rea[++rea[0]] = i;\n        pos[i] = rea[0];\n    }\n}\n```\n之后枚举上一个不同的点转移就可以了，方程：\n\n```cpp\nfor (int i = 1; i <= n; i++)\n{\n    if (find(i) != i)\n    {\n        continue;\n    }\n    ++cnt;\n    // 现在只有无限制和要求出现不同了\n    // 我们可以枚举上一个不同的位置\n\n    for (int j = pos[mx[rea[cnt]]]; j < cnt; j++)\n    {\n        (dp[cnt] += dp[j]) %= 998244353;\n    }\n}\n```\n\n把所有 $0$，$1$ 交换不会违反限制，因此答案要乘 $2$。\n\n\n## Codes\n\n一维完整代码。\n\n```cpp\n// Problem: C. Count Binary Strings\n// Contest: Educational Codeforces Round 140 (Rated for Div. 2)\n// URL: https://codeforces.com/contest/1767/problem/C\n// Memory Limit: 512 MB\n// Time Limit: 2000 ms\n//\n// Powered by CP Editor (https://cpeditor.org)\n\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint n, nums[200][200];\nint fa[222];\nvoid init()\n{\n    for (int i = 1; i <= n; i++)\n    {\n        fa[i] = i;\n    }\n}\nint find(int u)\n{\n    if (fa[u] == u)\n    {\n        return fa[u];\n    }\n    else\n    {\n        return fa[u] = find(fa[u]);\n    }\n}\nvoid merge(int u, int v)\n{\n    if (find(u) == find(v))\n    {\n        return;\n    }\n    if (find(u) < find(v))\n    {\n        fa[find(v)] = find(u);\n    }\n    else\n    {\n        fa[find(u)] = find(v);\n    }\n}\nint dp[222];\nint mx[222];\nint rea[222];\nint pos[222];\nsigned main()\n{\n    read(n);\n    init();\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = i; j <= n; j++)\n        {\n            read(nums[i][j]);\n            if (nums[i][j] == 1)\n            {\n                for (int k = i + 1; k <= j; k++)\n                {\n                    merge(i, k);\n                }\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        if (nums[i][i] == 2)\n        {\n            puts(\"0\");\n            return 0;\n        }\n    }\n    // 对于每一个需要找到最晚需要不同的，这样能满足前面的所有条件\n    for (int i = 1; i <= n; i++)\n    {\n        mx[i] = 0;\n    }\n    for (int i = 2; i <= n; i++)\n    {\n        for (int j = i - 1; j; j--)\n        {\n            if (nums[j][i] == 2)\n            {\n                if (find(i) == find(j))\n                {\n                    puts(\"0\");\n                    exit(0);\n                }\n                mx[find(i)] = max(mx[find(i)], find(j));\n                break;\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        mx[i] = max(mx[i], mx[i - 1]);\n    }\n\n    int cnt = 0;\n    dp[0] = 1;\n    for (int i = 1; i <= n; i++)\n    {\n        if (find(i) == i)\n        {\n            rea[++rea[0]] = i;\n            pos[i] = rea[0];\n        }\n    }\n\n    for (int i = 1; i <= n; i++)\n    {\n        if (find(i) != i)\n        {\n            continue;\n        }\n        ++cnt;\n        // 现在只有无限制和要求出现不同了\n        // 我们可以枚举上一个不同的位置\n        // 由于 fa 更新的时候不是 1,2,3,4 这样，而是每块第一个的编号\n        // 我们把 fa[i] 离散化，pos 表示是第几个，rea 表示第 i 个的实际 fa\n        for (int j = pos[mx[rea[cnt]]]; j < cnt; j++)\n        {\n            (dp[cnt] += dp[j]) %= 998244353;\n        }\n    }\n    //   cout << cnt << endl;\n    writeln(2 * dp[cnt] % 998244353);\n    return 0;\n}\n```","source":"_posts/CF1767C题解.md","raw":"---\ntitle: CF1767C题解\ndate: 2023-10-03 11:56:56\ntags:\nmathjax: true\n---\n\n# CF1767C Count Binary Strings 题解\n\n## Foreword\n\n感谢 [@樱雪喵](https://www.luogu.com.cn/user/234074)、[@swiftc](https://www.luogu.com.cn/user/183154) 两位大佬的耐心指导。\n\n## Links \n\n[洛谷](https://www.luogu.com.cn/problem/CF1767C)\n\n[Codeforces](https://codeforces.com/problemset/problem/1767/C)\n\n## Description\n\n有一个长度为 $n$ 的 01 串 $s$（下标从 $1$ 开始）和一些限制 $a_{i,j}(1 \\le i \\le j \\le n)$。\n\n$a_{i,j}$ 的含义如下：\n\n| $a_{i,j}=$ |                      含义                       |\n| :--------: | :---------------------------------------------: |\n|    $0$     |                    没有限制                     |\n|    $1$     | 对于所有的 $i \\le p \\le q \\le j$ 均有 $s_p=s_q$ |\n|    $2$     | 存在 $i \\le p \\le q \\le j$ 使得 $s_p \\neq s_q$  |\n\n求可能的 $s$ 的个数。**答案对 $998244353$ 取模。**\n\n\n对于 $100\\%$ 的数据，$2 \\le n \\le 100$，$0 \\le a_{i,j} \\le 2$。\n\n## Solution\n\n这种计数类问题大概率是组合数学或者 dp，然而这道题限制条件很多，组合数学大概是做不成了，那么考虑 dp。\n\n首先一个很显然的情况是如果 $a_{i,i} = 2$ 那么无解。接下来考虑对 $a_{i,j} = 1$ 的限制，我们把这些需要区间内全相同的合并成一个块，对块内每个位置的限制等价于对整个块的限制，使用并查集维护即可，注意每个块合并的时候都合并到最前面的位置。\n\n```cpp\nint fa[222];\nvoid init()\n{\n    for (int i = 1; i <= n; i++)\n        fa[i] = i;\n}\nint find(int u)\n{\n    if (fa[u] == u)\n        return fa[u];\n    else\n        return fa[u] = find(fa[u]);\n}\nvoid merge(int u, int v)\n{\n    if (find(u) == find(v))\n        return;\n    if (find(u) < find(v))\n        fa[find(v)] = find(u);\n    else\n        fa[find(u)] = find(v);\n}\n```\n主函数中：\n\n```cpp\ninit();\nfor (int i = 1; i <= n; i++)\n{\n    for (int j = i; j <= n; j++)\n    {\n        read(nums[i][j]);\n        if (nums[i][j] == 1)\n        {\n            for (int k = i + 1; k <= j; k++)\n            {\n                merge(i, k);\n            }\n        }\n    }\n}\n```\n\n之后，我们很容易想到，对于每个块 $p$，我们找到对于 $i \\in p$，$a_{i,j} = 2$ 这样的限制中最大的 $j$，只要满足这条限制，在前面的限制也就都满足了，求出 $mx_{i}$ 表示块 $i$ 之前最后一个能满足从 $mx_{i}$ 到 $i$ 与 $i$ 填的数全相同的块。\n\n\nDP 的思路有两种，一种是一维的，另一种是二维的。我开始写的一维，然而没有考虑到一些问题写挂了，尝试了二维通过之后又回到了一维。\n\n这里先从二维 DP 开始讲。\n\n考虑某个位置和前一位是否相同，有：\n\n$$\\begin{cases}\n dp_{i,j} = dp_{i - 1,j} & \\texttt{if } s_{i} = s_{i - 1}\n\\\\\ndp_{i,i} = \\sum_{j = mx_{i}}^{i - 1} dp_{i - 1,j} & \\texttt{if } s_{i} \\neq s_{i - 1}\n\\end{cases}$$\n\n即如果要求和前一位相同，不会有新的贡献，否则累加贡献。\n\n直接判断是否可行并转移即可。\n\n```cpp\ndp[1][1] = 1;\nfor (int i = 2; i <= n; i++)\n{\n    if (find(i) == i)\n    {\n        for (int j = 1; j < i; j++)\n        {\n            (dp[i][i] += dp[i - 1][j]) %= 998244353;\n        }\n    }\n    for (int j = mx[find(i)]; j < i; j++)\n    {\n        (dp[i][j] += dp[i - 1][j]) %= 998244353;\n    }\n}\n\nint res = 0;\nfor (int i = mmx; i <= n; i++)\n{\n    (res += dp[n][i]) %= 998244353;\n}\nwriteln(2 * res % 998244353);\n```\n\n接下来考虑一维 DP 怎么做。\n\n$$\\begin{cases}\n dp_{i,j} = dp_{i - 1,j} & \\texttt{if } s_{i} = s_{i - 1}\n\\\\\ndp_{i,i} = \\sum_{j = mx_{i}}^{i - 1} dp_{i - 1,j} & \\texttt{if } s_{i} \\neq s_{i - 1}\n\\end{cases}$$\n\n上面的方程实际上就是 相同的地方 复制了 前面第一个不同的地方 /kk\n\n定义 $k$ 为 $i$ 之前第一个不同的。有\n$$\ndp_{i,i} = \\sum_{k}\\sum_{j = mx_{i}}^{i - 1} dp_{k,j} \\ \\texttt{  if } s_{i} \\neq s_{i - 1}\n$$\n\n也就是我们每次从 $k$ 转移并且累加一下。\n\n注意到由于 $s_{k} \\neq s_{k - 1}$，我们之前计算 $dp_{k,j'}$ 的时候应该只更新了 $dp_{k,k}$。\n\n因此实际上我们得到的是 $dp_{i,i} = \\sum_{k}dp_{k,k} \\ \\texttt{ if } mx_{i} \\leq k \\leq i - 1$。\n\n优化掉第二维，有 $dp_{i} = \\sum_{k = mx_{i}}^{i - 1}dp_{k} $。\n\n**注意：这里有个问题，假设有按顺序 $A,B,C,D$ 四个块，如果限制 $B,C$ 不能相同，那么显然我们无法从 $A$ 到 $D$ 全部相同，因此我们 $mx$ 还要取一个前缀 $\\operatorname{max}$**。\n\n\n由于我们合并块的编号并不连续，这不利于我们 dp，因此将块的编号离散化一下即可。\n```cpp\n// 由于 fa 更新的时候不是 1,2,3,4 这样，而是每块第一个的编号\n// 我们把 fa[i] 离散化，pos 表示是第几个，rea 表示第 i 个的实际 fa\nfor (int i = 1; i <= n; i++)\n{\n    if (find(i) == i)\n    {\n        rea[++rea[0]] = i;\n        pos[i] = rea[0];\n    }\n}\n```\n之后枚举上一个不同的点转移就可以了，方程：\n\n```cpp\nfor (int i = 1; i <= n; i++)\n{\n    if (find(i) != i)\n    {\n        continue;\n    }\n    ++cnt;\n    // 现在只有无限制和要求出现不同了\n    // 我们可以枚举上一个不同的位置\n\n    for (int j = pos[mx[rea[cnt]]]; j < cnt; j++)\n    {\n        (dp[cnt] += dp[j]) %= 998244353;\n    }\n}\n```\n\n把所有 $0$，$1$ 交换不会违反限制，因此答案要乘 $2$。\n\n\n## Codes\n\n一维完整代码。\n\n```cpp\n// Problem: C. Count Binary Strings\n// Contest: Educational Codeforces Round 140 (Rated for Div. 2)\n// URL: https://codeforces.com/contest/1767/problem/C\n// Memory Limit: 512 MB\n// Time Limit: 2000 ms\n//\n// Powered by CP Editor (https://cpeditor.org)\n\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint n, nums[200][200];\nint fa[222];\nvoid init()\n{\n    for (int i = 1; i <= n; i++)\n    {\n        fa[i] = i;\n    }\n}\nint find(int u)\n{\n    if (fa[u] == u)\n    {\n        return fa[u];\n    }\n    else\n    {\n        return fa[u] = find(fa[u]);\n    }\n}\nvoid merge(int u, int v)\n{\n    if (find(u) == find(v))\n    {\n        return;\n    }\n    if (find(u) < find(v))\n    {\n        fa[find(v)] = find(u);\n    }\n    else\n    {\n        fa[find(u)] = find(v);\n    }\n}\nint dp[222];\nint mx[222];\nint rea[222];\nint pos[222];\nsigned main()\n{\n    read(n);\n    init();\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = i; j <= n; j++)\n        {\n            read(nums[i][j]);\n            if (nums[i][j] == 1)\n            {\n                for (int k = i + 1; k <= j; k++)\n                {\n                    merge(i, k);\n                }\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        if (nums[i][i] == 2)\n        {\n            puts(\"0\");\n            return 0;\n        }\n    }\n    // 对于每一个需要找到最晚需要不同的，这样能满足前面的所有条件\n    for (int i = 1; i <= n; i++)\n    {\n        mx[i] = 0;\n    }\n    for (int i = 2; i <= n; i++)\n    {\n        for (int j = i - 1; j; j--)\n        {\n            if (nums[j][i] == 2)\n            {\n                if (find(i) == find(j))\n                {\n                    puts(\"0\");\n                    exit(0);\n                }\n                mx[find(i)] = max(mx[find(i)], find(j));\n                break;\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        mx[i] = max(mx[i], mx[i - 1]);\n    }\n\n    int cnt = 0;\n    dp[0] = 1;\n    for (int i = 1; i <= n; i++)\n    {\n        if (find(i) == i)\n        {\n            rea[++rea[0]] = i;\n            pos[i] = rea[0];\n        }\n    }\n\n    for (int i = 1; i <= n; i++)\n    {\n        if (find(i) != i)\n        {\n            continue;\n        }\n        ++cnt;\n        // 现在只有无限制和要求出现不同了\n        // 我们可以枚举上一个不同的位置\n        // 由于 fa 更新的时候不是 1,2,3,4 这样，而是每块第一个的编号\n        // 我们把 fa[i] 离散化，pos 表示是第几个，rea 表示第 i 个的实际 fa\n        for (int j = pos[mx[rea[cnt]]]; j < cnt; j++)\n        {\n            (dp[cnt] += dp[j]) %= 998244353;\n        }\n    }\n    //   cout << cnt << endl;\n    writeln(2 * dp[cnt] % 998244353);\n    return 0;\n}\n```","slug":"CF1767C题解","published":1,"updated":"2023-10-03T03:58:41.131Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbhuuv40001bopt92nw8d0m","content":"<h1 id=\"cf1767c-count-binary-strings-题解\">CF1767C Count Binary Strings\r\n题解</h1>\r\n<h2 id=\"foreword\">Foreword</h2>\r\n<p>感谢 <a href=\"https://www.luogu.com.cn/user/234074\"><span\r\nclass=\"citation\" data-cites=\"樱雪喵\">@樱雪喵</span></a>、<a\r\nhref=\"https://www.luogu.com.cn/user/183154\"><span class=\"citation\"\r\ndata-cites=\"swiftc\">@swiftc</span></a> 两位大佬的耐心指导。</p>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1767C\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1767/C\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>有一个长度为 <span class=\"math inline\">\\(n\\)</span> 的 01 串 <span\r\nclass=\"math inline\">\\(s\\)</span>（下标从 <span\r\nclass=\"math inline\">\\(1\\)</span> 开始）和一些限制 <span\r\nclass=\"math inline\">\\(a_{i,j}(1 \\le i \\le j \\le n)\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(a_{i,j}\\)</span> 的含义如下：</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(a_{i,j}=\\)</span></th>\r\n<th style=\"text-align: center;\">含义</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(0\\)</span></td>\r\n<td style=\"text-align: center;\">没有限制</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(1\\)</span></td>\r\n<td style=\"text-align: center;\">对于所有的 <span class=\"math inline\">\\(i\r\n\\le p \\le q \\le j\\)</span> 均有 <span\r\nclass=\"math inline\">\\(s_p=s_q\\)</span></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(2\\)</span></td>\r\n<td style=\"text-align: center;\">存在 <span class=\"math inline\">\\(i \\le p\r\n\\le q \\le j\\)</span> 使得 <span class=\"math inline\">\\(s_p \\neq\r\ns_q\\)</span></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>求可能的 <span class=\"math inline\">\\(s\\)</span>\r\n的个数。<strong>答案对 <span class=\"math inline\">\\(998244353\\)</span>\r\n取模。</strong></p>\r\n<p>对于 <span class=\"math inline\">\\(100\\%\\)</span> 的数据，<span\r\nclass=\"math inline\">\\(2 \\le n \\le 100\\)</span>，<span\r\nclass=\"math inline\">\\(0 \\le a_{i,j} \\le 2\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>这种计数类问题大概率是组合数学或者\r\ndp，然而这道题限制条件很多，组合数学大概是做不成了，那么考虑 dp。</p>\r\n<p>首先一个很显然的情况是如果 <span class=\"math inline\">\\(a_{i,i} =\r\n2\\)</span> 那么无解。接下来考虑对 <span class=\"math inline\">\\(a_{i,j} =\r\n1\\)</span>\r\n的限制，我们把这些需要区间内全相同的合并成一个块，对块内每个位置的限制等价于对整个块的限制，使用并查集维护即可，注意每个块合并的时候都合并到最前面的位置。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> fa[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        fa[i] = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fa[u] == u)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa[u];</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa[u] = <span class=\"built_in\">find</span>(fa[u]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(u) == <span class=\"built_in\">find</span>(v))</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(u) &lt; <span class=\"built_in\">find</span>(v))</span><br><span class=\"line\">        fa[<span class=\"built_in\">find</span>(v)] = <span class=\"built_in\">find</span>(u);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        fa[<span class=\"built_in\">find</span>(u)] = <span class=\"built_in\">find</span>(v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>主函数中：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">init</span>();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt;= n; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i][j]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i][j] == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = i + <span class=\"number\">1</span>; k &lt;= j; k++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">merge</span>(i, k);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>之后，我们很容易想到，对于每个块 <span\r\nclass=\"math inline\">\\(p\\)</span>，我们找到对于 <span\r\nclass=\"math inline\">\\(i \\in p\\)</span>，<span\r\nclass=\"math inline\">\\(a_{i,j} = 2\\)</span> 这样的限制中最大的 <span\r\nclass=\"math inline\">\\(j\\)</span>，只要满足这条限制，在前面的限制也就都满足了，求出\r\n<span class=\"math inline\">\\(mx_{i}\\)</span> 表示块 <span\r\nclass=\"math inline\">\\(i\\)</span> 之前最后一个能满足从 <span\r\nclass=\"math inline\">\\(mx_{i}\\)</span> 到 <span\r\nclass=\"math inline\">\\(i\\)</span> 与 <span\r\nclass=\"math inline\">\\(i\\)</span> 填的数全相同的块。</p>\r\n<p>DP\r\n的思路有两种，一种是一维的，另一种是二维的。我开始写的一维，然而没有考虑到一些问题写挂了，尝试了二维通过之后又回到了一维。</p>\r\n<p>这里先从二维 DP 开始讲。</p>\r\n<p>考虑某个位置和前一位是否相同，有：</p>\r\n<p><span class=\"math display\">\\[\\begin{cases}\r\ndp_{i,j} = dp_{i - 1,j} &amp; \\texttt{if } s_{i} = s_{i - 1}\r\n\\\\\r\ndp_{i,i} = \\sum_{j = mx_{i}}^{i - 1} dp_{i - 1,j} &amp; \\texttt{if }\r\ns_{i} \\neq s_{i - 1}\r\n\\end{cases}\\]</span></p>\r\n<p>即如果要求和前一位相同，不会有新的贡献，否则累加贡献。</p>\r\n<p>直接判断是否可行并转移即可。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) == i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; i; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            (dp[i][i] += dp[i - <span class=\"number\">1</span>][j]) %= <span class=\"number\">998244353</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = mx[<span class=\"built_in\">find</span>(i)]; j &lt; i; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        (dp[i][j] += dp[i - <span class=\"number\">1</span>][j]) %= <span class=\"number\">998244353</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = mmx; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    (res += dp[n][i]) %= <span class=\"number\">998244353</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">writeln</span>(<span class=\"number\">2</span> * res % <span class=\"number\">998244353</span>);</span><br></pre></td></tr></table></figure>\r\n<p>接下来考虑一维 DP 怎么做。</p>\r\n<p><span class=\"math display\">\\[\\begin{cases}\r\ndp_{i,j} = dp_{i - 1,j} &amp; \\texttt{if } s_{i} = s_{i - 1}\r\n\\\\\r\ndp_{i,i} = \\sum_{j = mx_{i}}^{i - 1} dp_{i - 1,j} &amp; \\texttt{if }\r\ns_{i} \\neq s_{i - 1}\r\n\\end{cases}\\]</span></p>\r\n<p>上面的方程实际上就是 相同的地方 复制了 前面第一个不同的地方 /kk</p>\r\n<p>定义 <span class=\"math inline\">\\(k\\)</span> 为 <span\r\nclass=\"math inline\">\\(i\\)</span> 之前第一个不同的。有 <span\r\nclass=\"math display\">\\[\r\ndp_{i,i} = \\sum_{k}\\sum_{j = mx_{i}}^{i - 1} dp_{k,j} \\ \\texttt{  if }\r\ns_{i} \\neq s_{i - 1}\r\n\\]</span></p>\r\n<p>也就是我们每次从 <span class=\"math inline\">\\(k\\)</span>\r\n转移并且累加一下。</p>\r\n<p>注意到由于 <span class=\"math inline\">\\(s_{k} \\neq s_{k -\r\n1}\\)</span>，我们之前计算 <span\r\nclass=\"math inline\">\\(dp_{k,j&#39;}\\)</span> 的时候应该只更新了 <span\r\nclass=\"math inline\">\\(dp_{k,k}\\)</span>。</p>\r\n<p>因此实际上我们得到的是 <span class=\"math inline\">\\(dp_{i,i} =\r\n\\sum_{k}dp_{k,k} \\ \\texttt{ if } mx_{i} \\leq k \\leq i - 1\\)</span>。</p>\r\n<p>优化掉第二维，有 $dp_{i} = <em>{k = mx</em>{i}}^{i - 1}dp_{k} $。</p>\r\n<p><strong>注意：这里有个问题，假设有按顺序 <span\r\nclass=\"math inline\">\\(A,B,C,D\\)</span> 四个块，如果限制 <span\r\nclass=\"math inline\">\\(B,C\\)</span> 不能相同，那么显然我们无法从 <span\r\nclass=\"math inline\">\\(A\\)</span> 到 <span\r\nclass=\"math inline\">\\(D\\)</span> 全部相同，因此我们 <span\r\nclass=\"math inline\">\\(mx\\)</span> 还要取一个前缀 <span\r\nclass=\"math inline\">\\(\\operatorname{max}\\)</span></strong>。</p>\r\n<p>由于我们合并块的编号并不连续，这不利于我们\r\ndp，因此将块的编号离散化一下即可。 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 由于 fa 更新的时候不是 1,2,3,4 这样，而是每块第一个的编号</span></span><br><span class=\"line\"><span class=\"comment\">// 我们把 fa[i] 离散化，pos 表示是第几个，rea 表示第 i 个的实际 fa</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) == i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rea[++rea[<span class=\"number\">0</span>]] = i;</span><br><span class=\"line\">        pos[i] = rea[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n之后枚举上一个不同的点转移就可以了，方程：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) != i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ++cnt;</span><br><span class=\"line\">    <span class=\"comment\">// 现在只有无限制和要求出现不同了</span></span><br><span class=\"line\">    <span class=\"comment\">// 我们可以枚举上一个不同的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = pos[mx[rea[cnt]]]; j &lt; cnt; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        (dp[cnt] += dp[j]) %= <span class=\"number\">998244353</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>把所有 <span class=\"math inline\">\\(0\\)</span>，<span\r\nclass=\"math inline\">\\(1\\)</span> 交换不会违反限制，因此答案要乘 <span\r\nclass=\"math inline\">\\(2\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<p>一维完整代码。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Problem: C. Count Binary Strings</span></span><br><span class=\"line\"><span class=\"comment\">// Contest: Educational Codeforces Round 140 (Rated for Div. 2)</span></span><br><span class=\"line\"><span class=\"comment\">// URL: https://codeforces.com/contest/1767/problem/C</span></span><br><span class=\"line\"><span class=\"comment\">// Memory Limit: 512 MB</span></span><br><span class=\"line\"><span class=\"comment\">// Time Limit: 2000 ms</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n, nums[<span class=\"number\">200</span>][<span class=\"number\">200</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> fa[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fa[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fa[u] == u)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa[u];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa[u] = <span class=\"built_in\">find</span>(fa[u]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(u) == <span class=\"built_in\">find</span>(v))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(u) &lt; <span class=\"built_in\">find</span>(v))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fa[<span class=\"built_in\">find</span>(v)] = <span class=\"built_in\">find</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fa[<span class=\"built_in\">find</span>(u)] = <span class=\"built_in\">find</span>(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> dp[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> mx[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> rea[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> pos[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt;= n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(nums[i][j]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i][j] == <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = i + <span class=\"number\">1</span>; k &lt;= j; k++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">merge</span>(i, k);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i][i] == <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 对于每一个需要找到最晚需要不同的，这样能满足前面的所有条件</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mx[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i - <span class=\"number\">1</span>; j; j--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[j][i] == <span class=\"number\">2</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) == <span class=\"built_in\">find</span>(j))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">                    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                mx[<span class=\"built_in\">find</span>(i)] = <span class=\"built_in\">max</span>(mx[<span class=\"built_in\">find</span>(i)], <span class=\"built_in\">find</span>(j));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mx[i] = <span class=\"built_in\">max</span>(mx[i], mx[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) == i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rea[++rea[<span class=\"number\">0</span>]] = i;</span><br><span class=\"line\">            pos[i] = rea[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) != i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ++cnt;</span><br><span class=\"line\">        <span class=\"comment\">// 现在只有无限制和要求出现不同了</span></span><br><span class=\"line\">        <span class=\"comment\">// 我们可以枚举上一个不同的位置</span></span><br><span class=\"line\">        <span class=\"comment\">// 由于 fa 更新的时候不是 1,2,3,4 这样，而是每块第一个的编号</span></span><br><span class=\"line\">        <span class=\"comment\">// 我们把 fa[i] 离散化，pos 表示是第几个，rea 表示第 i 个的实际 fa</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = pos[mx[rea[cnt]]]; j &lt; cnt; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            (dp[cnt] += dp[j]) %= <span class=\"number\">998244353</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//   cout &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(<span class=\"number\">2</span> * dp[cnt] % <span class=\"number\">998244353</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/project/css/spoiler.css\" type=\"text/css\"><script src=\"/project/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"cf1767c-count-binary-strings-题解\">CF1767C Count Binary Strings\r\n题解</h1>\r\n<h2 id=\"foreword\">Foreword</h2>\r\n<p>感谢 <a href=\"https://www.luogu.com.cn/user/234074\"><span\r\nclass=\"citation\" data-cites=\"樱雪喵\">@樱雪喵</span></a>、<a\r\nhref=\"https://www.luogu.com.cn/user/183154\"><span class=\"citation\"\r\ndata-cites=\"swiftc\">@swiftc</span></a> 两位大佬的耐心指导。</p>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1767C\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1767/C\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>有一个长度为 <span class=\"math inline\">\\(n\\)</span> 的 01 串 <span\r\nclass=\"math inline\">\\(s\\)</span>（下标从 <span\r\nclass=\"math inline\">\\(1\\)</span> 开始）和一些限制 <span\r\nclass=\"math inline\">\\(a_{i,j}(1 \\le i \\le j \\le n)\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(a_{i,j}\\)</span> 的含义如下：</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(a_{i,j}=\\)</span></th>\r\n<th style=\"text-align: center;\">含义</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(0\\)</span></td>\r\n<td style=\"text-align: center;\">没有限制</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(1\\)</span></td>\r\n<td style=\"text-align: center;\">对于所有的 <span class=\"math inline\">\\(i\r\n\\le p \\le q \\le j\\)</span> 均有 <span\r\nclass=\"math inline\">\\(s_p=s_q\\)</span></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(2\\)</span></td>\r\n<td style=\"text-align: center;\">存在 <span class=\"math inline\">\\(i \\le p\r\n\\le q \\le j\\)</span> 使得 <span class=\"math inline\">\\(s_p \\neq\r\ns_q\\)</span></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>求可能的 <span class=\"math inline\">\\(s\\)</span>\r\n的个数。<strong>答案对 <span class=\"math inline\">\\(998244353\\)</span>\r\n取模。</strong></p>\r\n<p>对于 <span class=\"math inline\">\\(100\\%\\)</span> 的数据，<span\r\nclass=\"math inline\">\\(2 \\le n \\le 100\\)</span>，<span\r\nclass=\"math inline\">\\(0 \\le a_{i,j} \\le 2\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>这种计数类问题大概率是组合数学或者\r\ndp，然而这道题限制条件很多，组合数学大概是做不成了，那么考虑 dp。</p>\r\n<p>首先一个很显然的情况是如果 <span class=\"math inline\">\\(a_{i,i} =\r\n2\\)</span> 那么无解。接下来考虑对 <span class=\"math inline\">\\(a_{i,j} =\r\n1\\)</span>\r\n的限制，我们把这些需要区间内全相同的合并成一个块，对块内每个位置的限制等价于对整个块的限制，使用并查集维护即可，注意每个块合并的时候都合并到最前面的位置。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> fa[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        fa[i] = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fa[u] == u)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa[u];</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa[u] = <span class=\"built_in\">find</span>(fa[u]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(u) == <span class=\"built_in\">find</span>(v))</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(u) &lt; <span class=\"built_in\">find</span>(v))</span><br><span class=\"line\">        fa[<span class=\"built_in\">find</span>(v)] = <span class=\"built_in\">find</span>(u);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        fa[<span class=\"built_in\">find</span>(u)] = <span class=\"built_in\">find</span>(v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>主函数中：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">init</span>();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt;= n; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i][j]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i][j] == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = i + <span class=\"number\">1</span>; k &lt;= j; k++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">merge</span>(i, k);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>之后，我们很容易想到，对于每个块 <span\r\nclass=\"math inline\">\\(p\\)</span>，我们找到对于 <span\r\nclass=\"math inline\">\\(i \\in p\\)</span>，<span\r\nclass=\"math inline\">\\(a_{i,j} = 2\\)</span> 这样的限制中最大的 <span\r\nclass=\"math inline\">\\(j\\)</span>，只要满足这条限制，在前面的限制也就都满足了，求出\r\n<span class=\"math inline\">\\(mx_{i}\\)</span> 表示块 <span\r\nclass=\"math inline\">\\(i\\)</span> 之前最后一个能满足从 <span\r\nclass=\"math inline\">\\(mx_{i}\\)</span> 到 <span\r\nclass=\"math inline\">\\(i\\)</span> 与 <span\r\nclass=\"math inline\">\\(i\\)</span> 填的数全相同的块。</p>\r\n<p>DP\r\n的思路有两种，一种是一维的，另一种是二维的。我开始写的一维，然而没有考虑到一些问题写挂了，尝试了二维通过之后又回到了一维。</p>\r\n<p>这里先从二维 DP 开始讲。</p>\r\n<p>考虑某个位置和前一位是否相同，有：</p>\r\n<p><span class=\"math display\">\\[\\begin{cases}\r\ndp_{i,j} = dp_{i - 1,j} &amp; \\texttt{if } s_{i} = s_{i - 1}\r\n\\\\\r\ndp_{i,i} = \\sum_{j = mx_{i}}^{i - 1} dp_{i - 1,j} &amp; \\texttt{if }\r\ns_{i} \\neq s_{i - 1}\r\n\\end{cases}\\]</span></p>\r\n<p>即如果要求和前一位相同，不会有新的贡献，否则累加贡献。</p>\r\n<p>直接判断是否可行并转移即可。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) == i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; i; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            (dp[i][i] += dp[i - <span class=\"number\">1</span>][j]) %= <span class=\"number\">998244353</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = mx[<span class=\"built_in\">find</span>(i)]; j &lt; i; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        (dp[i][j] += dp[i - <span class=\"number\">1</span>][j]) %= <span class=\"number\">998244353</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = mmx; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    (res += dp[n][i]) %= <span class=\"number\">998244353</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">writeln</span>(<span class=\"number\">2</span> * res % <span class=\"number\">998244353</span>);</span><br></pre></td></tr></table></figure>\r\n<p>接下来考虑一维 DP 怎么做。</p>\r\n<p><span class=\"math display\">\\[\\begin{cases}\r\ndp_{i,j} = dp_{i - 1,j} &amp; \\texttt{if } s_{i} = s_{i - 1}\r\n\\\\\r\ndp_{i,i} = \\sum_{j = mx_{i}}^{i - 1} dp_{i - 1,j} &amp; \\texttt{if }\r\ns_{i} \\neq s_{i - 1}\r\n\\end{cases}\\]</span></p>\r\n<p>上面的方程实际上就是 相同的地方 复制了 前面第一个不同的地方 /kk</p>\r\n<p>定义 <span class=\"math inline\">\\(k\\)</span> 为 <span\r\nclass=\"math inline\">\\(i\\)</span> 之前第一个不同的。有 <span\r\nclass=\"math display\">\\[\r\ndp_{i,i} = \\sum_{k}\\sum_{j = mx_{i}}^{i - 1} dp_{k,j} \\ \\texttt{  if }\r\ns_{i} \\neq s_{i - 1}\r\n\\]</span></p>\r\n<p>也就是我们每次从 <span class=\"math inline\">\\(k\\)</span>\r\n转移并且累加一下。</p>\r\n<p>注意到由于 <span class=\"math inline\">\\(s_{k} \\neq s_{k -\r\n1}\\)</span>，我们之前计算 <span\r\nclass=\"math inline\">\\(dp_{k,j&#39;}\\)</span> 的时候应该只更新了 <span\r\nclass=\"math inline\">\\(dp_{k,k}\\)</span>。</p>\r\n<p>因此实际上我们得到的是 <span class=\"math inline\">\\(dp_{i,i} =\r\n\\sum_{k}dp_{k,k} \\ \\texttt{ if } mx_{i} \\leq k \\leq i - 1\\)</span>。</p>\r\n<p>优化掉第二维，有 $dp_{i} = <em>{k = mx</em>{i}}^{i - 1}dp_{k} $。</p>\r\n<p><strong>注意：这里有个问题，假设有按顺序 <span\r\nclass=\"math inline\">\\(A,B,C,D\\)</span> 四个块，如果限制 <span\r\nclass=\"math inline\">\\(B,C\\)</span> 不能相同，那么显然我们无法从 <span\r\nclass=\"math inline\">\\(A\\)</span> 到 <span\r\nclass=\"math inline\">\\(D\\)</span> 全部相同，因此我们 <span\r\nclass=\"math inline\">\\(mx\\)</span> 还要取一个前缀 <span\r\nclass=\"math inline\">\\(\\operatorname{max}\\)</span></strong>。</p>\r\n<p>由于我们合并块的编号并不连续，这不利于我们\r\ndp，因此将块的编号离散化一下即可。 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 由于 fa 更新的时候不是 1,2,3,4 这样，而是每块第一个的编号</span></span><br><span class=\"line\"><span class=\"comment\">// 我们把 fa[i] 离散化，pos 表示是第几个，rea 表示第 i 个的实际 fa</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) == i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rea[++rea[<span class=\"number\">0</span>]] = i;</span><br><span class=\"line\">        pos[i] = rea[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n之后枚举上一个不同的点转移就可以了，方程：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) != i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ++cnt;</span><br><span class=\"line\">    <span class=\"comment\">// 现在只有无限制和要求出现不同了</span></span><br><span class=\"line\">    <span class=\"comment\">// 我们可以枚举上一个不同的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = pos[mx[rea[cnt]]]; j &lt; cnt; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        (dp[cnt] += dp[j]) %= <span class=\"number\">998244353</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>把所有 <span class=\"math inline\">\\(0\\)</span>，<span\r\nclass=\"math inline\">\\(1\\)</span> 交换不会违反限制，因此答案要乘 <span\r\nclass=\"math inline\">\\(2\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<p>一维完整代码。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Problem: C. Count Binary Strings</span></span><br><span class=\"line\"><span class=\"comment\">// Contest: Educational Codeforces Round 140 (Rated for Div. 2)</span></span><br><span class=\"line\"><span class=\"comment\">// URL: https://codeforces.com/contest/1767/problem/C</span></span><br><span class=\"line\"><span class=\"comment\">// Memory Limit: 512 MB</span></span><br><span class=\"line\"><span class=\"comment\">// Time Limit: 2000 ms</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n, nums[<span class=\"number\">200</span>][<span class=\"number\">200</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> fa[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fa[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fa[u] == u)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa[u];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa[u] = <span class=\"built_in\">find</span>(fa[u]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(u) == <span class=\"built_in\">find</span>(v))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(u) &lt; <span class=\"built_in\">find</span>(v))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fa[<span class=\"built_in\">find</span>(v)] = <span class=\"built_in\">find</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fa[<span class=\"built_in\">find</span>(u)] = <span class=\"built_in\">find</span>(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> dp[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> mx[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> rea[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> pos[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt;= n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(nums[i][j]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i][j] == <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = i + <span class=\"number\">1</span>; k &lt;= j; k++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">merge</span>(i, k);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i][i] == <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 对于每一个需要找到最晚需要不同的，这样能满足前面的所有条件</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mx[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i - <span class=\"number\">1</span>; j; j--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[j][i] == <span class=\"number\">2</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) == <span class=\"built_in\">find</span>(j))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">                    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                mx[<span class=\"built_in\">find</span>(i)] = <span class=\"built_in\">max</span>(mx[<span class=\"built_in\">find</span>(i)], <span class=\"built_in\">find</span>(j));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mx[i] = <span class=\"built_in\">max</span>(mx[i], mx[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) == i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rea[++rea[<span class=\"number\">0</span>]] = i;</span><br><span class=\"line\">            pos[i] = rea[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) != i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ++cnt;</span><br><span class=\"line\">        <span class=\"comment\">// 现在只有无限制和要求出现不同了</span></span><br><span class=\"line\">        <span class=\"comment\">// 我们可以枚举上一个不同的位置</span></span><br><span class=\"line\">        <span class=\"comment\">// 由于 fa 更新的时候不是 1,2,3,4 这样，而是每块第一个的编号</span></span><br><span class=\"line\">        <span class=\"comment\">// 我们把 fa[i] 离散化，pos 表示是第几个，rea 表示第 i 个的实际 fa</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = pos[mx[rea[cnt]]]; j &lt; cnt; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            (dp[cnt] += dp[j]) %= <span class=\"number\">998244353</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//   cout &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(<span class=\"number\">2</span> * dp[cnt] % <span class=\"number\">998244353</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n"},{"title":"test","date":"2023-10-04T06:02:39.000Z","mathjax":true,"_content":"\n$$a b c$$","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2023-10-04 14:02:39\ntags:\nmathjax: true\n---\n\n$$a b c$$","slug":"test","published":1,"updated":"2023-10-04T07:07:25.383Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbhuuvb0004bopt8nxmfigo","content":"<p><span class=\"math display\">\\[a b c\\]</span></p>\r\n<link rel=\"stylesheet\" href=\"/project/css/spoiler.css\" type=\"text/css\"><script src=\"/project/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<p><span class=\"math display\">\\[a b c\\]</span></p>\r\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}