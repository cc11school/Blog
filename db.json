{"meta":{"version":1,"warehouse":"5.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/AT_abc306_h Balance Scale 题解.md","hash":"c36a1c4530ad43894a91868dccc11b2658180639","modified":1696428668241},{"_id":"source/_posts/AT_abc318_c Blue Spring 题解.md","hash":"18adbbd419add8d8fd2aee101ffbf973db0353b8","modified":1696428668242},{"_id":"source/_posts/AT_abc318_d General Weighted Max Matching 题解.md","hash":"2fa07e32879a50433f4c2df87781578e40e40a4c","modified":1696428668242},{"_id":"source/_posts/AT_arc165_b [ARC165B] Sliding Window Sort 2 题解.md","hash":"b0274cd011aea150131aabce0af041d92e820ce3","modified":1696428668243},{"_id":"source/_posts/AT_abc318_e Sandwiches 题解.md","hash":"25001d699fba2f2749028d4f4890891d177a6e57","modified":1696428668243},{"_id":"source/_posts/AT_arc165_c [ARC165C] Social Distance on Graph 题解.md","hash":"51a68dda73e81004f3b11b12ba8527c48087790d","modified":1696428668244},{"_id":"source/_posts/AT_arc165_d [ARC165D] Substring Comparison 题解.md","hash":"97fc6502b1148edd88cda01085cc20effad3d50d","modified":1696428668244},{"_id":"source/_posts/CF1268B 题解.md","hash":"b77b537c9c29b17f4b311b9e71cb80bcd37fe3a6","modified":1696428668244},{"_id":"source/_posts/CF1394D Boboniu and Jianghu 题解.md","hash":"58aa947a3362c645290aff33efea2a62220dba26","modified":1696428668245},{"_id":"source/_posts/CF14D Two Paths题解.md","hash":"9baea7c03fc58d6f8ba1cced7a18cfff07e7c45c","modified":1696428668245},{"_id":"source/_posts/CF1512D Permutation by Sum 题解.md","hash":"4e2deb731213b3c94049622a04f2205e342a16b5","modified":1696428668246},{"_id":"source/_posts/CF1512C A-B Palindrome 题解.md","hash":"3cce840c54a4bf210c670d6af90d7df6fcfe0735","modified":1696428668246},{"_id":"source/_posts/CF1580D Subsequence 题解.md","hash":"48c86560b9c52410f64a874f487f98c92033e5fc","modified":1696428668247},{"_id":"source/_posts/CF1667A 题解.md","hash":"eec74c21c351e6a253b9f2fb2024001ce5e191ff","modified":1696428668247},{"_id":"source/_posts/CF1767C Count Binary Strings 题解.md","hash":"f8db439125b13ac86eaf9788ca52c44eef34a215","modified":1696428668247},{"_id":"source/_posts/CF1778C Flexible String 题解.md","hash":"cb9161706ed8ef6c4fc61001c35ac19a9e280a6d","modified":1696428668248},{"_id":"source/_posts/CF1832B Maximum Sum 题解.md","hash":"35bb8c16964e8fa972adb727f4e468ae5325cdf3","modified":1696428668249},{"_id":"source/_posts/CF1828B Permutation Swap 题解.md","hash":"d94dbaf9d0e617ddb4ef1c7517094f607118c292","modified":1696428668248},{"_id":"source/_posts/CF1833B Restore the Weather 题解.md","hash":"7274cf27639a675883d8a8c21e550acbb7810649","modified":1696428668249},{"_id":"source/_posts/CF1852A Ntarsis' Set 题解.md","hash":"53b965954fcf81350fe38274cfe33f25be05809c","modified":1696428668249},{"_id":"source/_posts/CF1852B Imbalanced Arrays 题解.md","hash":"5fc9f1b71fcdf5e7f115cdbe1e7e8bbc79b895bc","modified":1696428668250},{"_id":"source/_posts/CF1854B Earn or Unlock 题解.md","hash":"d61c1bd065b24fff68fe1b844b917aa16985d59a","modified":1696428668250},{"_id":"source/_posts/CF1854D Michael and Hotel 题解.md","hash":"a74b107d48d24426146749136f47d04b450ca03b","modified":1696428668251},{"_id":"source/_posts/CF1855B Longest Divisors Interval 题解.md","hash":"6b28b25b38b3c1ccd9f13ea83fe04b4f9306312b","modified":1696428668251},{"_id":"source/_posts/CF1863B Split Sort 题解.md","hash":"cea8c91c23a2628031aee07495812dd96c32e20a","modified":1696428668252},{"_id":"source/_posts/CF1856E PermuTree 题解.md","hash":"dc99d309d101f86af2d4104e8943b9d3a8f47124","modified":1696428668251},{"_id":"source/_posts/CF1863C MEX Repetition 题解.md","hash":"beef475997f35c2b10b245e94b9399202186acbd","modified":1696428668252},{"_id":"source/_posts/CF1864B Swap and Reverse 题解.md","hash":"a75418982d6116f642438b9e74fcc99c7c8a772a","modified":1696428668253},{"_id":"source/_posts/CF1863D Two-Colored Dominoes 题解.md","hash":"5568bdf1648ca3165555f220fa3da4aa2e24b474","modified":1696428668252},{"_id":"source/_posts/CF1864C Divisor Chain 题解.md","hash":"27c70e227906009eb59eaa6dc5a79081c6a64dee","modified":1696428668253},{"_id":"source/_posts/CF1864D Matrix Cascade 题解.md","hash":"f928f3e583b2b3698b9eb99fb6f0ab8c6ffa7f26","modified":1696428668254},{"_id":"source/_posts/CF485B Valuable Resources 题解.md","hash":"5a3249d847357cbd95870b49e7b68427c0d9e30c","modified":1696428668254},{"_id":"source/_posts/CF587A Duff and Weight Lifting 题解.md","hash":"d76ee1bbf331b1e5a9791a12e14c2efa0afc00e0","modified":1696428668255},{"_id":"source/_posts/CF878E Numbers on the blackboard 题解.md","hash":"2057d49f7a5dc63784792db62cd179d7b5b4e6c0","modified":1696428668255},{"_id":"source/_posts/P5769 [JSOI2016]飞机调度 题解.md","hash":"5febe61d9829b52fb4eedcd241446ea802a14695","modified":1696428668256},{"_id":"source/_posts/P4216 [SCOI2015] 情报传递 题解.md","hash":"889406ad3543a07c62f1a3919d8fe73660da9f5f","modified":1696428668256},{"_id":"source/_posts/P7624 [AHOI2021初中组] 地铁 题解.md","hash":"f65483a8cb02d262a08ac97c288275f93d412099","modified":1696428668256},{"_id":"source/_posts/P8924 题解.md","hash":"29a4c3cde4cd2879ede97dd8f36013d5a2b9d6de","modified":1696428668257},{"_id":"source/_posts/P9033「KDOI-04」XOR Sum 题解.md","hash":"be594996186b0b6a0feb724fd1da24553eb87079","modified":1696428668257},{"_id":"source/_posts/P9504 『MGOI』Simple Round I _ C. 魔法禁林 题解.md","hash":"9ad890e3185660f69310a45dc62deebe0d86e899","modified":1696428668257},{"_id":"source/_posts/P9538 「AWOI Round 2 A」最大和 题解.md","hash":"0834adcf19a1ed8243e4e17bc33a6c7734c88720","modified":1696428668258},{"_id":"source/_posts/[ABC301C] AtCoder Cards 题解.md","hash":"0f1ae0ebae8881b988be55cc10e2c08a82e349af","modified":1696429295664},{"_id":"source/_posts/[ABC301D] Bitmask 题解.md","hash":"d09ea06ac48a56314affebda03bb5e55e2dcfd77","modified":1696428668259},{"_id":"source/_posts/[ARC133E] Cyclic Medians 题解.md","hash":"e34d5a5d7f7cc7c2fc3cf72b44669c8bf86bc2ba","modified":1696428668259},{"_id":"source/_posts/[ARC160B] Triple Pair 题解.md","hash":"2f8ed307beea21296bd7475093447d2ffcb4bcd4","modified":1696428668259},{"_id":"source/_posts/[ARC161A] Make M 题解.md","hash":"a533e7c42b0f1e5d602b79a2a8abdb6e0bd1b70b","modified":1696428668259},{"_id":"source/_posts/[ARC165A] Sum equals LCM 题解.md","hash":"8ce7f87490e57c02dfddbc1047b96d01943af253","modified":1696428668260},{"_id":"source/_posts/[ARC161B] Exactly Three Bits 题解.md","hash":"20968821e8be84580a0c904b80a0016b38b746f8","modified":1696428668260},{"_id":"source/_posts/[CF1582C] Grandma Capa Knits a Scarf 题解.md","hash":"6555bd6ce95d5d6fe9bb4549606a23d16e4a7613","modified":1696428668261},{"_id":"source/_posts/洛谷 P9577 Dead Cells 题解.md","hash":"6902a0fbe68a67f84754166d453abab60443f822","modified":1696428668261},{"_id":"source/about/index.md","hash":"acd96a9c09a060e082605dcde6305ccc3e30ec86","modified":1696428668262},{"_id":"source/admin/config.yml","hash":"f24f851ca274e0c33cc2ad4da4a3e6287264cd69","modified":1696433806484},{"_id":"source/categories/index.md","hash":"ef6e2e2e30891174450cd678403ecdef2a3c135b","modified":1696428668262},{"_id":"source/admin/index.html","hash":"50fe4efcff690b491b4d7da03d0ca1372832e785","modified":1696433237946},{"_id":"source/tags/index.md","hash":"805b081b7f8194da0591832d753865d61c962073","modified":1696428668262},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"7fa5fce5ae11760a636213044d42be17a47fbc0e","modified":1696432534884},{"_id":"node_modules/hexo-theme-next/package.json","hash":"a491d64d3d9277ed438a76d6244f43b5b2322f1e","modified":1696432534681},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1696432534687},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"dae3faa04648aeb0fd91961843a15122dcc73299","modified":1696432534883},{"_id":"node_modules/hexo-theme-next/README.md","hash":"7dfee02792f98c73ff0da7e8efc9a7c55ef52fa0","modified":1696432534691},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1696432534682},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1696432534683},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1696432534882},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1696432534885},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"9f791494afa263c3e31f14b8a5fa2996dfc834c0","modified":1696432534886},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1696432534690},{"_id":"node_modules/hexo-theme-next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1696432534889},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1696432534887},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1696432534890},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1696432534888},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1696432534891},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"44cd26479f503751329f6da2ed80cce1bbf18117","modified":1696432534893},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1696432534895},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1696432534896},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1696432534897},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1696432534899},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1696432534900},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1696432534898},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1696432534901},{"_id":"node_modules/hexo-theme-next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1696432534904},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"70de366e10ea584ba039d40d6b35ac97f93454ad","modified":1696432534901},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1696432534905},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1696432534903},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1696432534908},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1696432534907},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1696432534909},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1696432534910},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1696432534693},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"4695c87d6b81b3a23d16ad6513d9eaa925f8d8ad","modified":1696432534912},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1696432534731},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1696432534697},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"88ea50eeb9097ab4a87a44981a102d8594feb064","modified":1696432534911},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1696432534705},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"b0660b2af0ac7d3fda14ca4d9f2c9e79ef06c6f9","modified":1696432534746},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1696432534760},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1696432534766},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1696432534685},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"ca3088a27b9890402ffb18c4b6c4bedaff8d575b","modified":1696432534688},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1696432534684},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"8ae85453051faa7ed3b332ee488ff5eea8ddaa08","modified":1696432534689},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1696432534747},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1696432534711},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1696432534734},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"6fca18ed4234cf54146c2b3b97b0a6a3606ab33d","modified":1696432534716},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"abda600685ee972e1f6b7a2dcc56f13e2daa6263","modified":1696432534750},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"e7f988ecddb2159313699a00827a45eca5622bd4","modified":1696432534774},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1696432534725},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1696432534763},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"65e9112fb7eb26d2880db624554a99aca028140b","modified":1696432534759},{"_id":"node_modules/hexo-theme-next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1696432534694},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1696432534714},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1696432534626},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1696432534772},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1696432534607},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1696432534744},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1696432534641},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1696432534665},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"447db39d17775b2bd18d8af9c9d65b7b8449f751","modified":1696432534647},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1696432534651},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1696432534761},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1696432534727},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1696432534618},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"d292b78485e8e8055712b0ed6de7cf559c5fbdcd","modified":1696432534614},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"ead37e9167b682f1fa34b5401c3050e18c7ee4a3","modified":1696432534653},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1696432534654},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1696432534655},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1696432534593},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"957241c28796ff352de7f4cffba7bb289b043586","modified":1696432534657},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1696432534590},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1696432534623},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1696432534591},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1696432534627},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1696432534633},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1696432534644},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1696432534636},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1696432534660},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1696432534668},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1696432534658},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1696432534677},{"_id":"node_modules/hexo-theme-next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1696432534678},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1696432534778},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1696432534842},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1696432534834},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"83647a6207333b9609ba90b0946b3fa9548e6381","modified":1696432534789},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1696432534583},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1696432534775},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1696432534776},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1696432534777},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1696432534881},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1696432534880},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1696432534600},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1696432534588},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1696432534598},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1696432534648},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1696432534604},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1696432534663},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"745bd828205da7e5fbd3f860cc3697097630f5f3","modified":1696432534652},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1696432534667},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"d775148c2bf20c028622af5609a788167352bf1e","modified":1696432534672},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1696432534720},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1696432534701},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1696432534722},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1696432534721},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1696432534741},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1696432534765},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1696432534702},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1696432534704},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1696432534740},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1696432534762},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1696432534768},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1696432534745},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1696432534752},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1696432534753},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1696432534756},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1696432534754},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1696432534723},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1696432534755},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1696432534736},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1696432534757},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1696432534764},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1696432534695},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1696432534700},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1696432534709},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1696432534719},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1696432534726},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1696432534749},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1696432534739},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1696432534770},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1696432534768},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1696432534718},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1696432534708},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1696432534743},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1696432534707},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1696432534713},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1696432534712},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1696432534717},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1696432534771},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1696432534732},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1696432534735},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1696432534733},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1696432534738},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1696432534729},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1696432534696},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1696432534737},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1696432534715},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1696432534703},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1696432534730},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1696432534735},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1696432534748},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1696432534625},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1696432534742},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1696432534603},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1696432534629},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1696432534773},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1696432534650},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"6853e5433e3eaa19ea43fa20b08d956ba4cec4ac","modified":1696432534671},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"464db1e7182e5b9cdbd32e8b5368d5e683b1d9c7","modified":1696432534676},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1696432534595},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1696432534602},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1696432534605},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1696432534612},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1696432534608},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1696432534619},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1696432534631},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1696432534638},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1696432534673},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"a1418c9dc8c0f1a0ad4ded0f4627c45bf0db1a10","modified":1696432534838},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1696432534812},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1696432534840},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"48f4f277946a168d0db1ea02804e85c22ca2c7db","modified":1696432534846},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1696432534585},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1696432534659},{"_id":"node_modules/hexo-theme-next/source/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1696432534649},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"c4fc4e862d09221265ab1466085f057be2ad2e4d","modified":1696432534799},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1696432534616},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1696432534817},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1696432534822},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1696432534666},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"7664491542046df9a3887cf40a06e00c0b4086a9","modified":1696432534796},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1696432534857},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1696432534797},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"1dbf2c339adcd27026c3a2ded32ee91ce08cea26","modified":1696432534839},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1696432534804},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1696432534825},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1696432534807},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1696432534841},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1696432534873},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1696432534844},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1696432534828},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"782ee1fc5e669d3ddbfeb82b73ad7fe561f1a4fb","modified":1696432534876},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1696432534779},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1696432534782},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1696432534780},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1696432534829},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"fb550935d374e0bdf1097fce187337dc05cad3e1","modified":1696432534785},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1696432534783},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1696432534793},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1696432534790},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"547c0b5cd5e7ea10d21863d13a6b16579a49396c","modified":1696432534791},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1696432534830},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"82cda756f5b7092df2eee6641b9786df71623bdb","modified":1696432534786},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"ac2dc0ce9c775a83ef7132ae957b54539366ac9c","modified":1696432534781},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1696432534787},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"26a0cba1eee5de45a45a5e14e17707f905390512","modified":1696432534784},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1696432534794},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"91dbf3ca5c3a613d4e30618c120da535bf2d0336","modified":1696432534792},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1696432534831},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1696432534587},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1696432534624},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1696432534669},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1696432534621},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1696432534643},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1696432534597},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1696432534596},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1696432534613},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1696432534610},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1696432534632},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1696432534620},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1696432534638},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1696432534632},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1696432534673},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1696432534586},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1696432534641},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1696432534639},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1696432534617},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1696432534635},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1696432534662},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1696432534646},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1696432534818},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1696432534680},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1696432534803},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1696432534805},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1696432534875},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1696432534819},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1696432534859},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"56d5b7ff73f466c9ae54f7204ae899281295d749","modified":1696432534847},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"7369928305330c73ae0b3f063a681a8384d8fde4","modified":1696432534848},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1696432534849},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1696432534850},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"1191f1bfa5c43e54be8e5b3cc0d802984e161747","modified":1696432534852},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1696432534851},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1696432534856},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1696432534854},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"04cf4a69537fc14d3b8904f965d283356853847f","modified":1696432534855},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1696432534813},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1696432534809},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1696432534819},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1696432534835},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1696432534877},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1696432534861},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1696432534802},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1696432534820},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"bbbc40b03cb299d2a6a568f329b2ce98e1cdc430","modified":1696432534836},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1696432534821},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1696432534869},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1696432534870},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"da5e88f8debd5ac8d7af5c6ba6240df66104955f","modified":1696432534823},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1696432534815},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1696432534862},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1696432534864},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1696432534865},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1696432534863},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1696432534858},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1696432534866},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1696432534867},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1696432534808},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"9a7c71560fbdc936ad4e736fe15063ea3e8a644b","modified":1696432534868},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1696432534871},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1696432534826},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"138f78147bc6bd6005f329ada34dc79b7625542d","modified":1696432534824},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1696432534832},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1696432534811},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1696432534800},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1696432534816},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1696432534845},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1696432534837},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"33dd6ad015dde65fd46f34961655442e8e82b52e","modified":1696432534874},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1696432534833},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1696432534878},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1696432534843},{"_id":"public/admin/config.json","hash":"0f204a7436b4c35b2208e144a94222f8444ad8ad","modified":1696434706934},{"_id":"public/search.xml","hash":"54bddfb1de53601e5ab9fcddfd2f69cdb3fae43f","modified":1696434706934},{"_id":"public/about/index.html","hash":"f600c01a6a7ed4d35f949f9946dc92051d2af014","modified":1696434706934},{"_id":"public/admin/index.html","hash":"7c2457eff71096591bacdb09744943637623780d","modified":1696434706934},{"_id":"public/categories/index.html","hash":"b5e1d95d01f28801b671a0534b8c04bc08a229c1","modified":1696434706934},{"_id":"public/tags/index.html","hash":"8b4601577f1eb5b88205ba933a15d965d6a4e2fb","modified":1696434706934},{"_id":"public/tags/AtCoder/index.html","hash":"088f78188c2bc1e971a8cb43985c5f1219bd80fd","modified":1696434706934},{"_id":"public/2023/10/04/洛谷 P9577 Dead Cells 题解/index.html","hash":"12c064ac3feb5cd2359624cc724001756ee3d470","modified":1696434706934},{"_id":"public/2023/10/04/[ARC161B] Exactly Three Bits 题解/index.html","hash":"e6bc800195f1c3e1490aa7a004462029f8051994","modified":1696434706934},{"_id":"public/2023/10/04/[ARC165A] Sum equals LCM 题解/index.html","hash":"f5e9a6fe2e2319afa44f32f9d345c0a12cba8b30","modified":1696434706934},{"_id":"public/2023/10/04/[ARC133E] Cyclic Medians 题解/index.html","hash":"8b66944ff4c9dd1cd91238f530c6d18f8edfc95c","modified":1696434706934},{"_id":"public/2023/10/04/[CF1582C] Grandma Capa Knits a Scarf 题解/index.html","hash":"ffdaf5549641a1e02a5978069de0e1c391acc45c","modified":1696434706934},{"_id":"public/2023/10/04/[ARC160B] Triple Pair 题解/index.html","hash":"6afb7e5d2e0f59dc3d1a6d9c7820e78c569bb361","modified":1696434706934},{"_id":"public/2023/10/04/[ARC161A] Make M 题解/index.html","hash":"3dc42621c2e5c90825cfc8e636ecc02a8f24887d","modified":1696434706934},{"_id":"public/2023/10/04/P9538 「AWOI Round 2 A」最大和 题解/index.html","hash":"09a25bffbdf862cc14ba8d5dfabfc107faa5a3fb","modified":1696434706934},{"_id":"public/2023/10/04/[ABC301C] AtCoder Cards 题解/index.html","hash":"b4a6d47940dcfb173afe7c356c1c8f98dc4376b5","modified":1696434706934},{"_id":"public/2023/10/04/[ABC301D] Bitmask 题解/index.html","hash":"83a9a1c025eb8fc88b1328440ecf26e2ee1f0070","modified":1696434706934},{"_id":"public/2023/10/04/P9033「KDOI-04」XOR Sum 题解/index.html","hash":"34165bae68dfb0f6e895685e9a1778066b69e7f5","modified":1696434706934},{"_id":"public/2023/10/04/P9504 『MGOI』Simple Round I _ C. 魔法禁林 题解/index.html","hash":"6d22949b0223fdd5737540735a5c0cc4833b176b","modified":1696434706934},{"_id":"public/2023/10/04/P5769 [JSOI2016]飞机调度 题解/index.html","hash":"d7614f512509ff26c1164ea1308ce3fdbebe9842","modified":1696434706934},{"_id":"public/2023/10/04/P7624 [AHOI2021初中组] 地铁 题解/index.html","hash":"6de64fc4449524d6997d4b875589936e7a8982a0","modified":1696434706934},{"_id":"public/2023/10/04/P8924 题解/index.html","hash":"3bb01adcd214c06b6d031cd8779f2012b218db11","modified":1696434706934},{"_id":"public/2023/10/04/CF587A Duff and Weight Lifting 题解/index.html","hash":"783484111be09f1b4439f266ca7308c7b8e8ee41","modified":1696434706934},{"_id":"public/2023/10/04/CF878E Numbers on the blackboard 题解/index.html","hash":"a21809c11e7746bb7cd653172c817bcce909b638","modified":1696434706934},{"_id":"public/2023/10/04/P4216 [SCOI2015] 情报传递 题解/index.html","hash":"f438a5c92786cde0b41638b95402a60154f63cb4","modified":1696434706934},{"_id":"public/2023/10/04/CF1864D Matrix Cascade 题解/index.html","hash":"d79dcabdc0febbb55a5817044e4ec8b6facad882","modified":1696434706934},{"_id":"public/2023/10/04/CF485B Valuable Resources 题解/index.html","hash":"ba2cd04a41f82e091d63c67f8eec948b0a1cc049","modified":1696434706934},{"_id":"public/2023/10/04/CF1864B Swap and Reverse 题解/index.html","hash":"2c590cdf932c0e286788f125da5e7c322b37b96d","modified":1696434706934},{"_id":"public/2023/10/04/CF1864C Divisor Chain 题解/index.html","hash":"cd56f590d2fb7607b64ac90b9af01407c88a2627","modified":1696434706934},{"_id":"public/2023/10/04/CF1863B Split Sort 题解/index.html","hash":"c30992b78f77ae6b30882822ce3d78a85ea0e74d","modified":1696434706934},{"_id":"public/2023/10/04/CF1863C MEX Repetition 题解/index.html","hash":"ba86ff66a2e7be3c7a973c10907e3530932135f9","modified":1696434706934},{"_id":"public/2023/10/04/CF1863D Two-Colored Dominoes 题解/index.html","hash":"0b78dcd5d4986fde91177c2c2c76fd4347c4fafd","modified":1696434706934},{"_id":"public/2023/10/04/CF1854D Michael and Hotel 题解/index.html","hash":"8f235db7f7d33b482152f229f6726da698c2fb98","modified":1696434706934},{"_id":"public/2023/10/04/CF1855B Longest Divisors Interval 题解/index.html","hash":"e36681406be3b9cb0f479d6e0d6316ef7a5f021d","modified":1696434706934},{"_id":"public/2023/10/04/CF1856E PermuTree 题解/index.html","hash":"ab6af7f9de98cec9f2852fe4957268a57d500704","modified":1696434706934},{"_id":"public/2023/10/04/CF1852B Imbalanced Arrays 题解/index.html","hash":"a659918573b30880f13ab10692350bc57f16c116","modified":1696434706934},{"_id":"public/2023/10/04/CF1854B Earn or Unlock 题解/index.html","hash":"b663733bf5e1395f56cdcf55b7fb8092182822c4","modified":1696434706934},{"_id":"public/2023/10/04/CF1832B Maximum Sum 题解/index.html","hash":"97f8fde3099622a58891c71f8528e22a27bb4383","modified":1696434706934},{"_id":"public/2023/10/04/CF1833B Restore the Weather 题解/index.html","hash":"cbf631ea3a3a50de3d5883f82972f50b3cfc46ae","modified":1696434706934},{"_id":"public/2023/10/04/CF1852A Ntarsis' Set 题解/index.html","hash":"afaab76bbb66e7974cb829dd39ceb0efd06b3b6a","modified":1696434706934},{"_id":"public/2023/10/04/CF1778C Flexible String 题解/index.html","hash":"b11035cd4cb929a8ad2adcea6912c58f99fdc290","modified":1696434706934},{"_id":"public/2023/10/04/CF1828B Permutation Swap 题解/index.html","hash":"f54ce8050249097eac1dd94f976179c68b7d8563","modified":1696434706934},{"_id":"public/2023/10/04/CF1667A 题解/index.html","hash":"843a480b518ed4095e044ee040e64697aad2352d","modified":1696434706934},{"_id":"public/2023/10/04/CF1767C Count Binary Strings 题解/index.html","hash":"65b9af4e242a2f2b369e18b587a0378f92b1869b","modified":1696434706934},{"_id":"public/2023/10/04/CF1512D Permutation by Sum 题解/index.html","hash":"72212be052b12d2cb4c9c1736a88c3c15b3a6f83","modified":1696434706934},{"_id":"public/2023/10/04/CF1512C A-B Palindrome 题解/index.html","hash":"35e71348fbe9a2e5aba2636a41ce0477ae817c6f","modified":1696434706934},{"_id":"public/2023/10/04/CF1580D Subsequence 题解/index.html","hash":"2c5b900a3153100de4497021d1da0184e080821c","modified":1696434706934},{"_id":"public/2023/10/04/CF1394D Boboniu and Jianghu 题解/index.html","hash":"900fa55fa6f0d7a7ff20999ad20050b443b9a1bd","modified":1696434706934},{"_id":"public/2023/10/04/CF14D Two Paths题解/index.html","hash":"48fc77f8f668ae29678dbe466775a96c2b9f6312","modified":1696434706934},{"_id":"public/2023/10/04/AT_arc165_c [ARC165C] Social Distance on Graph 题解/index.html","hash":"d39f5964dfd35b8ed969f3b4e86e73ee91d9309a","modified":1696434706934},{"_id":"public/2023/10/04/AT_arc165_d [ARC165D] Substring Comparison 题解/index.html","hash":"2d5afbc6ca3f044616e1174fcdaf1e6298c6e9a9","modified":1696434706934},{"_id":"public/2023/10/04/CF1268B 题解/index.html","hash":"273bf975d98aed35afb6df1c24aab8ba3014c538","modified":1696434706934},{"_id":"public/2023/10/04/AT_abc318_e Sandwiches 题解/index.html","hash":"cd28f2b19145a0813492ca9359820aed44a8095b","modified":1696434706934},{"_id":"public/2023/10/04/AT_arc165_b [ARC165B] Sliding Window Sort 2 题解/index.html","hash":"0c898df4afb929b3b81f2cf4ee93c4c182ac3e81","modified":1696434706934},{"_id":"public/2023/10/04/AT_abc318_c Blue Spring 题解/index.html","hash":"267d3c75099f1802ed21c586e2753a116399c591","modified":1696434706934},{"_id":"public/2023/10/04/AT_abc318_d General Weighted Max Matching 题解/index.html","hash":"c7e0f5e86b89c5ba55de9f11345aa39238800aac","modified":1696434706934},{"_id":"public/2023/10/04/AT_abc306_h Balance Scale 题解/index.html","hash":"97ce319a172aadc1e309bc2eb2a799e481e32280","modified":1696434706934},{"_id":"public/archives/index.html","hash":"313d7328d50c6444e2b88a07cffe0cc9ac253ddb","modified":1696434706934},{"_id":"public/archives/page/2/index.html","hash":"db1e0becfd703cf40a4ba954aa22341ee01c490b","modified":1696434706934},{"_id":"public/archives/page/3/index.html","hash":"e982579a54597236691b52f7be456b56c80e8c5f","modified":1696434706934},{"_id":"public/archives/page/4/index.html","hash":"d798f48bdbec7aafdde194afd372df90a8dc99b6","modified":1696434706934},{"_id":"public/archives/page/5/index.html","hash":"e4e13bc7a52f8b3a467a410ab41ff3d290a1d5fe","modified":1696434706934},{"_id":"public/archives/2023/index.html","hash":"1e03fd9b5e10f55985e602aeaf99c042b4d04eab","modified":1696434706934},{"_id":"public/archives/2023/page/2/index.html","hash":"ca864dbc52d1bf07e6a315603557f94265abba59","modified":1696434706934},{"_id":"public/archives/2023/page/3/index.html","hash":"1395a755b3c44c66b600aaf03c37fce792e3b78f","modified":1696434706934},{"_id":"public/archives/2023/page/4/index.html","hash":"d3da9a0e0be60d277589f6e323af559e41ba08fa","modified":1696434706934},{"_id":"public/archives/2023/page/5/index.html","hash":"fb2f1901b735f8694a2434bc56e4560d6056a323","modified":1696434706934},{"_id":"public/archives/2023/10/index.html","hash":"d34b973e1b4d243b8385c992877812f716e67b22","modified":1696434706934},{"_id":"public/archives/2023/10/page/2/index.html","hash":"4c3094b7a5875692278c605b21315251ed9ee765","modified":1696434706934},{"_id":"public/archives/2023/10/page/3/index.html","hash":"cf405723b8c3bd9fa063ea68b5a187dbcbc7b37f","modified":1696434706934},{"_id":"public/archives/2023/10/page/4/index.html","hash":"38faf6a7ce65d75ad0f25eac3e729a663ff9550c","modified":1696434706934},{"_id":"public/archives/2023/10/page/5/index.html","hash":"f7537923b7859f6f66cc99f88d303f3318fec87e","modified":1696434706934},{"_id":"public/index.html","hash":"50a960b2dbec8a9973539c9913a9bd13012586e9","modified":1696434706934},{"_id":"public/page/2/index.html","hash":"9258745b50282a5aee5fbe7c3d07ced7ea8d7133","modified":1696434706934},{"_id":"public/page/3/index.html","hash":"269ee4d0db28c33b5f73594657c01095c685cca7","modified":1696434706934},{"_id":"public/page/4/index.html","hash":"f257e08c20dedc6f41d434454e98e840cedcc063","modified":1696434706934},{"_id":"public/page/5/index.html","hash":"d58fe51018dbdc063d667695d924798cecf8a049","modified":1696434706934},{"_id":"public/tags/Codeforces/index.html","hash":"2eb62b706e1d1e65aad95f51d9563d86768fab32","modified":1696434706934},{"_id":"public/tags/Codeforces/page/2/index.html","hash":"625ae52a2ad5c0debd9cd0f9da5c68785920a071","modified":1696434706934},{"_id":"public/tags/Codeforces/page/3/index.html","hash":"6a43a92d5c0da32309ca12cfce6eba0a27f58e60","modified":1696434706934},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1696434706934},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1696434706934},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1696434706934},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1696434706934},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1696434706934},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1696434706934},{"_id":"public/css/spoiler.css","hash":"32d47611e4ddd56edb22c6e76b0748af9e2a7abb","modified":1696434706934},{"_id":"public/js/spoiler.js","hash":"bbcbcbb9e77933929819ad65345955df6d22246a","modified":1696434706934},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1696434706934},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1696434706934},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1696434706934},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1696434706934},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1696434706934},{"_id":"public/js/motion.js","hash":"770d63c26f22705311028a36b52e999cc8a2da82","modified":1696434706934},{"_id":"public/js/next-boot.js","hash":"745bd828205da7e5fbd3f860cc3697097630f5f3","modified":1696434706934},{"_id":"public/js/schemes/muse.js","hash":"ba7ba2c129d1f240c6a22cec3e53f3f22af64b6b","modified":1696434706934},{"_id":"public/js/pjax.js","hash":"b03ba78c6916ad2f390d55bc1bc18fafb64b0ebf","modified":1696434706934},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1696434706934},{"_id":"public/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1696434706934},{"_id":"public/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1696434706934},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1696434706934},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1696434706934},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1696434706934},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1696434706934},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1696434706934},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1696434706934},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1696434706934},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1696434706934},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1696434706934},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1696434706934},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1696434706934},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1696434706934},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1696434706934},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1696434706934},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1696434706934},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1696434706934},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1696434706934},{"_id":"public/js/third-party/search/algolia-search.js","hash":"fdb7b7cef1a147d897e7f7cd8903b58368ec2062","modified":1696434706934},{"_id":"public/js/third-party/search/local-search.js","hash":"4536cb6d0a9bbaaa86fab3fa0101f6a3a3ec5a76","modified":1696434706934},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1696434706934},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1696434706934},{"_id":"public/js/third-party/tags/mermaid.js","hash":"6bf821310342c5b87a631873e7650a475a0765f1","modified":1696434706934},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1696434706934},{"_id":"public/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1696434706934},{"_id":"public/css/main.css","hash":"014e39683d9d74850691e1de6448436dac4619f0","modified":1696434706934},{"_id":"public/js/utils.js","hash":"d775148c2bf20c028622af5609a788167352bf1e","modified":1696434706934}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2023-10-04T07:43:17.000Z","type":"about","_content":"\n\n喜报：`// freopen`","source":"about/index.md","raw":"---\ntitle: about\ndate: 2023-10-04 15:43:17\ntype: \"about\"\n---\n\n\n喜报：`// freopen`","updated":"2023-10-04T14:11:08.262Z","path":"about/index.html","comments":1,"layout":"page","_id":"clnbxf9xw0000osjag4fd9q0r","content":"<p>喜报：<code>// freopen</code></p>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<p>喜报：<code>// freopen</code></p>\r\n"},{"_content":"backend:\n  name: github\n  repo: main\n  branch: main # Branch to update (optional; defaults to master)\n\nsite_url: https://cc11.netlify.app/\ndisplay_url: https://cc11.netlify.app/\n# logo_url: https://shwst.one/images/\nlocale: 'cn'\n\n# This line should *not* be indented\npublish_mode: editorial_workflow\n\n# This line should *not* be indented\nmedia_folder: \"source/images\" # Media files will be stored in the repo under images/uploads\npublic_folder: \"source\"\n\n# A list of collections the CMS should be able to edit\ncollections:\n  # Used in routes, ie. : /admin/collections/:slug/edit\n  - name: \"posts\"\n    # Used in the UI, ie.: \"New Post\"\n    label: \"Post\"\n    folder: \"source/_posts\" # The path to the folder where the documents are stored\n    sort: \"date:desc\"\n    create: true # Allow users to create new documents in this collection\n    editor:\n      preview: true\n    fields: # The fields each document in this collection have\n      - {label: \"Title\", name: \"title\", widget: \"string\"}\n      - {label: \"Publish Date\", name: \"date\", widget: \"datetime\", format: \"YYYY-MM-DD HH:mm:ss\", date_format: \"YYYY-MM-DD\", time_format: \"HH:mm:ss\", required: false}\n      - {label: \"Update Date\", name: \"updateDate\", widget: \"datetime\", format: \"YYYY-MM-DD HH:mm:ss\", date_format: \"YYYY-MM-DD\", time_format: \"HH:mm:ss\", required: false}\n      - {label: \"Tags\", name: \"tags\", widget: \"list\", required: false}\n      - {label: \"Categories\", name: \"categories\", widget: \"list\", required: false}\n      - {label: \"Body\", name: \"body\", widget: \"markdown\", required: false}\n      - {label: \"Comments\", name: \"comments\", widget: \"boolean\", default: true, required: false}\n      - {label: \"Top\", name: \"top\", widget: \"number\", value_type: \"int\", default: 2, required: false}\n","source":"admin/config.yml","raw":"backend:\n  name: github\n  repo: main\n  branch: main # Branch to update (optional; defaults to master)\n\nsite_url: https://cc11.netlify.app/\ndisplay_url: https://cc11.netlify.app/\n# logo_url: https://shwst.one/images/\nlocale: 'cn'\n\n# This line should *not* be indented\npublish_mode: editorial_workflow\n\n# This line should *not* be indented\nmedia_folder: \"source/images\" # Media files will be stored in the repo under images/uploads\npublic_folder: \"source\"\n\n# A list of collections the CMS should be able to edit\ncollections:\n  # Used in routes, ie. : /admin/collections/:slug/edit\n  - name: \"posts\"\n    # Used in the UI, ie.: \"New Post\"\n    label: \"Post\"\n    folder: \"source/_posts\" # The path to the folder where the documents are stored\n    sort: \"date:desc\"\n    create: true # Allow users to create new documents in this collection\n    editor:\n      preview: true\n    fields: # The fields each document in this collection have\n      - {label: \"Title\", name: \"title\", widget: \"string\"}\n      - {label: \"Publish Date\", name: \"date\", widget: \"datetime\", format: \"YYYY-MM-DD HH:mm:ss\", date_format: \"YYYY-MM-DD\", time_format: \"HH:mm:ss\", required: false}\n      - {label: \"Update Date\", name: \"updateDate\", widget: \"datetime\", format: \"YYYY-MM-DD HH:mm:ss\", date_format: \"YYYY-MM-DD\", time_format: \"HH:mm:ss\", required: false}\n      - {label: \"Tags\", name: \"tags\", widget: \"list\", required: false}\n      - {label: \"Categories\", name: \"categories\", widget: \"list\", required: false}\n      - {label: \"Body\", name: \"body\", widget: \"markdown\", required: false}\n      - {label: \"Comments\", name: \"comments\", widget: \"boolean\", default: true, required: false}\n      - {label: \"Top\", name: \"top\", widget: \"number\", value_type: \"int\", default: 2, required: false}\n","date":"2023-10-04T15:36:46.484Z","updated":"2023-10-04T15:36:46.484Z","path":"admin/config.json","layout":"false","title":"","comments":1,"_id":"clnbxf9y50002osja2hlp0xy2","content":"{\"backend\":{\"name\":\"github\",\"repo\":\"main\",\"branch\":\"main\"},\"site_url\":\"https://cc11.netlify.app/\",\"display_url\":\"https://cc11.netlify.app/\",\"locale\":\"cn\",\"publish_mode\":\"editorial_workflow\",\"media_folder\":\"source/images\",\"public_folder\":\"source\",\"collections\":[{\"name\":\"posts\",\"label\":\"Post\",\"folder\":\"source/_posts\",\"sort\":\"date:desc\",\"create\":true,\"editor\":{\"preview\":true},\"fields\":[{\"label\":\"Title\",\"name\":\"title\",\"widget\":\"string\"},{\"label\":\"Publish Date\",\"name\":\"date\",\"widget\":\"datetime\",\"format\":\"YYYY-MM-DD HH:mm:ss\",\"date_format\":\"YYYY-MM-DD\",\"time_format\":\"HH:mm:ss\",\"required\":false},{\"label\":\"Update Date\",\"name\":\"updateDate\",\"widget\":\"datetime\",\"format\":\"YYYY-MM-DD HH:mm:ss\",\"date_format\":\"YYYY-MM-DD\",\"time_format\":\"HH:mm:ss\",\"required\":false},{\"label\":\"Tags\",\"name\":\"tags\",\"widget\":\"list\",\"required\":false},{\"label\":\"Categories\",\"name\":\"categories\",\"widget\":\"list\",\"required\":false},{\"label\":\"Body\",\"name\":\"body\",\"widget\":\"markdown\",\"required\":false},{\"label\":\"Comments\",\"name\":\"comments\",\"widget\":\"boolean\",\"default\":true,\"required\":false},{\"label\":\"Top\",\"name\":\"top\",\"widget\":\"number\",\"value_type\":\"int\",\"default\":2,\"required\":false}]}]}","site":{"data":{}}},{"_content":"<!doctype html>\n<html>\n\n<head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta name=\"robots\" content=\"noindex\" />\n    <title>Content Manager</title>\n</head>\n\n<body>\n    <!-- Include the script that builds the page and powers Decap CMS -->\n    <script src=\"https://unpkg.com/decap-cms@^3.0.0/dist/decap-cms.js\"></script>\n</body>\n\n</html>","source":"admin/index.html","raw":"<!doctype html>\n<html>\n\n<head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta name=\"robots\" content=\"noindex\" />\n    <title>Content Manager</title>\n</head>\n\n<body>\n    <!-- Include the script that builds the page and powers Decap CMS -->\n    <script src=\"https://unpkg.com/decap-cms@^3.0.0/dist/decap-cms.js\"></script>\n</body>\n\n</html>","date":"2023-10-04T15:27:17.946Z","updated":"2023-10-04T15:27:17.946Z","path":"admin/index.html","title":"","comments":1,"layout":"page","_id":"clnbxf9ya0005osja1f6i9drk","content":"<!doctype html>\n<html>\n\n<head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta name=\"robots\" content=\"noindex\" />\n    <title>Content Manager</title>\n</head>\n\n<body>\n    <!-- Include the script that builds the page and powers Decap CMS -->\n    <script src=\"https://unpkg.com/decap-cms@^3.0.0/dist/decap-cms.js\"></script>\n</body>\n\n</html><link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"<!doctype html>\n<html>\n\n<head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta name=\"robots\" content=\"noindex\" />\n    <title>Content Manager</title>\n</head>\n\n<body>\n    <!-- Include the script that builds the page and powers Decap CMS -->\n    <script src=\"https://unpkg.com/decap-cms@^3.0.0/dist/decap-cms.js\"></script>\n</body>\n\n</html>"},{"title":"categories","date":"2023-10-04T07:43:13.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-10-04 15:43:13\ntype: \"categories\"\n---\n","updated":"2023-10-04T14:11:08.262Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clnbxf9yc0007osjad3n8fxmw","content":"\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"\r\n"},{"title":"tags","date":"2023-10-04T07:43:15.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-10-04 15:43:15\ntype: \"tags\"\n---\n","updated":"2023-10-04T14:11:08.262Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clnbxf9ye0009osja1zveba2n","content":"\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"","more":"\r\n"}],"Post":[{"title":"AT_abc306_h Balance Scale 题解","mathjax":true,"_content":"\n# AT_abc306_h Balance Scale 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/AT_abc306_h)\n\n[AtCoder](https://atcoder.jp/contests/abc306/tasks/abc306_h)\n\n## Description\n\n有 $N$ 个编号为 $1,2,\\dots,N$ 的砝码。有 $M$ 次比较操作，每次比较砝码 $A_{i}$ 和 $B_{i}$，$A_{i}$ 在左侧。\n\n分为三种情况：\n1. 左边的砝码更重。\n2. 右边的砝码更重。\n3. 两边的砝码重量相同。\n\n将每次比较的结果使用字符“>”、“=”或“<”记录下来，形成一个长度为 $M$ 的字符串 $S$。求一共有多少种可能的 $S$。答案对 $998\\,244\\,353$ 取模。\n\n## Solution\n\n考虑如何对一组确定的砝码判断是否可行，若 $A_{i} < B_{i}$ 从 $A_{i}$ 所在集合向 $B_{i}$ 所在集合连边，若 $A_{i} > B_{i}$ 从 $B_{i}$ 所在集合向 $A_{i}$ 所在集合连边，相等利用并查集合并。如果出现环了无解。\n\n但每条边的方向不知道，考虑到数据范围很小，可以使用状压 dp 枚举一个独立集，表示初始度数为 $0$ 的点。当我们删去其中度数为 $0$ 的点时，仍满足条件，因此我们有转移状态：\n\n$$dp_{i} = \\sum_{s \\subset i,s \\neq \\emptyset} dp_{i \\setminus s}$$\n\n但这样是错误的，某个集合本身被计算了，但他同时会作为另一个集合的子集被计算。我们容斥掉这些情况即可，考虑集合被算的次数与集合大小有关，简单的推出下面正确的转移方程。\n\n$$dp_{i} = \\sum_{s \\subset i,s \\neq \\emptyset} dp_{i \\setminus s} \\times {(-1)^{ \\left ( \\left |s \\right |+1 \\right )}}$$\n\n其中 $\\left |s \\right |$ 表示集合 $s$ 的元素个数。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long \n#define max_n 410101\n#define mo 998244353\nvoid read(int &p)\n{\n    int k = 1;\n    p = 0;\n    char c = getchar();\n    while(c < '0' || c > '9')\n    {\n        if(c == '-')\n        {\n            k =  -1;\n        }\n        c = getchar();\n    }\n    while(c >='0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return ;\n}\nvoid write_(int x)\n{\n    if(x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if(x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint n,m;\nint fa[max_n],dp[max_n];\npair<int,int> edge[max_n];\nint can[max_n];\nint find(int x)\n{\n    if(fa[x] == x)\n    {\n        return x;\n    }\n    return fa[x] = find(fa[x]);\n}\nvoid init()\n{\n    for(int i = 1;i <= n;i++)\n    {\n        fa[i] = i;\n    }\n}\nint lowbit(int x)\n{\n    return (-x) & x;\n}\nint popcount(int x)\n{\n    int cnt = 0;\n    while(x)\n    {\n        ++cnt;\n        x -= lowbit(x);\n    }\n    return cnt;\n}\nsigned main()\n{\n    read(n),read(m);\n    for(int i = 1;i <= m;i++)\n    {\n        read(edge[i].first),read(edge[i].second);\n    }\n    for(int i = 0;i < (1LL << n);i++)\n    {\n        can[i] = popcount(i);\n        init();\n        for(int j = 1;j <= m;j++)\n        {\n            // 两个点都在集合中\n            if((i & (1 << edge[j].first - 1)) && (i & (1 << edge[j].second - 1)))\n            {\n                // 合并\n                if(find(edge[j].first) != find(edge[j].second))\n                {\n                    fa[find(edge[j].first)] = find(edge[j].second);\n                    // 注意集合大小要减 1\n                    --can[i];\n                }\n            }\n        }\n    }\n    dp[0] = 1;\n    for(int i = 1;i < (1 << n);i++)\n    {\n        for(int j = i;j;j = i &(j - 1))\n        {\n            if(can[j] & 1)\n            {\n                dp[i] += dp[i ^ j];\n            }\n            else\n            {\n                dp[i] += mo - dp[i ^ j];\n            }\n            (dp[i] += mo)%= mo;\n        }\n    }\n    writeln(dp[(1 << n) - 1]);\n    return 0;\n}\n```","source":"_posts/AT_abc306_h Balance Scale 题解.md","raw":"---\ntitle: \"AT_abc306_h Balance Scale 题解\"\ntag: AtCoder\nmathjax: true\n---\n\n# AT_abc306_h Balance Scale 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/AT_abc306_h)\n\n[AtCoder](https://atcoder.jp/contests/abc306/tasks/abc306_h)\n\n## Description\n\n有 $N$ 个编号为 $1,2,\\dots,N$ 的砝码。有 $M$ 次比较操作，每次比较砝码 $A_{i}$ 和 $B_{i}$，$A_{i}$ 在左侧。\n\n分为三种情况：\n1. 左边的砝码更重。\n2. 右边的砝码更重。\n3. 两边的砝码重量相同。\n\n将每次比较的结果使用字符“>”、“=”或“<”记录下来，形成一个长度为 $M$ 的字符串 $S$。求一共有多少种可能的 $S$。答案对 $998\\,244\\,353$ 取模。\n\n## Solution\n\n考虑如何对一组确定的砝码判断是否可行，若 $A_{i} < B_{i}$ 从 $A_{i}$ 所在集合向 $B_{i}$ 所在集合连边，若 $A_{i} > B_{i}$ 从 $B_{i}$ 所在集合向 $A_{i}$ 所在集合连边，相等利用并查集合并。如果出现环了无解。\n\n但每条边的方向不知道，考虑到数据范围很小，可以使用状压 dp 枚举一个独立集，表示初始度数为 $0$ 的点。当我们删去其中度数为 $0$ 的点时，仍满足条件，因此我们有转移状态：\n\n$$dp_{i} = \\sum_{s \\subset i,s \\neq \\emptyset} dp_{i \\setminus s}$$\n\n但这样是错误的，某个集合本身被计算了，但他同时会作为另一个集合的子集被计算。我们容斥掉这些情况即可，考虑集合被算的次数与集合大小有关，简单的推出下面正确的转移方程。\n\n$$dp_{i} = \\sum_{s \\subset i,s \\neq \\emptyset} dp_{i \\setminus s} \\times {(-1)^{ \\left ( \\left |s \\right |+1 \\right )}}$$\n\n其中 $\\left |s \\right |$ 表示集合 $s$ 的元素个数。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long \n#define max_n 410101\n#define mo 998244353\nvoid read(int &p)\n{\n    int k = 1;\n    p = 0;\n    char c = getchar();\n    while(c < '0' || c > '9')\n    {\n        if(c == '-')\n        {\n            k =  -1;\n        }\n        c = getchar();\n    }\n    while(c >='0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return ;\n}\nvoid write_(int x)\n{\n    if(x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if(x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint n,m;\nint fa[max_n],dp[max_n];\npair<int,int> edge[max_n];\nint can[max_n];\nint find(int x)\n{\n    if(fa[x] == x)\n    {\n        return x;\n    }\n    return fa[x] = find(fa[x]);\n}\nvoid init()\n{\n    for(int i = 1;i <= n;i++)\n    {\n        fa[i] = i;\n    }\n}\nint lowbit(int x)\n{\n    return (-x) & x;\n}\nint popcount(int x)\n{\n    int cnt = 0;\n    while(x)\n    {\n        ++cnt;\n        x -= lowbit(x);\n    }\n    return cnt;\n}\nsigned main()\n{\n    read(n),read(m);\n    for(int i = 1;i <= m;i++)\n    {\n        read(edge[i].first),read(edge[i].second);\n    }\n    for(int i = 0;i < (1LL << n);i++)\n    {\n        can[i] = popcount(i);\n        init();\n        for(int j = 1;j <= m;j++)\n        {\n            // 两个点都在集合中\n            if((i & (1 << edge[j].first - 1)) && (i & (1 << edge[j].second - 1)))\n            {\n                // 合并\n                if(find(edge[j].first) != find(edge[j].second))\n                {\n                    fa[find(edge[j].first)] = find(edge[j].second);\n                    // 注意集合大小要减 1\n                    --can[i];\n                }\n            }\n        }\n    }\n    dp[0] = 1;\n    for(int i = 1;i < (1 << n);i++)\n    {\n        for(int j = i;j;j = i &(j - 1))\n        {\n            if(can[j] & 1)\n            {\n                dp[i] += dp[i ^ j];\n            }\n            else\n            {\n                dp[i] += mo - dp[i ^ j];\n            }\n            (dp[i] += mo)%= mo;\n        }\n    }\n    writeln(dp[(1 << n) - 1]);\n    return 0;\n}\n```","slug":"AT_abc306_h Balance Scale 题解","published":1,"date":"2023-10-04T14:11:08.241Z","updated":"2023-10-04T14:11:08.241Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9y00001osja2fu3g19n","content":"<h1 id=\"at_abc306_h-balance-scale-题解\">AT_abc306_h Balance Scale\r\n题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_abc306_h\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/abc306/tasks/abc306_h\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>有 <span class=\"math inline\">\\(N\\)</span> 个编号为 <span\r\nclass=\"math inline\">\\(1,2,\\dots,N\\)</span> 的砝码。有 <span\r\nclass=\"math inline\">\\(M\\)</span> 次比较操作，每次比较砝码 <span\r\nclass=\"math inline\">\\(A_{i}\\)</span> 和 <span\r\nclass=\"math inline\">\\(B_{i}\\)</span>，<span\r\nclass=\"math inline\">\\(A_{i}\\)</span> 在左侧。</p>\r\n<p>分为三种情况： 1. 左边的砝码更重。 2. 右边的砝码更重。 3.\r\n两边的砝码重量相同。</p>\r\n<p>将每次比较的结果使用字符“&gt;”、“=”或“&lt;”记录下来，形成一个长度为\r\n<span class=\"math inline\">\\(M\\)</span> 的字符串 <span\r\nclass=\"math inline\">\\(S\\)</span>。求一共有多少种可能的 <span\r\nclass=\"math inline\">\\(S\\)</span>。答案对 <span\r\nclass=\"math inline\">\\(998\\,244\\,353\\)</span> 取模。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>考虑如何对一组确定的砝码判断是否可行，若 <span\r\nclass=\"math inline\">\\(A_{i} &lt; B_{i}\\)</span> 从 <span\r\nclass=\"math inline\">\\(A_{i}\\)</span> 所在集合向 <span\r\nclass=\"math inline\">\\(B_{i}\\)</span> 所在集合连边，若 <span\r\nclass=\"math inline\">\\(A_{i} &gt; B_{i}\\)</span> 从 <span\r\nclass=\"math inline\">\\(B_{i}\\)</span> 所在集合向 <span\r\nclass=\"math inline\">\\(A_{i}\\)</span>\r\n所在集合连边，相等利用并查集合并。如果出现环了无解。</p>\r\n<p>但每条边的方向不知道，考虑到数据范围很小，可以使用状压 dp\r\n枚举一个独立集，表示初始度数为 <span class=\"math inline\">\\(0\\)</span>\r\n的点。当我们删去其中度数为 <span class=\"math inline\">\\(0\\)</span>\r\n的点时，仍满足条件，因此我们有转移状态：</p>\r\n<p><span class=\"math display\">\\[dp_{i} = \\sum_{s \\subset i,s \\neq\r\n\\emptyset} dp_{i \\setminus s}\\]</span></p>\r\n<p>但这样是错误的，某个集合本身被计算了，但他同时会作为另一个集合的子集被计算。我们容斥掉这些情况即可，考虑集合被算的次数与集合大小有关，简单的推出下面正确的转移方程。</p>\r\n<p><span class=\"math display\">\\[dp_{i} = \\sum_{s \\subset i,s \\neq\r\n\\emptyset} dp_{i \\setminus s} \\times {(-1)^{ \\left ( \\left |s \\right |+1\r\n\\right )}}\\]</span></p>\r\n<p>其中 <span class=\"math inline\">\\(\\left |s \\right |\\)</span> 表示集合\r\n<span class=\"math inline\">\\(s\\)</span> 的元素个数。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 410101</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mo 998244353</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k =  <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &gt;=<span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">int</span> fa[max_n],dp[max_n];</span><br><span class=\"line\">pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; edge[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> can[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fa[x] == x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fa[x] = <span class=\"built_in\">find</span>(fa[x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fa[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (-x) &amp; x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">popcount</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ++cnt;</span><br><span class=\"line\">        x -= <span class=\"built_in\">lowbit</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n),<span class=\"built_in\">read</span>(m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(edge[i].first),<span class=\"built_in\">read</span>(edge[i].second);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; (<span class=\"number\">1LL</span> &lt;&lt; n);i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        can[i] = <span class=\"built_in\">popcount</span>(i);</span><br><span class=\"line\">        <span class=\"built_in\">init</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>;j &lt;= m;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 两个点都在集合中</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>((i &amp; (<span class=\"number\">1</span> &lt;&lt; edge[j].first - <span class=\"number\">1</span>)) &amp;&amp; (i &amp; (<span class=\"number\">1</span> &lt;&lt; edge[j].second - <span class=\"number\">1</span>)))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 合并</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">find</span>(edge[j].first) != <span class=\"built_in\">find</span>(edge[j].second))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    fa[<span class=\"built_in\">find</span>(edge[j].first)] = <span class=\"built_in\">find</span>(edge[j].second);</span><br><span class=\"line\">                    <span class=\"comment\">// 注意集合大小要减 1</span></span><br><span class=\"line\">                    --can[i];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt; (<span class=\"number\">1</span> &lt;&lt; n);i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i;j;j = i &amp;(j - <span class=\"number\">1</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(can[j] &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dp[i] += dp[i ^ j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dp[i] += mo - dp[i ^ j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            (dp[i] += mo)%= mo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(dp[(<span class=\"number\">1</span> &lt;&lt; n) - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"at_abc306_h-balance-scale-题解\">AT_abc306_h Balance Scale\r\n题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_abc306_h\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/abc306/tasks/abc306_h\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>有 <span class=\"math inline\">\\(N\\)</span> 个编号为 <span\r\nclass=\"math inline\">\\(1,2,\\dots,N\\)</span> 的砝码。有 <span\r\nclass=\"math inline\">\\(M\\)</span> 次比较操作，每次比较砝码 <span\r\nclass=\"math inline\">\\(A_{i}\\)</span> 和 <span\r\nclass=\"math inline\">\\(B_{i}\\)</span>，<span\r\nclass=\"math inline\">\\(A_{i}\\)</span> 在左侧。</p>\r\n<p>分为三种情况： 1. 左边的砝码更重。 2. 右边的砝码更重。 3.\r\n两边的砝码重量相同。</p>\r\n<p>将每次比较的结果使用字符“&gt;”、“=”或“&lt;”记录下来，形成一个长度为\r\n<span class=\"math inline\">\\(M\\)</span> 的字符串 <span\r\nclass=\"math inline\">\\(S\\)</span>。求一共有多少种可能的 <span\r\nclass=\"math inline\">\\(S\\)</span>。答案对 <span\r\nclass=\"math inline\">\\(998\\,244\\,353\\)</span> 取模。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>考虑如何对一组确定的砝码判断是否可行，若 <span\r\nclass=\"math inline\">\\(A_{i} &lt; B_{i}\\)</span> 从 <span\r\nclass=\"math inline\">\\(A_{i}\\)</span> 所在集合向 <span\r\nclass=\"math inline\">\\(B_{i}\\)</span> 所在集合连边，若 <span\r\nclass=\"math inline\">\\(A_{i} &gt; B_{i}\\)</span> 从 <span\r\nclass=\"math inline\">\\(B_{i}\\)</span> 所在集合向 <span\r\nclass=\"math inline\">\\(A_{i}\\)</span>\r\n所在集合连边，相等利用并查集合并。如果出现环了无解。</p>\r\n<p>但每条边的方向不知道，考虑到数据范围很小，可以使用状压 dp\r\n枚举一个独立集，表示初始度数为 <span class=\"math inline\">\\(0\\)</span>\r\n的点。当我们删去其中度数为 <span class=\"math inline\">\\(0\\)</span>\r\n的点时，仍满足条件，因此我们有转移状态：</p>\r\n<p><span class=\"math display\">\\[dp_{i} = \\sum_{s \\subset i,s \\neq\r\n\\emptyset} dp_{i \\setminus s}\\]</span></p>\r\n<p>但这样是错误的，某个集合本身被计算了，但他同时会作为另一个集合的子集被计算。我们容斥掉这些情况即可，考虑集合被算的次数与集合大小有关，简单的推出下面正确的转移方程。</p>\r\n<p><span class=\"math display\">\\[dp_{i} = \\sum_{s \\subset i,s \\neq\r\n\\emptyset} dp_{i \\setminus s} \\times {(-1)^{ \\left ( \\left |s \\right |+1\r\n\\right )}}\\]</span></p>\r\n<p>其中 <span class=\"math inline\">\\(\\left |s \\right |\\)</span> 表示集合\r\n<span class=\"math inline\">\\(s\\)</span> 的元素个数。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 410101</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mo 998244353</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k =  <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &gt;=<span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">int</span> fa[max_n],dp[max_n];</span><br><span class=\"line\">pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; edge[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> can[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fa[x] == x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fa[x] = <span class=\"built_in\">find</span>(fa[x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fa[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (-x) &amp; x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">popcount</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ++cnt;</span><br><span class=\"line\">        x -= <span class=\"built_in\">lowbit</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n),<span class=\"built_in\">read</span>(m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(edge[i].first),<span class=\"built_in\">read</span>(edge[i].second);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; (<span class=\"number\">1LL</span> &lt;&lt; n);i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        can[i] = <span class=\"built_in\">popcount</span>(i);</span><br><span class=\"line\">        <span class=\"built_in\">init</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>;j &lt;= m;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 两个点都在集合中</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>((i &amp; (<span class=\"number\">1</span> &lt;&lt; edge[j].first - <span class=\"number\">1</span>)) &amp;&amp; (i &amp; (<span class=\"number\">1</span> &lt;&lt; edge[j].second - <span class=\"number\">1</span>)))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 合并</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"built_in\">find</span>(edge[j].first) != <span class=\"built_in\">find</span>(edge[j].second))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    fa[<span class=\"built_in\">find</span>(edge[j].first)] = <span class=\"built_in\">find</span>(edge[j].second);</span><br><span class=\"line\">                    <span class=\"comment\">// 注意集合大小要减 1</span></span><br><span class=\"line\">                    --can[i];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt; (<span class=\"number\">1</span> &lt;&lt; n);i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i;j;j = i &amp;(j - <span class=\"number\">1</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(can[j] &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dp[i] += dp[i ^ j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dp[i] += mo - dp[i ^ j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            (dp[i] += mo)%= mo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(dp[(<span class=\"number\">1</span> &lt;&lt; n) - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"AT_abc318_c Blue Spring 题解","mathjax":true,"_content":"\n# AT_abc318_c Blue Spring 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/AT_abc318_c)\n\n[AtCoder](https://atcoder.jp/contests/abc318/tasks/abc318_c)\n\n## Description\n\n你要进行一场旅行。第 $i$ 天的车票是 $F_{i}$ 元。你也可以选择用 $P$ 元买 $D$ 张通票，通票可以在任意一天使用，你可以多次购买通票，但每次必须购买 $D$ 的倍数张，求完成旅行的最小花费。\n\n## Solution\n\n很容易想到，只要我们能找到 $D$ 天车票的总价格大于 $P$，就用 $D$ 张通票代替即可。因此我们可以将单日车票按价格排序，每次取前 $D$ 个判断是否买通票即可。时间复杂度 $\\Omicron \\left(n\\log n \\right)$。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 510101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint n,d,p;\nint nums[max_n];\nsigned main()\n{\n    read(n),read(d),read(p);\n    for(int i = 1;i <= n;i++)\n    {\n        read(nums[i]);\n    }\n    sort(nums + 1,nums + n + 1);\n    reverse(nums + 1,nums + n + 1);\n    int ans = 0;\n    for(int i = 1;i <= n / d + 1;i++)\n    {\n        int sum1 = 0;\n        for(int j = (i - 1) * d + 1;j <= i * d && j <= n;j++)\n        {\n            sum1 += nums[j];\n        }\n        ans += min(sum1,p);\n    }\n    writeln(ans);\n    return 0;\n}\n```\n","source":"_posts/AT_abc318_c Blue Spring 题解.md","raw":"---\ntitle: \"AT_abc318_c Blue Spring 题解\"\ntag: AtCoder\nmathjax: true\n---\n\n# AT_abc318_c Blue Spring 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/AT_abc318_c)\n\n[AtCoder](https://atcoder.jp/contests/abc318/tasks/abc318_c)\n\n## Description\n\n你要进行一场旅行。第 $i$ 天的车票是 $F_{i}$ 元。你也可以选择用 $P$ 元买 $D$ 张通票，通票可以在任意一天使用，你可以多次购买通票，但每次必须购买 $D$ 的倍数张，求完成旅行的最小花费。\n\n## Solution\n\n很容易想到，只要我们能找到 $D$ 天车票的总价格大于 $P$，就用 $D$ 张通票代替即可。因此我们可以将单日车票按价格排序，每次取前 $D$ 个判断是否买通票即可。时间复杂度 $\\Omicron \\left(n\\log n \\right)$。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 510101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint n,d,p;\nint nums[max_n];\nsigned main()\n{\n    read(n),read(d),read(p);\n    for(int i = 1;i <= n;i++)\n    {\n        read(nums[i]);\n    }\n    sort(nums + 1,nums + n + 1);\n    reverse(nums + 1,nums + n + 1);\n    int ans = 0;\n    for(int i = 1;i <= n / d + 1;i++)\n    {\n        int sum1 = 0;\n        for(int j = (i - 1) * d + 1;j <= i * d && j <= n;j++)\n        {\n            sum1 += nums[j];\n        }\n        ans += min(sum1,p);\n    }\n    writeln(ans);\n    return 0;\n}\n```\n","slug":"AT_abc318_c Blue Spring 题解","published":1,"date":"2023-10-04T14:11:08.242Z","updated":"2023-10-04T14:11:08.242Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9y60003osjaa5jk1sg1","content":"<h1 id=\"at_abc318_c-blue-spring-题解\">AT_abc318_c Blue Spring 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_abc318_c\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/abc318/tasks/abc318_c\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>你要进行一场旅行。第 <span class=\"math inline\">\\(i\\)</span>\r\n天的车票是 <span class=\"math inline\">\\(F_{i}\\)</span> 元。你也可以选择用\r\n<span class=\"math inline\">\\(P\\)</span> 元买 <span\r\nclass=\"math inline\">\\(D\\)</span>\r\n张通票，通票可以在任意一天使用，你可以多次购买通票，但每次必须购买 <span\r\nclass=\"math inline\">\\(D\\)</span> 的倍数张，求完成旅行的最小花费。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>很容易想到，只要我们能找到 <span class=\"math inline\">\\(D\\)</span>\r\n天车票的总价格大于 <span class=\"math inline\">\\(P\\)</span>，就用 <span\r\nclass=\"math inline\">\\(D\\)</span>\r\n张通票代替即可。因此我们可以将单日车票按价格排序，每次取前 <span\r\nclass=\"math inline\">\\(D\\)</span> 个判断是否买通票即可。时间复杂度 <span\r\nclass=\"math inline\">\\(\\Omicron \\left(n\\log n \\right)\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 510101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,d,p;</span><br><span class=\"line\"><span class=\"type\">int</span> nums[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n),<span class=\"built_in\">read</span>(d),<span class=\"built_in\">read</span>(p);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(nums + <span class=\"number\">1</span>,nums + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(nums + <span class=\"number\">1</span>,nums + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n / d + <span class=\"number\">1</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> sum1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = (i - <span class=\"number\">1</span>) * d + <span class=\"number\">1</span>;j &lt;= i * d &amp;&amp; j &lt;= n;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            sum1 += nums[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans += <span class=\"built_in\">min</span>(sum1,p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"at_abc318_c-blue-spring-题解\">AT_abc318_c Blue Spring 题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_abc318_c\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/abc318/tasks/abc318_c\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>你要进行一场旅行。第 <span class=\"math inline\">\\(i\\)</span>\r\n天的车票是 <span class=\"math inline\">\\(F_{i}\\)</span> 元。你也可以选择用\r\n<span class=\"math inline\">\\(P\\)</span> 元买 <span\r\nclass=\"math inline\">\\(D\\)</span>\r\n张通票，通票可以在任意一天使用，你可以多次购买通票，但每次必须购买 <span\r\nclass=\"math inline\">\\(D\\)</span> 的倍数张，求完成旅行的最小花费。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>很容易想到，只要我们能找到 <span class=\"math inline\">\\(D\\)</span>\r\n天车票的总价格大于 <span class=\"math inline\">\\(P\\)</span>，就用 <span\r\nclass=\"math inline\">\\(D\\)</span>\r\n张通票代替即可。因此我们可以将单日车票按价格排序，每次取前 <span\r\nclass=\"math inline\">\\(D\\)</span> 个判断是否买通票即可。时间复杂度 <span\r\nclass=\"math inline\">\\(\\Omicron \\left(n\\log n \\right)\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 510101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,d,p;</span><br><span class=\"line\"><span class=\"type\">int</span> nums[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n),<span class=\"built_in\">read</span>(d),<span class=\"built_in\">read</span>(p);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(nums + <span class=\"number\">1</span>,nums + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(nums + <span class=\"number\">1</span>,nums + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n / d + <span class=\"number\">1</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> sum1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = (i - <span class=\"number\">1</span>) * d + <span class=\"number\">1</span>;j &lt;= i * d &amp;&amp; j &lt;= n;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            sum1 += nums[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans += <span class=\"built_in\">min</span>(sum1,p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"AT_abc318_d General Weighted Max Matching 题解","mathjax":true,"_content":"\n# AT_abc318_d General Weighted Max Matching 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/AT_abc318_d)\n\n[AtCoder](https://atcoder.jp/contests/abc318/tasks/abc318_d)\n\n## Description\n\n有一张 $n$ 个点的带权无向完全图，找出一些边使得这些边的端点没有重合且边权和最大。输出最大边权和。\n\n## Solution\n\n搜索即可，重点在于复杂度分析。都先我们确定一件事：一定会选择 $\\left \\lfloor \\frac{n}{2} \\right \\rfloor$ 条边，原因是边权非负，显然对于边数更少的我们可以多选边，答案更优。\n\n因此极限情况下要选 $8$ 条边。我们知道，$16$ 个点的无向完全图有 $\\frac{16 \\times 15}{2} = 120$ 条边。因此第一条边有 $120$ 种选择，之后，与这条边两个端点相连的就都不能选了，于是下一轮的可选边数是 $120 - 15 \\cdot 2 + 1 =  91$，以此类推，算出我们选边的方案数不超过 $10^{8}$。当然，我们选边是顺序无关的，因此我们搜索的时候可以强制按编号从小到大的顺序搜索。于是总方案为 $\\frac{10^{8}}{8!} < 3000$，复杂度优秀！\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define max_n 121\n#define int long long\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n\n        x = -x;\n    }\n    \n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint mp[20][20];\nint cnt,n;\nint vis[max_n];\nint ans = 0;\nstruct Line\n{\n    int u,v,w;\n}edge[max_n];\nvoid dfs(int now,int res,int ls)\n{\n    if(now + 2 > n)\n    {\n        ans = max(ans,res);\n        return ;\n    }\n    for(int i = ls + 1;i <= cnt;i++)\n    {\n        int u = edge[i].u,v = edge[i].v,w = edge[i].w;\n        if(vis[u] || vis[v])\n        {\n            continue;\n        }\n        vis[u] = vis[v] = 1;\n        dfs(now + 2,res + w,i);\n        vis[u] = vis[v] = 0;\n    }\n}\nsigned main()\n{\n    read(n);\n    for(register int i = 1,w;i < n;i++)\n    {\n        for(register int j = i + 1;j <= n;++j)\n        {\n            read(w);\n            edge[++cnt] = {i,j,w};\n        }\n    }\n    dfs(0,0,0);\n    writeln(ans);\n    return 0;\n}\n```\n","source":"_posts/AT_abc318_d General Weighted Max Matching 题解.md","raw":"---\ntitle: \"AT_abc318_d General Weighted Max Matching 题解\"\ntag: AtCoder\nmathjax: true\n---\n\n# AT_abc318_d General Weighted Max Matching 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/AT_abc318_d)\n\n[AtCoder](https://atcoder.jp/contests/abc318/tasks/abc318_d)\n\n## Description\n\n有一张 $n$ 个点的带权无向完全图，找出一些边使得这些边的端点没有重合且边权和最大。输出最大边权和。\n\n## Solution\n\n搜索即可，重点在于复杂度分析。都先我们确定一件事：一定会选择 $\\left \\lfloor \\frac{n}{2} \\right \\rfloor$ 条边，原因是边权非负，显然对于边数更少的我们可以多选边，答案更优。\n\n因此极限情况下要选 $8$ 条边。我们知道，$16$ 个点的无向完全图有 $\\frac{16 \\times 15}{2} = 120$ 条边。因此第一条边有 $120$ 种选择，之后，与这条边两个端点相连的就都不能选了，于是下一轮的可选边数是 $120 - 15 \\cdot 2 + 1 =  91$，以此类推，算出我们选边的方案数不超过 $10^{8}$。当然，我们选边是顺序无关的，因此我们搜索的时候可以强制按编号从小到大的顺序搜索。于是总方案为 $\\frac{10^{8}}{8!} < 3000$，复杂度优秀！\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define max_n 121\n#define int long long\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n\n        x = -x;\n    }\n    \n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint mp[20][20];\nint cnt,n;\nint vis[max_n];\nint ans = 0;\nstruct Line\n{\n    int u,v,w;\n}edge[max_n];\nvoid dfs(int now,int res,int ls)\n{\n    if(now + 2 > n)\n    {\n        ans = max(ans,res);\n        return ;\n    }\n    for(int i = ls + 1;i <= cnt;i++)\n    {\n        int u = edge[i].u,v = edge[i].v,w = edge[i].w;\n        if(vis[u] || vis[v])\n        {\n            continue;\n        }\n        vis[u] = vis[v] = 1;\n        dfs(now + 2,res + w,i);\n        vis[u] = vis[v] = 0;\n    }\n}\nsigned main()\n{\n    read(n);\n    for(register int i = 1,w;i < n;i++)\n    {\n        for(register int j = i + 1;j <= n;++j)\n        {\n            read(w);\n            edge[++cnt] = {i,j,w};\n        }\n    }\n    dfs(0,0,0);\n    writeln(ans);\n    return 0;\n}\n```\n","slug":"AT_abc318_d General Weighted Max Matching 题解","published":1,"date":"2023-10-04T14:11:08.242Z","updated":"2023-10-04T14:11:08.242Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9yb0006osjad91m75hg","content":"<h1 id=\"at_abc318_d-general-weighted-max-matching-题解\">AT_abc318_d\r\nGeneral Weighted Max Matching 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_abc318_d\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/abc318/tasks/abc318_d\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>有一张 <span class=\"math inline\">\\(n\\)</span>\r\n个点的带权无向完全图，找出一些边使得这些边的端点没有重合且边权和最大。输出最大边权和。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>搜索即可，重点在于复杂度分析。都先我们确定一件事：一定会选择 <span\r\nclass=\"math inline\">\\(\\left \\lfloor \\frac{n}{2} \\right \\rfloor\\)</span>\r\n条边，原因是边权非负，显然对于边数更少的我们可以多选边，答案更优。</p>\r\n<p>因此极限情况下要选 <span class=\"math inline\">\\(8\\)</span>\r\n条边。我们知道，<span class=\"math inline\">\\(16\\)</span>\r\n个点的无向完全图有 <span class=\"math inline\">\\(\\frac{16 \\times 15}{2} =\r\n120\\)</span> 条边。因此第一条边有 <span\r\nclass=\"math inline\">\\(120\\)</span>\r\n种选择，之后，与这条边两个端点相连的就都不能选了，于是下一轮的可选边数是\r\n<span class=\"math inline\">\\(120 - 15 \\cdot 2 + 1 =\r\n91\\)</span>，以此类推，算出我们选边的方案数不超过 <span\r\nclass=\"math inline\">\\(10^{8}\\)</span>。当然，我们选边是顺序无关的，因此我们搜索的时候可以强制按编号从小到大的顺序搜索。于是总方案为\r\n<span class=\"math inline\">\\(\\frac{10^{8}}{8!} &lt;\r\n3000\\)</span>，复杂度优秀！</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 121</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> mp[<span class=\"number\">20</span>][<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> cnt,n;</span><br><span class=\"line\"><span class=\"type\">int</span> vis[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Line</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> u,v,w;</span><br><span class=\"line\">&#125;edge[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> now,<span class=\"type\">int</span> res,<span class=\"type\">int</span> ls)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(now + <span class=\"number\">2</span> &gt; n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans = <span class=\"built_in\">max</span>(ans,res);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = ls + <span class=\"number\">1</span>;i &lt;= cnt;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u = edge[i].u,v = edge[i].v,w = edge[i].w;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[u] || vis[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vis[u] = vis[v] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(now + <span class=\"number\">2</span>,res + w,i);</span><br><span class=\"line\">        vis[u] = vis[v] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i = <span class=\"number\">1</span>,w;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> j = i + <span class=\"number\">1</span>;j &lt;= n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(w);</span><br><span class=\"line\">            edge[++cnt] = &#123;i,j,w&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"at_abc318_d-general-weighted-max-matching-题解\">AT_abc318_d\r\nGeneral Weighted Max Matching 题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_abc318_d\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/abc318/tasks/abc318_d\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>有一张 <span class=\"math inline\">\\(n\\)</span>\r\n个点的带权无向完全图，找出一些边使得这些边的端点没有重合且边权和最大。输出最大边权和。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>搜索即可，重点在于复杂度分析。都先我们确定一件事：一定会选择 <span\r\nclass=\"math inline\">\\(\\left \\lfloor \\frac{n}{2} \\right \\rfloor\\)</span>\r\n条边，原因是边权非负，显然对于边数更少的我们可以多选边，答案更优。</p>\r\n<p>因此极限情况下要选 <span class=\"math inline\">\\(8\\)</span>\r\n条边。我们知道，<span class=\"math inline\">\\(16\\)</span>\r\n个点的无向完全图有 <span class=\"math inline\">\\(\\frac{16 \\times 15}{2} =\r\n120\\)</span> 条边。因此第一条边有 <span\r\nclass=\"math inline\">\\(120\\)</span>\r\n种选择，之后，与这条边两个端点相连的就都不能选了，于是下一轮的可选边数是\r\n<span class=\"math inline\">\\(120 - 15 \\cdot 2 + 1 =\r\n91\\)</span>，以此类推，算出我们选边的方案数不超过 <span\r\nclass=\"math inline\">\\(10^{8}\\)</span>。当然，我们选边是顺序无关的，因此我们搜索的时候可以强制按编号从小到大的顺序搜索。于是总方案为\r\n<span class=\"math inline\">\\(\\frac{10^{8}}{8!} &lt;\r\n3000\\)</span>，复杂度优秀！</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 121</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> mp[<span class=\"number\">20</span>][<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> cnt,n;</span><br><span class=\"line\"><span class=\"type\">int</span> vis[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Line</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> u,v,w;</span><br><span class=\"line\">&#125;edge[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> now,<span class=\"type\">int</span> res,<span class=\"type\">int</span> ls)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(now + <span class=\"number\">2</span> &gt; n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans = <span class=\"built_in\">max</span>(ans,res);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = ls + <span class=\"number\">1</span>;i &lt;= cnt;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u = edge[i].u,v = edge[i].v,w = edge[i].w;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[u] || vis[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vis[u] = vis[v] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(now + <span class=\"number\">2</span>,res + w,i);</span><br><span class=\"line\">        vis[u] = vis[v] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> i = <span class=\"number\">1</span>,w;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">register</span> <span class=\"type\">int</span> j = i + <span class=\"number\">1</span>;j &lt;= n;++j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(w);</span><br><span class=\"line\">            edge[++cnt] = &#123;i,j,w&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"AT_abc318_e Sandwiches 题解","mathjax":true,"_content":"\n# AT_abc318_e Sandwiches 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/AT_abc318_e)\n\n[AtCoder](https://atcoder.jp/contests/abc318/tasks/abc318_e)\n\n## Description\n\n给定一个长度为 $n$ 的序列 $a$，找到满足以下条件的三元组 $(i,j,k)$ 的数量。\n\n- $i < j < k$；\n- $a_{i} = a_{k}$；\n- $a_{i} \\neq a_{j}$。\n\n数据范围：$1 \\leq n \\leq 3 \\times 10^{5}$，$1 \\leq a_{i} \\leq n$。\n\n## Solution\n\n由于要求 $i < j < k$，我们可以从左向右枚举 $k$，考虑对于这个 $k$ 计算贡献。假设 $a_{k}$ 在之前出现次数是 $cnt_{a_{k}}$，出现的位置集合是 $pos_{a_{k}} = \\{pos_{a_{k},1}, \\cdots, pos_{a_{k},cnt_{a_{k}}}\\}$。先考虑一种较劣的算法：枚举每个 $i$，那么 $j$ 的数量可以很轻松的确定（注意减去中间 $a_{j}$ 和 $a_{k}$ 相同的数量）。于是这个 $k$ 的贡献是：\n\n$$\n\\sum_{i = 1}^{cnt_{a_{k}}} \\left ( k - pos_{a_{k},i} - cnt_{a_{k}} + i \\right)\n$$\n\n此时复杂度为 $\\Omicron (n^{2})$。\n\n考虑拆上面的式子，令其为 $f(k)$：\n\n$$\n\\begin{aligned}\n    f(k)  &= \\sum_{i = 1}^{cnt_{a_{k}}}  k - \\sum_{i = 1}^{cnt_{a_{k}}} pos_{a_{k},i} - \\sum_{i = 1}^{cnt_{a_{k}}} cnt_{a_{k}} + \\sum_{i = 1}^{cnt_{a_{k}}}i \n  \\\\  &=cnt_{a_{k}} \\cdot k - \\sum_{i = 1}^{cnt_{a_{k}}} pos_{a_{k},i} - cnt_{a_{k}}^{2} + \\frac{cnt_{a_{k}} \\times (cnt_{a_{k}} + 1)}{2}\n \\\\ &=cnt_{a_{k}} \\cdot k -  \\sum_{i = 1}^{cnt_{a_{k}}} pos_{a_{k},i} - \\frac{cnt_{a_{k}} \\times (cnt_{a_{k}} + 1)}{2}\n\\end{aligned}\n$$\n\n对每个数字为何一个出现位置的前缀和 $sum =  \\sum_{i = 1}^{cnt_{a_{k}}} pos_{a_{k},i}$ 就可以 $\\Omicron(1)$ 计算每个 $k$ 的贡献了，总时间复杂度 $\\Omicron (n)$。\n\n\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 510101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint n,ans = 0,nums[max_n],sum[max_n],cnt[max_n];\nsigned main()\n{\n    read(n);\n    for(int i = 1;i <= n;i++)\n    {\n        read(nums[i]);\n    }\n    for(int i = 1;i <= n;i++)\n    {\n        if(cnt[nums[i]] >= 1)\n        {\n            ans += cnt[nums[i]] * i - sum[nums[i]] - ((cnt[nums[i]] + 1) * (cnt[nums[i]]) / 2);\n        }\n        sum[nums[i]] += i;\n        cnt[nums[i]]++;\n    }\n    writeln(ans);\n    return 0;\n}\n```\n","source":"_posts/AT_abc318_e Sandwiches 题解.md","raw":"---\ntitle: \"AT_abc318_e Sandwiches 题解\"\ntag: AtCoder\nmathjax: true\n---\n\n# AT_abc318_e Sandwiches 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/AT_abc318_e)\n\n[AtCoder](https://atcoder.jp/contests/abc318/tasks/abc318_e)\n\n## Description\n\n给定一个长度为 $n$ 的序列 $a$，找到满足以下条件的三元组 $(i,j,k)$ 的数量。\n\n- $i < j < k$；\n- $a_{i} = a_{k}$；\n- $a_{i} \\neq a_{j}$。\n\n数据范围：$1 \\leq n \\leq 3 \\times 10^{5}$，$1 \\leq a_{i} \\leq n$。\n\n## Solution\n\n由于要求 $i < j < k$，我们可以从左向右枚举 $k$，考虑对于这个 $k$ 计算贡献。假设 $a_{k}$ 在之前出现次数是 $cnt_{a_{k}}$，出现的位置集合是 $pos_{a_{k}} = \\{pos_{a_{k},1}, \\cdots, pos_{a_{k},cnt_{a_{k}}}\\}$。先考虑一种较劣的算法：枚举每个 $i$，那么 $j$ 的数量可以很轻松的确定（注意减去中间 $a_{j}$ 和 $a_{k}$ 相同的数量）。于是这个 $k$ 的贡献是：\n\n$$\n\\sum_{i = 1}^{cnt_{a_{k}}} \\left ( k - pos_{a_{k},i} - cnt_{a_{k}} + i \\right)\n$$\n\n此时复杂度为 $\\Omicron (n^{2})$。\n\n考虑拆上面的式子，令其为 $f(k)$：\n\n$$\n\\begin{aligned}\n    f(k)  &= \\sum_{i = 1}^{cnt_{a_{k}}}  k - \\sum_{i = 1}^{cnt_{a_{k}}} pos_{a_{k},i} - \\sum_{i = 1}^{cnt_{a_{k}}} cnt_{a_{k}} + \\sum_{i = 1}^{cnt_{a_{k}}}i \n  \\\\  &=cnt_{a_{k}} \\cdot k - \\sum_{i = 1}^{cnt_{a_{k}}} pos_{a_{k},i} - cnt_{a_{k}}^{2} + \\frac{cnt_{a_{k}} \\times (cnt_{a_{k}} + 1)}{2}\n \\\\ &=cnt_{a_{k}} \\cdot k -  \\sum_{i = 1}^{cnt_{a_{k}}} pos_{a_{k},i} - \\frac{cnt_{a_{k}} \\times (cnt_{a_{k}} + 1)}{2}\n\\end{aligned}\n$$\n\n对每个数字为何一个出现位置的前缀和 $sum =  \\sum_{i = 1}^{cnt_{a_{k}}} pos_{a_{k},i}$ 就可以 $\\Omicron(1)$ 计算每个 $k$ 的贡献了，总时间复杂度 $\\Omicron (n)$。\n\n\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 510101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint n,ans = 0,nums[max_n],sum[max_n],cnt[max_n];\nsigned main()\n{\n    read(n);\n    for(int i = 1;i <= n;i++)\n    {\n        read(nums[i]);\n    }\n    for(int i = 1;i <= n;i++)\n    {\n        if(cnt[nums[i]] >= 1)\n        {\n            ans += cnt[nums[i]] * i - sum[nums[i]] - ((cnt[nums[i]] + 1) * (cnt[nums[i]]) / 2);\n        }\n        sum[nums[i]] += i;\n        cnt[nums[i]]++;\n    }\n    writeln(ans);\n    return 0;\n}\n```\n","slug":"AT_abc318_e Sandwiches 题解","published":1,"date":"2023-10-04T14:11:08.243Z","updated":"2023-10-04T14:11:08.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9yc0008osjacpmyg054","content":"<h1 id=\"at_abc318_e-sandwiches-题解\">AT_abc318_e Sandwiches 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_abc318_e\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/abc318/tasks/abc318_e\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定一个长度为 <span class=\"math inline\">\\(n\\)</span> 的序列 <span\r\nclass=\"math inline\">\\(a\\)</span>，找到满足以下条件的三元组 <span\r\nclass=\"math inline\">\\((i,j,k)\\)</span> 的数量。</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(i &lt; j &lt; k\\)</span>；</li>\r\n<li><span class=\"math inline\">\\(a_{i} = a_{k}\\)</span>；</li>\r\n<li><span class=\"math inline\">\\(a_{i} \\neq a_{j}\\)</span>。</li>\r\n</ul>\r\n<p>数据范围：<span class=\"math inline\">\\(1 \\leq n \\leq 3 \\times\r\n10^{5}\\)</span>，<span class=\"math inline\">\\(1 \\leq a_{i} \\leq\r\nn\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>由于要求 <span class=\"math inline\">\\(i &lt; j &lt;\r\nk\\)</span>，我们可以从左向右枚举 <span\r\nclass=\"math inline\">\\(k\\)</span>，考虑对于这个 <span\r\nclass=\"math inline\">\\(k\\)</span> 计算贡献。假设 <span\r\nclass=\"math inline\">\\(a_{k}\\)</span> 在之前出现次数是 <span\r\nclass=\"math inline\">\\(cnt_{a_{k}}\\)</span>，出现的位置集合是 <span\r\nclass=\"math inline\">\\(pos_{a_{k}} = \\{pos_{a_{k},1}, \\cdots,\r\npos_{a_{k},cnt_{a_{k}}}\\}\\)</span>。先考虑一种较劣的算法：枚举每个 <span\r\nclass=\"math inline\">\\(i\\)</span>，那么 <span\r\nclass=\"math inline\">\\(j\\)</span> 的数量可以很轻松的确定（注意减去中间\r\n<span class=\"math inline\">\\(a_{j}\\)</span> 和 <span\r\nclass=\"math inline\">\\(a_{k}\\)</span> 相同的数量）。于是这个 <span\r\nclass=\"math inline\">\\(k\\)</span> 的贡献是：</p>\r\n<p><span class=\"math display\">\\[\r\n\\sum_{i = 1}^{cnt_{a_{k}}} \\left ( k - pos_{a_{k},i} - cnt_{a_{k}} + i\r\n\\right)\r\n\\]</span></p>\r\n<p>此时复杂度为 <span class=\"math inline\">\\(\\Omicron\r\n(n^{2})\\)</span>。</p>\r\n<p>考虑拆上面的式子，令其为 <span\r\nclass=\"math inline\">\\(f(k)\\)</span>：</p>\r\n<p><span class=\"math display\">\\[\r\n\\begin{aligned}\r\n    f(k)  &amp;= \\sum_{i = 1}^{cnt_{a_{k}}}  k - \\sum_{i =\r\n1}^{cnt_{a_{k}}} pos_{a_{k},i} - \\sum_{i = 1}^{cnt_{a_{k}}} cnt_{a_{k}}\r\n+ \\sum_{i = 1}^{cnt_{a_{k}}}i\r\n  \\\\  &amp;=cnt_{a_{k}} \\cdot k - \\sum_{i = 1}^{cnt_{a_{k}}}\r\npos_{a_{k},i} - cnt_{a_{k}}^{2} + \\frac{cnt_{a_{k}} \\times (cnt_{a_{k}}\r\n+ 1)}{2}\r\n\\\\ &amp;=cnt_{a_{k}} \\cdot k -  \\sum_{i = 1}^{cnt_{a_{k}}} pos_{a_{k},i}\r\n- \\frac{cnt_{a_{k}} \\times (cnt_{a_{k}} + 1)}{2}\r\n\\end{aligned}\r\n\\]</span></p>\r\n<p>对每个数字为何一个出现位置的前缀和 <span class=\"math inline\">\\(sum =\r\n\\sum_{i = 1}^{cnt_{a_{k}}} pos_{a_{k},i}\\)</span> 就可以 <span\r\nclass=\"math inline\">\\(\\Omicron(1)\\)</span> 计算每个 <span\r\nclass=\"math inline\">\\(k\\)</span> 的贡献了，总时间复杂度 <span\r\nclass=\"math inline\">\\(\\Omicron (n)\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 510101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,ans = <span class=\"number\">0</span>,nums[max_n],sum[max_n],cnt[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt[nums[i]] &gt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans += cnt[nums[i]] * i - sum[nums[i]] - ((cnt[nums[i]] + <span class=\"number\">1</span>) * (cnt[nums[i]]) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sum[nums[i]] += i;</span><br><span class=\"line\">        cnt[nums[i]]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"at_abc318_e-sandwiches-题解\">AT_abc318_e Sandwiches 题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_abc318_e\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/abc318/tasks/abc318_e\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定一个长度为 <span class=\"math inline\">\\(n\\)</span> 的序列 <span\r\nclass=\"math inline\">\\(a\\)</span>，找到满足以下条件的三元组 <span\r\nclass=\"math inline\">\\((i,j,k)\\)</span> 的数量。</p>\r\n<ul>\r\n<li><span class=\"math inline\">\\(i &lt; j &lt; k\\)</span>；</li>\r\n<li><span class=\"math inline\">\\(a_{i} = a_{k}\\)</span>；</li>\r\n<li><span class=\"math inline\">\\(a_{i} \\neq a_{j}\\)</span>。</li>\r\n</ul>\r\n<p>数据范围：<span class=\"math inline\">\\(1 \\leq n \\leq 3 \\times\r\n10^{5}\\)</span>，<span class=\"math inline\">\\(1 \\leq a_{i} \\leq\r\nn\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>由于要求 <span class=\"math inline\">\\(i &lt; j &lt;\r\nk\\)</span>，我们可以从左向右枚举 <span\r\nclass=\"math inline\">\\(k\\)</span>，考虑对于这个 <span\r\nclass=\"math inline\">\\(k\\)</span> 计算贡献。假设 <span\r\nclass=\"math inline\">\\(a_{k}\\)</span> 在之前出现次数是 <span\r\nclass=\"math inline\">\\(cnt_{a_{k}}\\)</span>，出现的位置集合是 <span\r\nclass=\"math inline\">\\(pos_{a_{k}} = \\{pos_{a_{k},1}, \\cdots,\r\npos_{a_{k},cnt_{a_{k}}}\\}\\)</span>。先考虑一种较劣的算法：枚举每个 <span\r\nclass=\"math inline\">\\(i\\)</span>，那么 <span\r\nclass=\"math inline\">\\(j\\)</span> 的数量可以很轻松的确定（注意减去中间\r\n<span class=\"math inline\">\\(a_{j}\\)</span> 和 <span\r\nclass=\"math inline\">\\(a_{k}\\)</span> 相同的数量）。于是这个 <span\r\nclass=\"math inline\">\\(k\\)</span> 的贡献是：</p>\r\n<p><span class=\"math display\">\\[\r\n\\sum_{i = 1}^{cnt_{a_{k}}} \\left ( k - pos_{a_{k},i} - cnt_{a_{k}} + i\r\n\\right)\r\n\\]</span></p>\r\n<p>此时复杂度为 <span class=\"math inline\">\\(\\Omicron\r\n(n^{2})\\)</span>。</p>\r\n<p>考虑拆上面的式子，令其为 <span\r\nclass=\"math inline\">\\(f(k)\\)</span>：</p>\r\n<p><span class=\"math display\">\\[\r\n\\begin{aligned}\r\n    f(k)  &amp;= \\sum_{i = 1}^{cnt_{a_{k}}}  k - \\sum_{i =\r\n1}^{cnt_{a_{k}}} pos_{a_{k},i} - \\sum_{i = 1}^{cnt_{a_{k}}} cnt_{a_{k}}\r\n+ \\sum_{i = 1}^{cnt_{a_{k}}}i\r\n  \\\\  &amp;=cnt_{a_{k}} \\cdot k - \\sum_{i = 1}^{cnt_{a_{k}}}\r\npos_{a_{k},i} - cnt_{a_{k}}^{2} + \\frac{cnt_{a_{k}} \\times (cnt_{a_{k}}\r\n+ 1)}{2}\r\n\\\\ &amp;=cnt_{a_{k}} \\cdot k -  \\sum_{i = 1}^{cnt_{a_{k}}} pos_{a_{k},i}\r\n- \\frac{cnt_{a_{k}} \\times (cnt_{a_{k}} + 1)}{2}\r\n\\end{aligned}\r\n\\]</span></p>\r\n<p>对每个数字为何一个出现位置的前缀和 <span class=\"math inline\">\\(sum =\r\n\\sum_{i = 1}^{cnt_{a_{k}}} pos_{a_{k},i}\\)</span> 就可以 <span\r\nclass=\"math inline\">\\(\\Omicron(1)\\)</span> 计算每个 <span\r\nclass=\"math inline\">\\(k\\)</span> 的贡献了，总时间复杂度 <span\r\nclass=\"math inline\">\\(\\Omicron (n)\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 510101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,ans = <span class=\"number\">0</span>,nums[max_n],sum[max_n],cnt[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt[nums[i]] &gt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans += cnt[nums[i]] * i - sum[nums[i]] - ((cnt[nums[i]] + <span class=\"number\">1</span>) * (cnt[nums[i]]) / <span class=\"number\">2</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sum[nums[i]] += i;</span><br><span class=\"line\">        cnt[nums[i]]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"AT_arc165_b [ARC165B] Sliding Window Sort 2 题解","mathjax":true,"_content":"\n# AT_arc165_b [ARC165B] Sliding Window Sort 2 题解\n\n<!-- more -->\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/AT_arc165_b)\n\n[AtCoder](https://atcoder.jp/contests/arc165/tasks/arc165_b)\n\n## Description\n\n给定正整数 $n,k$ 和一个长度为 $n$ 的整数 $P$，你需要选择一个长度为 $k$ 的区间 $[l,l + k - 1]$，将这个区间从小到大排序。\n\n找到操作后最终字典序最大的排列。\n\n$1 \\leq k \\leq n \\leq 2 \\times 10^{5}$。\n\n## Solution\n\n这是一篇常数比较大，可能比较麻烦的题解。~~考场上被创死的一道题。~~\n\n考虑我们排序后不会把大的元素移动到原来的前面，因此排序一定不优。\n\n如果我们可以选择一个区间，排序后不变，那么选择这个区间一定是更优的。\n\n考虑怎么判断一个区间排序后不变：在每个 $nums_{i} < nums_{i + 1}$（也就是排序后相对位置会变化）的地方打上标记，如果一个长度为 $k$ 的区间没有标记就代表排序后不变。这部分可以用树状数组实现。\n\n```cpp\nint lowbit(int x)\n{\n    return (-x)&x;\n}\nvoid add(int x)\n{\n    for(;x <= n;x += lowbit(x))\n    {\n        tree[x]++;\n    }\n}\nint query(int x)\n{\n    int ans = 0;\n    for(;x;x -= lowbit(x))\n    {\n        ans += tree[x];\n    }\n    return ans;\n}\nint query(int l,int r)\n{\n    if(r < l)\n    {\n        return 0;\n    }\n    return query(r) - query(l - 1);\n}\n\n\n// 下面是主函数中的\n\nfor(int i = 2;i <= n;i++)\n{\n    if(nums[i] < nums[i - 1])\n    {\n        add(i);\n    }\n}\n//   a     a\n// 2 1 2 4 3\nfor(int i = 1;i <= n - k + 1;i++)\n{\n    if(query(i + 1,i + k - 1) == 0)\n    {\n        for(int j = 1;j <= n;j++)\n        {\n            writesp(nums[j]);\n        }\n        puts(\"\");\n        return 0;\n    }\n}\n```\n\n如果必须变化，我们期望变的第一个越往后越好，这样字典序会尽量大，同时，我们期望变的个数少。\n\n于是可以从后向前搜，只要 $nums_{i - 1} < \\min{\\{nums_{i \\dots i + k - 1}}\\}$，我们向前移动排序的区间就不会造成 $nums_{i - 1}$ 改变，而后面可能改变的地方变少了（上一个区间参与排序的 $nums_{i + k}$ 不会参与排序了，相当于我们排序了一个更小的区间，一定不劣）。如果 $nums_{i - 1} > nums_{i}$，此时向前移动会导致第一个变小的位置向前移动，答案更劣，因此这时候需要停止搜索。\n\n这部分的实现使用了 ST 表查找区间最小值。\n\n```cpp\nint F[max_n][28];\nvoid ST() {\n  for (int i = 1; i <= n; i++) {\n    F[i][0] = nums[i];\n  }\n  int k = log2(n);\n  for (int j = 1; j <= k; j++) {\n    for (int i = 1; i <= n - (1 << j) + 1; i++) {\n      F[i][j] = min(F[i][j - 1], F[i + (1 << (j - 1))][j - 1]);\n    }\n  }\n}\nint ST_query(int l, int r) {\n  int k = log2(r - l + 1);\n  return min(F[l][k], F[r - (1 << k) + 1][k]);\n}\n\n// 主函数中\n\nST();\nint beg,flag = n - k + 1; // flag 就是最终选择的排序起点\nfor(beg = n - k + 1;beg > 1;beg--)\n{\n    if(nums[beg - 1] < ST_query(beg,beg + k - 2))\n    {\n        flag = beg - 1;\n    }\n    if(nums[beg - 1] > nums[beg])\n    {\n        // cout<<beg<<endl;\n        break;\n    }\n}\n\nsort(nums + flag,nums + flag + k);\nfor(int i = 1;i <= n;i++)\n{\n    writesp(nums[i]);\n}\nputs(\"\");\n```\n\n完整代码就不给出了，时间复杂度 $O(n \\log n)$。","source":"_posts/AT_arc165_b [ARC165B] Sliding Window Sort 2 题解.md","raw":"---\ntitle: \"AT_arc165_b [ARC165B] Sliding Window Sort 2 题解\"\ntag: AtCoder\nmathjax: true\n---\n\n# AT_arc165_b [ARC165B] Sliding Window Sort 2 题解\n\n<!-- more -->\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/AT_arc165_b)\n\n[AtCoder](https://atcoder.jp/contests/arc165/tasks/arc165_b)\n\n## Description\n\n给定正整数 $n,k$ 和一个长度为 $n$ 的整数 $P$，你需要选择一个长度为 $k$ 的区间 $[l,l + k - 1]$，将这个区间从小到大排序。\n\n找到操作后最终字典序最大的排列。\n\n$1 \\leq k \\leq n \\leq 2 \\times 10^{5}$。\n\n## Solution\n\n这是一篇常数比较大，可能比较麻烦的题解。~~考场上被创死的一道题。~~\n\n考虑我们排序后不会把大的元素移动到原来的前面，因此排序一定不优。\n\n如果我们可以选择一个区间，排序后不变，那么选择这个区间一定是更优的。\n\n考虑怎么判断一个区间排序后不变：在每个 $nums_{i} < nums_{i + 1}$（也就是排序后相对位置会变化）的地方打上标记，如果一个长度为 $k$ 的区间没有标记就代表排序后不变。这部分可以用树状数组实现。\n\n```cpp\nint lowbit(int x)\n{\n    return (-x)&x;\n}\nvoid add(int x)\n{\n    for(;x <= n;x += lowbit(x))\n    {\n        tree[x]++;\n    }\n}\nint query(int x)\n{\n    int ans = 0;\n    for(;x;x -= lowbit(x))\n    {\n        ans += tree[x];\n    }\n    return ans;\n}\nint query(int l,int r)\n{\n    if(r < l)\n    {\n        return 0;\n    }\n    return query(r) - query(l - 1);\n}\n\n\n// 下面是主函数中的\n\nfor(int i = 2;i <= n;i++)\n{\n    if(nums[i] < nums[i - 1])\n    {\n        add(i);\n    }\n}\n//   a     a\n// 2 1 2 4 3\nfor(int i = 1;i <= n - k + 1;i++)\n{\n    if(query(i + 1,i + k - 1) == 0)\n    {\n        for(int j = 1;j <= n;j++)\n        {\n            writesp(nums[j]);\n        }\n        puts(\"\");\n        return 0;\n    }\n}\n```\n\n如果必须变化，我们期望变的第一个越往后越好，这样字典序会尽量大，同时，我们期望变的个数少。\n\n于是可以从后向前搜，只要 $nums_{i - 1} < \\min{\\{nums_{i \\dots i + k - 1}}\\}$，我们向前移动排序的区间就不会造成 $nums_{i - 1}$ 改变，而后面可能改变的地方变少了（上一个区间参与排序的 $nums_{i + k}$ 不会参与排序了，相当于我们排序了一个更小的区间，一定不劣）。如果 $nums_{i - 1} > nums_{i}$，此时向前移动会导致第一个变小的位置向前移动，答案更劣，因此这时候需要停止搜索。\n\n这部分的实现使用了 ST 表查找区间最小值。\n\n```cpp\nint F[max_n][28];\nvoid ST() {\n  for (int i = 1; i <= n; i++) {\n    F[i][0] = nums[i];\n  }\n  int k = log2(n);\n  for (int j = 1; j <= k; j++) {\n    for (int i = 1; i <= n - (1 << j) + 1; i++) {\n      F[i][j] = min(F[i][j - 1], F[i + (1 << (j - 1))][j - 1]);\n    }\n  }\n}\nint ST_query(int l, int r) {\n  int k = log2(r - l + 1);\n  return min(F[l][k], F[r - (1 << k) + 1][k]);\n}\n\n// 主函数中\n\nST();\nint beg,flag = n - k + 1; // flag 就是最终选择的排序起点\nfor(beg = n - k + 1;beg > 1;beg--)\n{\n    if(nums[beg - 1] < ST_query(beg,beg + k - 2))\n    {\n        flag = beg - 1;\n    }\n    if(nums[beg - 1] > nums[beg])\n    {\n        // cout<<beg<<endl;\n        break;\n    }\n}\n\nsort(nums + flag,nums + flag + k);\nfor(int i = 1;i <= n;i++)\n{\n    writesp(nums[i]);\n}\nputs(\"\");\n```\n\n完整代码就不给出了，时间复杂度 $O(n \\log n)$。","slug":"AT_arc165_b [ARC165B] Sliding Window Sort 2 题解","published":1,"date":"2023-10-04T14:11:08.243Z","updated":"2023-10-04T14:11:08.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9ye000aosja2v8q2qrj","content":"<h1 id=\"at_arc165_b-arc165b-sliding-window-sort-2-题解\">AT_arc165_b\r\n[ARC165B] Sliding Window Sort 2 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_arc165_b\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/arc165/tasks/arc165_b\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定正整数 <span class=\"math inline\">\\(n,k\\)</span> 和一个长度为\r\n<span class=\"math inline\">\\(n\\)</span> 的整数 <span\r\nclass=\"math inline\">\\(P\\)</span>，你需要选择一个长度为 <span\r\nclass=\"math inline\">\\(k\\)</span> 的区间 <span class=\"math inline\">\\([l,l\r\n+ k - 1]\\)</span>，将这个区间从小到大排序。</p>\r\n<p>找到操作后最终字典序最大的排列。</p>\r\n<p><span class=\"math inline\">\\(1 \\leq k \\leq n \\leq 2 \\times\r\n10^{5}\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>这是一篇常数比较大，可能比较麻烦的题解。<del>考场上被创死的一道题。</del></p>\r\n<p>考虑我们排序后不会把大的元素移动到原来的前面，因此排序一定不优。</p>\r\n<p>如果我们可以选择一个区间，排序后不变，那么选择这个区间一定是更优的。</p>\r\n<p>考虑怎么判断一个区间排序后不变：在每个 <span\r\nclass=\"math inline\">\\(nums_{i} &lt; nums_{i +\r\n1}\\)</span>（也就是排序后相对位置会变化）的地方打上标记，如果一个长度为\r\n<span class=\"math inline\">\\(k\\)</span>\r\n的区间没有标记就代表排序后不变。这部分可以用树状数组实现。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (-x)&amp;x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;x &lt;= n;x += <span class=\"built_in\">lowbit</span>(x))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[x]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;x;x -= <span class=\"built_in\">lowbit</span>(x))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans += tree[x];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt; l)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(r) - <span class=\"built_in\">query</span>(l - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面是主函数中的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>;i &lt;= n;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums[i] &lt; nums[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//   a     a</span></span><br><span class=\"line\"><span class=\"comment\">// 2 1 2 4 3</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n - k + <span class=\"number\">1</span>;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">query</span>(i + <span class=\"number\">1</span>,i + k - <span class=\"number\">1</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>;j &lt;= n;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">writesp</span>(nums[j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>如果必须变化，我们期望变的第一个越往后越好，这样字典序会尽量大，同时，我们期望变的个数少。</p>\r\n<p>于是可以从后向前搜，只要 <span class=\"math inline\">\\(nums_{i - 1}\r\n&lt; \\min{\\{nums_{i \\dots i + k -\r\n1}}\\}\\)</span>，我们向前移动排序的区间就不会造成 <span\r\nclass=\"math inline\">\\(nums_{i - 1}\\)</span>\r\n改变，而后面可能改变的地方变少了（上一个区间参与排序的 <span\r\nclass=\"math inline\">\\(nums_{i + k}\\)</span>\r\n不会参与排序了，相当于我们排序了一个更小的区间，一定不劣）。如果 <span\r\nclass=\"math inline\">\\(nums_{i - 1} &gt;\r\nnums_{i}\\)</span>，此时向前移动会导致第一个变小的位置向前移动，答案更劣，因此这时候需要停止搜索。</p>\r\n<p>这部分的实现使用了 ST 表查找区间最小值。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> F[max_n][<span class=\"number\">28</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ST</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    F[i][<span class=\"number\">0</span>] = nums[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> k = <span class=\"built_in\">log2</span>(n);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= k; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n - (<span class=\"number\">1</span> &lt;&lt; j) + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">      F[i][j] = <span class=\"built_in\">min</span>(F[i][j - <span class=\"number\">1</span>], F[i + (<span class=\"number\">1</span> &lt;&lt; (j - <span class=\"number\">1</span>))][j - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ST_query</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> k = <span class=\"built_in\">log2</span>(r - l + <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(F[l][k], F[r - (<span class=\"number\">1</span> &lt;&lt; k) + <span class=\"number\">1</span>][k]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 主函数中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">ST</span>();</span><br><span class=\"line\"><span class=\"type\">int</span> beg,flag = n - k + <span class=\"number\">1</span>; <span class=\"comment\">// flag 就是最终选择的排序起点</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(beg = n - k + <span class=\"number\">1</span>;beg &gt; <span class=\"number\">1</span>;beg--)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums[beg - <span class=\"number\">1</span>] &lt; <span class=\"built_in\">ST_query</span>(beg,beg + k - <span class=\"number\">2</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        flag = beg - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums[beg - <span class=\"number\">1</span>] &gt; nums[beg])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// cout&lt;&lt;beg&lt;&lt;endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">sort</span>(nums + flag,nums + flag + k);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">writesp</span>(nums[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>\r\n<p>完整代码就不给出了，时间复杂度 <span class=\"math inline\">\\(O(n \\log\r\nn)\\)</span>。</p>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"at_arc165_b-arc165b-sliding-window-sort-2-题解\">AT_arc165_b\r\n[ARC165B] Sliding Window Sort 2 题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_arc165_b\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/arc165/tasks/arc165_b\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定正整数 <span class=\"math inline\">\\(n,k\\)</span> 和一个长度为\r\n<span class=\"math inline\">\\(n\\)</span> 的整数 <span\r\nclass=\"math inline\">\\(P\\)</span>，你需要选择一个长度为 <span\r\nclass=\"math inline\">\\(k\\)</span> 的区间 <span class=\"math inline\">\\([l,l\r\n+ k - 1]\\)</span>，将这个区间从小到大排序。</p>\r\n<p>找到操作后最终字典序最大的排列。</p>\r\n<p><span class=\"math inline\">\\(1 \\leq k \\leq n \\leq 2 \\times\r\n10^{5}\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>这是一篇常数比较大，可能比较麻烦的题解。<del>考场上被创死的一道题。</del></p>\r\n<p>考虑我们排序后不会把大的元素移动到原来的前面，因此排序一定不优。</p>\r\n<p>如果我们可以选择一个区间，排序后不变，那么选择这个区间一定是更优的。</p>\r\n<p>考虑怎么判断一个区间排序后不变：在每个 <span\r\nclass=\"math inline\">\\(nums_{i} &lt; nums_{i +\r\n1}\\)</span>（也就是排序后相对位置会变化）的地方打上标记，如果一个长度为\r\n<span class=\"math inline\">\\(k\\)</span>\r\n的区间没有标记就代表排序后不变。这部分可以用树状数组实现。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (-x)&amp;x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;x &lt;= n;x += <span class=\"built_in\">lowbit</span>(x))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[x]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;x;x -= <span class=\"built_in\">lowbit</span>(x))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans += tree[x];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt; l)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(r) - <span class=\"built_in\">query</span>(l - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面是主函数中的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>;i &lt;= n;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums[i] &lt; nums[i - <span class=\"number\">1</span>])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//   a     a</span></span><br><span class=\"line\"><span class=\"comment\">// 2 1 2 4 3</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n - k + <span class=\"number\">1</span>;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">query</span>(i + <span class=\"number\">1</span>,i + k - <span class=\"number\">1</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>;j &lt;= n;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">writesp</span>(nums[j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>如果必须变化，我们期望变的第一个越往后越好，这样字典序会尽量大，同时，我们期望变的个数少。</p>\r\n<p>于是可以从后向前搜，只要 <span class=\"math inline\">\\(nums_{i - 1}\r\n&lt; \\min{\\{nums_{i \\dots i + k -\r\n1}}\\}\\)</span>，我们向前移动排序的区间就不会造成 <span\r\nclass=\"math inline\">\\(nums_{i - 1}\\)</span>\r\n改变，而后面可能改变的地方变少了（上一个区间参与排序的 <span\r\nclass=\"math inline\">\\(nums_{i + k}\\)</span>\r\n不会参与排序了，相当于我们排序了一个更小的区间，一定不劣）。如果 <span\r\nclass=\"math inline\">\\(nums_{i - 1} &gt;\r\nnums_{i}\\)</span>，此时向前移动会导致第一个变小的位置向前移动，答案更劣，因此这时候需要停止搜索。</p>\r\n<p>这部分的实现使用了 ST 表查找区间最小值。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> F[max_n][<span class=\"number\">28</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">ST</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    F[i][<span class=\"number\">0</span>] = nums[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> k = <span class=\"built_in\">log2</span>(n);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= k; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n - (<span class=\"number\">1</span> &lt;&lt; j) + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">      F[i][j] = <span class=\"built_in\">min</span>(F[i][j - <span class=\"number\">1</span>], F[i + (<span class=\"number\">1</span> &lt;&lt; (j - <span class=\"number\">1</span>))][j - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ST_query</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> k = <span class=\"built_in\">log2</span>(r - l + <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(F[l][k], F[r - (<span class=\"number\">1</span> &lt;&lt; k) + <span class=\"number\">1</span>][k]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 主函数中</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">ST</span>();</span><br><span class=\"line\"><span class=\"type\">int</span> beg,flag = n - k + <span class=\"number\">1</span>; <span class=\"comment\">// flag 就是最终选择的排序起点</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(beg = n - k + <span class=\"number\">1</span>;beg &gt; <span class=\"number\">1</span>;beg--)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums[beg - <span class=\"number\">1</span>] &lt; <span class=\"built_in\">ST_query</span>(beg,beg + k - <span class=\"number\">2</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        flag = beg - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums[beg - <span class=\"number\">1</span>] &gt; nums[beg])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// cout&lt;&lt;beg&lt;&lt;endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">sort</span>(nums + flag,nums + flag + k);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">writesp</span>(nums[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure>\r\n<p>完整代码就不给出了，时间复杂度 <span class=\"math inline\">\\(O(n \\log\r\nn)\\)</span>。</p>"},{"title":"AT_arc165_c [ARC165C] Social Distance on Graph 题解","mathjax":true,"_content":"\n# AT_arc165_c [ARC165C] Social Distance on Graph 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/AT_arc165_c)\n\n[AtCoder](https://atcoder.jp/contests/arc165/tasks/arc165_c)\n\n## Description\n\n给定一个无向带权图，将所有节点染成黑色或白色，使得最终相同颜色节点之间距离的最小值最大。\n\n$1 \\leq n \\leq 2 \\times 10^{5}$，$n - 1 \\leq m \\leq \\min(\\frac{n \\times (n - 1)}{2},2 \\times 10^{5})$。\n\n## Solution\n\n貌似比 B 简单一点。\n\n考虑对这张图进行染色的过程：\n\n1. 如果图本身可以染色使得没有相邻顶点颜色相同，这样的染色一定是最优的，此时我们找到相邻两条边权和的最小值即可。\n\n2. 否则，我们一定需要把某些相邻顶点染成相同颜色，那么我们要**尽可能先满足权值小的边相连的点颜色不同**，这样才能保证最小值尽可能大。\n\n由于树始终能构造出相邻顶点颜色不同的染色方法，结合边权从大到小，可以想到在最小生成树上染色。染色后再按照 1. 的步骤进行即可。\n\n需要注意的是可能存在两条最小生成树上相邻边的长度大于这两个点直接相连的边的边权，因此答案要还有对所有连接颜色相同顶点的边权取最小值。\n\n第 1. 显然可以按照第 2. 的方法操作，因此我们不需要判断，直接构建最小生成树染色即可。\n\n\n如果直接枚举相邻边算答案会超时，所以记录一下每个点连接的最小值和次小值即可。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 510101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\n\nstruct node\n{\n    int to,nxt,val;\n}edge[max_n];\nint head[max_n],tot;\nvoid add(int u,int v,int w)\n{\n    edge[++tot].to = v;\n    edge[tot].nxt = head[u];\n    edge[tot].val = w;\n    head[u] = tot;\n}\nint n,m;\nstruct Line\n{\n    int from,to,val;\n}G[max_n];\nint awa = 0;\nbool cmp(Line id1,Line id2)\n{\n    return id1.val < id2.val;\n}\nint fa[max_n];\nint mn[max_n],mmn[max_n];\nint find_fa(int u)\n{\n    if(fa[u] == u)\n    {\n        return u;\n    }\n    return fa[u] = find_fa(fa[u]);\n}\nvector<int> THU;\nvoid Kruskal() \n{\n    int nums = 0;\n  sort(G + 1, G + m + 1, cmp);\n  for (int i = 1; i <= m; i++) {\n    if (find_fa(G[i].from) != find_fa(G[i].to)) {\n  //   cout<< G[i].from<<\" \"<<G[i].to<<\" \"<<G[i].val<<endl;\n    int u = G[i].from,v = G[i].to;\n   // cout<<\"@\"<<mn[u]<<\" \"<<mmn[u]<<endl;\n    if(G[i].val < mn[u])\n    {\n        mmn[u] = mn[u];\n        mn[u] = G[i].val;\n    }\n    else if(G[i].val < mmn[u])\n    {\n        mmn[u] = G[i].val;\n    }\n    if(G[i].val < mn[v])\n    {\n        mmn[v] = mn[v];\n        mn[v] = G[i].val;\n    }\n    else if(G[i].val < mmn[v])\n    {\n        mmn[v] = G[i].val;\n    }\n      add(G[i].from,G[i].to,G[i].val);\n      add(G[i].to,G[i].from,G[i].val);\n      nums++;\n      fa[find_fa(G[i].from)] = find_fa(G[i].to);\n    }\n    if (nums == n - 1) {\n      return;\n    }\n  }\n}\nint col[max_n],vis[max_n];\nbool dfs(int u,int fa,int c)\n{\n    vis[u] = 1;\n    col[u] = c;\n    for(int i = head[u];i;i = edge[i].nxt)\n    {\n        int v = edge[i].to;\n        if(v == fa)\n        {\n            continue;\n        }\n        if(vis[v] && col[v] != c)\n        {\n            return false;\n        }\n        else if(vis[v])\n        {\n            continue;\n        }\n        if(!dfs(v,u,c ^ 1))\n        {\n            return false;\n        }\n    }\n    return true;\n}\nsigned main()\n{\n    read(n),read(m);\n    for(int i = 1;i <= n;i++)\n    {\n        fa[i] = i;\n        mn[i] = mmn[i] = INT_MAX;\n    }\n    for(int i = 1,u,v,w;i <= m;i++)\n    {\n        \n        read(u),read(v),read(w);\n        G[i] = {u,v,w};\n    }\n    tot = 0;\n    Kruskal();\n    dfs(1,1,0);\n    int ans = INT_MAX;\n    for(int i = 1;i <= n;i++)\n    {\n       // cout<<mn[i]<<\" \"<<mmn[i]<<endl;\n        if(mmn[i] != INT_MAX)\n        {\n            ans = min(ans,mn[i] + mmn[i]);\n        }\n    }\n    for(int i = 1;i <= m;i++)\n    {\n        int u = G[i].from,v = G[i].to,w = G[i].val;\n        if(col[u] == col[v])\n        {\n            ans = min(ans,w);\n        }\n    }\n    writeln(ans);\n\n    return 0;\n}\n```","source":"_posts/AT_arc165_c [ARC165C] Social Distance on Graph 题解.md","raw":"---\ntitle: \"AT_arc165_c [ARC165C] Social Distance on Graph 题解\"\ntag: AtCoder\nmathjax: true\n---\n\n# AT_arc165_c [ARC165C] Social Distance on Graph 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/AT_arc165_c)\n\n[AtCoder](https://atcoder.jp/contests/arc165/tasks/arc165_c)\n\n## Description\n\n给定一个无向带权图，将所有节点染成黑色或白色，使得最终相同颜色节点之间距离的最小值最大。\n\n$1 \\leq n \\leq 2 \\times 10^{5}$，$n - 1 \\leq m \\leq \\min(\\frac{n \\times (n - 1)}{2},2 \\times 10^{5})$。\n\n## Solution\n\n貌似比 B 简单一点。\n\n考虑对这张图进行染色的过程：\n\n1. 如果图本身可以染色使得没有相邻顶点颜色相同，这样的染色一定是最优的，此时我们找到相邻两条边权和的最小值即可。\n\n2. 否则，我们一定需要把某些相邻顶点染成相同颜色，那么我们要**尽可能先满足权值小的边相连的点颜色不同**，这样才能保证最小值尽可能大。\n\n由于树始终能构造出相邻顶点颜色不同的染色方法，结合边权从大到小，可以想到在最小生成树上染色。染色后再按照 1. 的步骤进行即可。\n\n需要注意的是可能存在两条最小生成树上相邻边的长度大于这两个点直接相连的边的边权，因此答案要还有对所有连接颜色相同顶点的边权取最小值。\n\n第 1. 显然可以按照第 2. 的方法操作，因此我们不需要判断，直接构建最小生成树染色即可。\n\n\n如果直接枚举相邻边算答案会超时，所以记录一下每个点连接的最小值和次小值即可。\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 510101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\n\nstruct node\n{\n    int to,nxt,val;\n}edge[max_n];\nint head[max_n],tot;\nvoid add(int u,int v,int w)\n{\n    edge[++tot].to = v;\n    edge[tot].nxt = head[u];\n    edge[tot].val = w;\n    head[u] = tot;\n}\nint n,m;\nstruct Line\n{\n    int from,to,val;\n}G[max_n];\nint awa = 0;\nbool cmp(Line id1,Line id2)\n{\n    return id1.val < id2.val;\n}\nint fa[max_n];\nint mn[max_n],mmn[max_n];\nint find_fa(int u)\n{\n    if(fa[u] == u)\n    {\n        return u;\n    }\n    return fa[u] = find_fa(fa[u]);\n}\nvector<int> THU;\nvoid Kruskal() \n{\n    int nums = 0;\n  sort(G + 1, G + m + 1, cmp);\n  for (int i = 1; i <= m; i++) {\n    if (find_fa(G[i].from) != find_fa(G[i].to)) {\n  //   cout<< G[i].from<<\" \"<<G[i].to<<\" \"<<G[i].val<<endl;\n    int u = G[i].from,v = G[i].to;\n   // cout<<\"@\"<<mn[u]<<\" \"<<mmn[u]<<endl;\n    if(G[i].val < mn[u])\n    {\n        mmn[u] = mn[u];\n        mn[u] = G[i].val;\n    }\n    else if(G[i].val < mmn[u])\n    {\n        mmn[u] = G[i].val;\n    }\n    if(G[i].val < mn[v])\n    {\n        mmn[v] = mn[v];\n        mn[v] = G[i].val;\n    }\n    else if(G[i].val < mmn[v])\n    {\n        mmn[v] = G[i].val;\n    }\n      add(G[i].from,G[i].to,G[i].val);\n      add(G[i].to,G[i].from,G[i].val);\n      nums++;\n      fa[find_fa(G[i].from)] = find_fa(G[i].to);\n    }\n    if (nums == n - 1) {\n      return;\n    }\n  }\n}\nint col[max_n],vis[max_n];\nbool dfs(int u,int fa,int c)\n{\n    vis[u] = 1;\n    col[u] = c;\n    for(int i = head[u];i;i = edge[i].nxt)\n    {\n        int v = edge[i].to;\n        if(v == fa)\n        {\n            continue;\n        }\n        if(vis[v] && col[v] != c)\n        {\n            return false;\n        }\n        else if(vis[v])\n        {\n            continue;\n        }\n        if(!dfs(v,u,c ^ 1))\n        {\n            return false;\n        }\n    }\n    return true;\n}\nsigned main()\n{\n    read(n),read(m);\n    for(int i = 1;i <= n;i++)\n    {\n        fa[i] = i;\n        mn[i] = mmn[i] = INT_MAX;\n    }\n    for(int i = 1,u,v,w;i <= m;i++)\n    {\n        \n        read(u),read(v),read(w);\n        G[i] = {u,v,w};\n    }\n    tot = 0;\n    Kruskal();\n    dfs(1,1,0);\n    int ans = INT_MAX;\n    for(int i = 1;i <= n;i++)\n    {\n       // cout<<mn[i]<<\" \"<<mmn[i]<<endl;\n        if(mmn[i] != INT_MAX)\n        {\n            ans = min(ans,mn[i] + mmn[i]);\n        }\n    }\n    for(int i = 1;i <= m;i++)\n    {\n        int u = G[i].from,v = G[i].to,w = G[i].val;\n        if(col[u] == col[v])\n        {\n            ans = min(ans,w);\n        }\n    }\n    writeln(ans);\n\n    return 0;\n}\n```","slug":"AT_arc165_c [ARC165C] Social Distance on Graph 题解","published":1,"date":"2023-10-04T14:11:08.244Z","updated":"2023-10-04T14:11:08.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9yh000dosja8rnigh7x","content":"<h1 id=\"at_arc165_c-arc165c-social-distance-on-graph-题解\">AT_arc165_c\r\n[ARC165C] Social Distance on Graph 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_arc165_c\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/arc165/tasks/arc165_c\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定一个无向带权图，将所有节点染成黑色或白色，使得最终相同颜色节点之间距离的最小值最大。</p>\r\n<p><span class=\"math inline\">\\(1 \\leq n \\leq 2 \\times\r\n10^{5}\\)</span>，<span class=\"math inline\">\\(n - 1 \\leq m \\leq\r\n\\min(\\frac{n \\times (n - 1)}{2},2 \\times 10^{5})\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>貌似比 B 简单一点。</p>\r\n<p>考虑对这张图进行染色的过程：</p>\r\n<ol type=\"1\">\r\n<li><p>如果图本身可以染色使得没有相邻顶点颜色相同，这样的染色一定是最优的，此时我们找到相邻两条边权和的最小值即可。</p></li>\r\n<li><p>否则，我们一定需要把某些相邻顶点染成相同颜色，那么我们要<strong>尽可能先满足权值小的边相连的点颜色不同</strong>，这样才能保证最小值尽可能大。</p></li>\r\n</ol>\r\n<p>由于树始终能构造出相邻顶点颜色不同的染色方法，结合边权从大到小，可以想到在最小生成树上染色。染色后再按照\r\n1. 的步骤进行即可。</p>\r\n<p>需要注意的是可能存在两条最小生成树上相邻边的长度大于这两个点直接相连的边的边权，因此答案要还有对所有连接颜色相同顶点的边权取最小值。</p>\r\n<p>第 1. 显然可以按照第 2.\r\n的方法操作，因此我们不需要判断，直接构建最小生成树染色即可。</p>\r\n<p>如果直接枚举相邻边算答案会超时，所以记录一下每个点连接的最小值和次小值即可。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 510101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> to,nxt,val;</span><br><span class=\"line\">&#125;edge[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> head[max_n],tot;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> v,<span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edge[++tot].to = v;</span><br><span class=\"line\">    edge[tot].nxt = head[u];</span><br><span class=\"line\">    edge[tot].val = w;</span><br><span class=\"line\">    head[u] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Line</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> from,to,val;</span><br><span class=\"line\">&#125;G[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> awa = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(Line id1,Line id2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> id1.val &lt; id2.val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> fa[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> mn[max_n],mmn[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find_fa</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fa[u] == u)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fa[u] = <span class=\"built_in\">find_fa</span>(fa[u]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; THU;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Kruskal</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> nums = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">sort</span>(G + <span class=\"number\">1</span>, G + m + <span class=\"number\">1</span>, cmp);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find_fa</span>(G[i].from) != <span class=\"built_in\">find_fa</span>(G[i].to)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//   cout&lt;&lt; G[i].from&lt;&lt;&quot; &quot;&lt;&lt;G[i].to&lt;&lt;&quot; &quot;&lt;&lt;G[i].val&lt;&lt;endl;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> u = G[i].from,v = G[i].to;</span><br><span class=\"line\">   <span class=\"comment\">// cout&lt;&lt;&quot;@&quot;&lt;&lt;mn[u]&lt;&lt;&quot; &quot;&lt;&lt;mmn[u]&lt;&lt;endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(G[i].val &lt; mn[u])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mmn[u] = mn[u];</span><br><span class=\"line\">        mn[u] = G[i].val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(G[i].val &lt; mmn[u])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mmn[u] = G[i].val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(G[i].val &lt; mn[v])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mmn[v] = mn[v];</span><br><span class=\"line\">        mn[v] = G[i].val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(G[i].val &lt; mmn[v])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mmn[v] = G[i].val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">      <span class=\"built_in\">add</span>(G[i].from,G[i].to,G[i].val);</span><br><span class=\"line\">      <span class=\"built_in\">add</span>(G[i].to,G[i].from,G[i].val);</span><br><span class=\"line\">      nums++;</span><br><span class=\"line\">      fa[<span class=\"built_in\">find_fa</span>(G[i].from)] = <span class=\"built_in\">find_fa</span>(G[i].to);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums == n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> col[max_n],vis[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> fa,<span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    col[u] = c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = head[u];i;i = edge[i].nxt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v == fa)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[v] &amp;&amp; col[v] != c)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(vis[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"built_in\">dfs</span>(v,u,c ^ <span class=\"number\">1</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n),<span class=\"built_in\">read</span>(m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fa[i] = i;</span><br><span class=\"line\">        mn[i] = mmn[i] = INT_MAX;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>,u,v,w;i &lt;= m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">read</span>(u),<span class=\"built_in\">read</span>(v),<span class=\"built_in\">read</span>(w);</span><br><span class=\"line\">        G[i] = &#123;u,v,w&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">Kruskal</span>();</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = INT_MAX;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       <span class=\"comment\">// cout&lt;&lt;mn[i]&lt;&lt;&quot; &quot;&lt;&lt;mmn[i]&lt;&lt;endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mmn[i] != INT_MAX)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans = <span class=\"built_in\">min</span>(ans,mn[i] + mmn[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u = G[i].from,v = G[i].to,w = G[i].val;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(col[u] == col[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans = <span class=\"built_in\">min</span>(ans,w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"at_arc165_c-arc165c-social-distance-on-graph-题解\">AT_arc165_c\r\n[ARC165C] Social Distance on Graph 题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_arc165_c\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/arc165/tasks/arc165_c\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定一个无向带权图，将所有节点染成黑色或白色，使得最终相同颜色节点之间距离的最小值最大。</p>\r\n<p><span class=\"math inline\">\\(1 \\leq n \\leq 2 \\times\r\n10^{5}\\)</span>，<span class=\"math inline\">\\(n - 1 \\leq m \\leq\r\n\\min(\\frac{n \\times (n - 1)}{2},2 \\times 10^{5})\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>貌似比 B 简单一点。</p>\r\n<p>考虑对这张图进行染色的过程：</p>\r\n<ol type=\"1\">\r\n<li><p>如果图本身可以染色使得没有相邻顶点颜色相同，这样的染色一定是最优的，此时我们找到相邻两条边权和的最小值即可。</p></li>\r\n<li><p>否则，我们一定需要把某些相邻顶点染成相同颜色，那么我们要<strong>尽可能先满足权值小的边相连的点颜色不同</strong>，这样才能保证最小值尽可能大。</p></li>\r\n</ol>\r\n<p>由于树始终能构造出相邻顶点颜色不同的染色方法，结合边权从大到小，可以想到在最小生成树上染色。染色后再按照\r\n1. 的步骤进行即可。</p>\r\n<p>需要注意的是可能存在两条最小生成树上相邻边的长度大于这两个点直接相连的边的边权，因此答案要还有对所有连接颜色相同顶点的边权取最小值。</p>\r\n<p>第 1. 显然可以按照第 2.\r\n的方法操作，因此我们不需要判断，直接构建最小生成树染色即可。</p>\r\n<p>如果直接枚举相邻边算答案会超时，所以记录一下每个点连接的最小值和次小值即可。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 510101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> to,nxt,val;</span><br><span class=\"line\">&#125;edge[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> head[max_n],tot;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> v,<span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edge[++tot].to = v;</span><br><span class=\"line\">    edge[tot].nxt = head[u];</span><br><span class=\"line\">    edge[tot].val = w;</span><br><span class=\"line\">    head[u] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Line</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> from,to,val;</span><br><span class=\"line\">&#125;G[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> awa = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(Line id1,Line id2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> id1.val &lt; id2.val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> fa[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> mn[max_n],mmn[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find_fa</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(fa[u] == u)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fa[u] = <span class=\"built_in\">find_fa</span>(fa[u]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; THU;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">Kruskal</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> nums = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"built_in\">sort</span>(G + <span class=\"number\">1</span>, G + m + <span class=\"number\">1</span>, cmp);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find_fa</span>(G[i].from) != <span class=\"built_in\">find_fa</span>(G[i].to)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//   cout&lt;&lt; G[i].from&lt;&lt;&quot; &quot;&lt;&lt;G[i].to&lt;&lt;&quot; &quot;&lt;&lt;G[i].val&lt;&lt;endl;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> u = G[i].from,v = G[i].to;</span><br><span class=\"line\">   <span class=\"comment\">// cout&lt;&lt;&quot;@&quot;&lt;&lt;mn[u]&lt;&lt;&quot; &quot;&lt;&lt;mmn[u]&lt;&lt;endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(G[i].val &lt; mn[u])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mmn[u] = mn[u];</span><br><span class=\"line\">        mn[u] = G[i].val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(G[i].val &lt; mmn[u])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mmn[u] = G[i].val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(G[i].val &lt; mn[v])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mmn[v] = mn[v];</span><br><span class=\"line\">        mn[v] = G[i].val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(G[i].val &lt; mmn[v])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mmn[v] = G[i].val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">      <span class=\"built_in\">add</span>(G[i].from,G[i].to,G[i].val);</span><br><span class=\"line\">      <span class=\"built_in\">add</span>(G[i].to,G[i].from,G[i].val);</span><br><span class=\"line\">      nums++;</span><br><span class=\"line\">      fa[<span class=\"built_in\">find_fa</span>(G[i].from)] = <span class=\"built_in\">find_fa</span>(G[i].to);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums == n - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> col[max_n],vis[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> fa,<span class=\"type\">int</span> c)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    col[u] = c;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = head[u];i;i = edge[i].nxt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v == fa)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[v] &amp;&amp; col[v] != c)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(vis[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"built_in\">dfs</span>(v,u,c ^ <span class=\"number\">1</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n),<span class=\"built_in\">read</span>(m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fa[i] = i;</span><br><span class=\"line\">        mn[i] = mmn[i] = INT_MAX;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>,u,v,w;i &lt;= m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">read</span>(u),<span class=\"built_in\">read</span>(v),<span class=\"built_in\">read</span>(w);</span><br><span class=\"line\">        G[i] = &#123;u,v,w&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">Kruskal</span>();</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = INT_MAX;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">       <span class=\"comment\">// cout&lt;&lt;mn[i]&lt;&lt;&quot; &quot;&lt;&lt;mmn[i]&lt;&lt;endl;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(mmn[i] != INT_MAX)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans = <span class=\"built_in\">min</span>(ans,mn[i] + mmn[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u = G[i].from,v = G[i].to,w = G[i].val;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(col[u] == col[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans = <span class=\"built_in\">min</span>(ans,w);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"AT_arc165_d [ARC165D] Substring Comparison 题解","mathjax":true,"_content":"\n# AT_arc165_d [ARC165D] Substring Comparison 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/AT_arc165_d)\n\n[AtCoder](https://atcoder.jp/contests/arc165/tasks/arc165_d)\n\n## Description\n\n给定正整数 $n,m$ 和 $m$ 个形如 $(A_{i},B_{i},C_{i},D_{i})$ 的限制条件。\n\n判断是否存在一个长度为 $n$ 的序列 $P$ 满足 $\\forall i \\in [1,m]$，$P_{A_{i} \\dots B_{i}}$ 字典序小于 $P_{C_{i} \\dots D_{i}}$。\n\n$1 \\leq n,m \\leq 2 \\times 10^{3}$。\n\n## Solution\n\n考虑比较字典序时的操作：如果某一位相同，不会造成影响，当一个串先比较完时，这个串更小，否则字典序取决于需要的比较第一个不同的。\n\n因此可以考虑逐步减小限制的区间，具体的，当两个区间均不为空时，我们判断两区间左端是否相同，若相同，区间左端一起向右移动一位即可。\n\n考虑剩下的小于关系构成的有向图：如果存在环，这些数必须相同，大小关系继承到下一位。\n\n如果不存在环，答案成立，直接输出即可。\n\n如果一组限制的第二个区间先被取完，这样的数据无法构造出解，直接输出即可。\n\n实现的时候用并查集记录大小相同的位置，用 tarjan 找环。\n\n## Codes\n\n```cpp\n// Problem: D - Substring Comparison\n// Contest: AtCoder - AtCoder Regular Contest 165\n// URL: https://atcoder.jp/contests/arc165/tasks/arc165_d\n// Memory Limit: 1024 MB\n// Time Limit: 2000 ms\n//\n// Powered by CP Editor (https://cpeditor.org)\n\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 510101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint n, m;\nstruct node\n{\n    int to, nxt;\n} edge[max_n];\nint head[max_n], tot;\nvoid add(int u, int v)\n{\n    edge[++tot].to = v;\n    edge[tot].nxt = head[u];\n    head[u] = tot;\n}\nstruct Query\n{\n    int a, b, c, d;\n} que[max_n];\nint fa[max_n];\nint find(int u)\n{\n    if (fa[u] == u)\n    {\n        return u;\n    }\n    return fa[u] = find(fa[u]);\n}\nvoid merge(int u, int v)\n{\n    if (find(u) == find(v))\n    {\n        return;\n    }\n    fa[find(u)] = find(v);\n}\nint dfn[max_n], low[max_n], timer, st[max_n], vis[max_n];\nint col[max_n], c;\nbool no_circle;\nvoid tarjan(int u)\n{\n    st[++st[0]] = u;\n    dfn[u] = low[u] = ++timer;\n    vis[u] = 1;\n    for (int i = head[u]; i; i = edge[i].nxt)\n    {\n        int v = edge[i].to;\n        if (!dfn[v])\n        {\n            tarjan(v);\n            low[u] = min(low[u], low[v]);\n        }\n        else if (vis[v])\n        {\n            low[u] = min(low[u], dfn[v]);\n        }\n    }\n    if (dfn[u] == low[u])\n    {\n        ++c;\n        int now;\n        do\n        {\n            now = st[st[0]--];\n            col[c] = c;\n            merge(u, now);\n            vis[now] = 0;\n        } while (now != u);\n    }\n}\nsigned main()\n{\n    read(n), read(m);\n    for (int i = 1; i <= n; i++)\n    {\n        fa[i] = i;\n    }\n    for (int i = 1; i <= m; i++)\n    {\n        read(que[i].a);\n        read(que[i].b);\n        read(que[i].c);\n        read(que[i].d);\n    }\n    for (int T = 1; T <= m; T++)\n    {\n        for (int j = 1; j <= n; j++)\n        {\n            head[j] = 0;\n            dfn[j] = low[j] = 0;\n            vis[j] = 0;\n            col[j] = 0;\n        }\n        tot = 0, c = 0, timer = 0;\n        for (int i = 1; i <= m; i++)\n        {\n\n            while (find(que[i].a) == find(que[i].c) && que[i].a <= que[i].b && que[i].c <= que[i].d)\n            {\n                ++que[i].a;\n                ++que[i].c;\n            }\n            if (que[i].c > que[i].d)\n            {\n                puts(\"No\");\n                exit(0);\n            }\n            if (que[i].a <= que[i].b)\n            {\n                add(find(que[i].a), find(que[i].c));\n            }\n        }\n        for (int j = 1; j <= n; j++)\n        {\n            if (!dfn[j])\n            {\n                tarjan(j);\n            }\n        }\n        if (c == n)\n        {\n            puts(\"Yes\");\n            exit(0);\n        }\n    }\n    return 0;\n}\n```","source":"_posts/AT_arc165_d [ARC165D] Substring Comparison 题解.md","raw":"---\ntitle: \"AT_arc165_d [ARC165D] Substring Comparison 题解\"\ntag: AtCoder\nmathjax: true\n---\n\n# AT_arc165_d [ARC165D] Substring Comparison 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/AT_arc165_d)\n\n[AtCoder](https://atcoder.jp/contests/arc165/tasks/arc165_d)\n\n## Description\n\n给定正整数 $n,m$ 和 $m$ 个形如 $(A_{i},B_{i},C_{i},D_{i})$ 的限制条件。\n\n判断是否存在一个长度为 $n$ 的序列 $P$ 满足 $\\forall i \\in [1,m]$，$P_{A_{i} \\dots B_{i}}$ 字典序小于 $P_{C_{i} \\dots D_{i}}$。\n\n$1 \\leq n,m \\leq 2 \\times 10^{3}$。\n\n## Solution\n\n考虑比较字典序时的操作：如果某一位相同，不会造成影响，当一个串先比较完时，这个串更小，否则字典序取决于需要的比较第一个不同的。\n\n因此可以考虑逐步减小限制的区间，具体的，当两个区间均不为空时，我们判断两区间左端是否相同，若相同，区间左端一起向右移动一位即可。\n\n考虑剩下的小于关系构成的有向图：如果存在环，这些数必须相同，大小关系继承到下一位。\n\n如果不存在环，答案成立，直接输出即可。\n\n如果一组限制的第二个区间先被取完，这样的数据无法构造出解，直接输出即可。\n\n实现的时候用并查集记录大小相同的位置，用 tarjan 找环。\n\n## Codes\n\n```cpp\n// Problem: D - Substring Comparison\n// Contest: AtCoder - AtCoder Regular Contest 165\n// URL: https://atcoder.jp/contests/arc165/tasks/arc165_d\n// Memory Limit: 1024 MB\n// Time Limit: 2000 ms\n//\n// Powered by CP Editor (https://cpeditor.org)\n\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 510101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint n, m;\nstruct node\n{\n    int to, nxt;\n} edge[max_n];\nint head[max_n], tot;\nvoid add(int u, int v)\n{\n    edge[++tot].to = v;\n    edge[tot].nxt = head[u];\n    head[u] = tot;\n}\nstruct Query\n{\n    int a, b, c, d;\n} que[max_n];\nint fa[max_n];\nint find(int u)\n{\n    if (fa[u] == u)\n    {\n        return u;\n    }\n    return fa[u] = find(fa[u]);\n}\nvoid merge(int u, int v)\n{\n    if (find(u) == find(v))\n    {\n        return;\n    }\n    fa[find(u)] = find(v);\n}\nint dfn[max_n], low[max_n], timer, st[max_n], vis[max_n];\nint col[max_n], c;\nbool no_circle;\nvoid tarjan(int u)\n{\n    st[++st[0]] = u;\n    dfn[u] = low[u] = ++timer;\n    vis[u] = 1;\n    for (int i = head[u]; i; i = edge[i].nxt)\n    {\n        int v = edge[i].to;\n        if (!dfn[v])\n        {\n            tarjan(v);\n            low[u] = min(low[u], low[v]);\n        }\n        else if (vis[v])\n        {\n            low[u] = min(low[u], dfn[v]);\n        }\n    }\n    if (dfn[u] == low[u])\n    {\n        ++c;\n        int now;\n        do\n        {\n            now = st[st[0]--];\n            col[c] = c;\n            merge(u, now);\n            vis[now] = 0;\n        } while (now != u);\n    }\n}\nsigned main()\n{\n    read(n), read(m);\n    for (int i = 1; i <= n; i++)\n    {\n        fa[i] = i;\n    }\n    for (int i = 1; i <= m; i++)\n    {\n        read(que[i].a);\n        read(que[i].b);\n        read(que[i].c);\n        read(que[i].d);\n    }\n    for (int T = 1; T <= m; T++)\n    {\n        for (int j = 1; j <= n; j++)\n        {\n            head[j] = 0;\n            dfn[j] = low[j] = 0;\n            vis[j] = 0;\n            col[j] = 0;\n        }\n        tot = 0, c = 0, timer = 0;\n        for (int i = 1; i <= m; i++)\n        {\n\n            while (find(que[i].a) == find(que[i].c) && que[i].a <= que[i].b && que[i].c <= que[i].d)\n            {\n                ++que[i].a;\n                ++que[i].c;\n            }\n            if (que[i].c > que[i].d)\n            {\n                puts(\"No\");\n                exit(0);\n            }\n            if (que[i].a <= que[i].b)\n            {\n                add(find(que[i].a), find(que[i].c));\n            }\n        }\n        for (int j = 1; j <= n; j++)\n        {\n            if (!dfn[j])\n            {\n                tarjan(j);\n            }\n        }\n        if (c == n)\n        {\n            puts(\"Yes\");\n            exit(0);\n        }\n    }\n    return 0;\n}\n```","slug":"AT_arc165_d [ARC165D] Substring Comparison 题解","published":1,"date":"2023-10-04T14:11:08.244Z","updated":"2023-10-04T14:11:08.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9yj000fosja1fej2u4h","content":"<h1 id=\"at_arc165_d-arc165d-substring-comparison-题解\">AT_arc165_d\r\n[ARC165D] Substring Comparison 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_arc165_d\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/arc165/tasks/arc165_d\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定正整数 <span class=\"math inline\">\\(n,m\\)</span> 和 <span\r\nclass=\"math inline\">\\(m\\)</span> 个形如 <span\r\nclass=\"math inline\">\\((A_{i},B_{i},C_{i},D_{i})\\)</span>\r\n的限制条件。</p>\r\n<p>判断是否存在一个长度为 <span class=\"math inline\">\\(n\\)</span> 的序列\r\n<span class=\"math inline\">\\(P\\)</span> 满足 <span\r\nclass=\"math inline\">\\(\\forall i \\in [1,m]\\)</span>，<span\r\nclass=\"math inline\">\\(P_{A_{i} \\dots B_{i}}\\)</span> 字典序小于 <span\r\nclass=\"math inline\">\\(P_{C_{i} \\dots D_{i}}\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(1 \\leq n,m \\leq 2 \\times\r\n10^{3}\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>考虑比较字典序时的操作：如果某一位相同，不会造成影响，当一个串先比较完时，这个串更小，否则字典序取决于需要的比较第一个不同的。</p>\r\n<p>因此可以考虑逐步减小限制的区间，具体的，当两个区间均不为空时，我们判断两区间左端是否相同，若相同，区间左端一起向右移动一位即可。</p>\r\n<p>考虑剩下的小于关系构成的有向图：如果存在环，这些数必须相同，大小关系继承到下一位。</p>\r\n<p>如果不存在环，答案成立，直接输出即可。</p>\r\n<p>如果一组限制的第二个区间先被取完，这样的数据无法构造出解，直接输出即可。</p>\r\n<p>实现的时候用并查集记录大小相同的位置，用 tarjan 找环。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Problem: D - Substring Comparison</span></span><br><span class=\"line\"><span class=\"comment\">// Contest: AtCoder - AtCoder Regular Contest 165</span></span><br><span class=\"line\"><span class=\"comment\">// URL: https://atcoder.jp/contests/arc165/tasks/arc165_d</span></span><br><span class=\"line\"><span class=\"comment\">// Memory Limit: 1024 MB</span></span><br><span class=\"line\"><span class=\"comment\">// Time Limit: 2000 ms</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 510101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> to, nxt;</span><br><span class=\"line\">&#125; edge[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> head[max_n], tot;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edge[++tot].to = v;</span><br><span class=\"line\">    edge[tot].nxt = head[u];</span><br><span class=\"line\">    head[u] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Query</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a, b, c, d;</span><br><span class=\"line\">&#125; que[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> fa[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fa[u] == u)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fa[u] = <span class=\"built_in\">find</span>(fa[u]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(u) == <span class=\"built_in\">find</span>(v))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fa[<span class=\"built_in\">find</span>(u)] = <span class=\"built_in\">find</span>(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> dfn[max_n], low[max_n], timer, st[max_n], vis[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> col[max_n], c;</span><br><span class=\"line\"><span class=\"type\">bool</span> no_circle;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    st[++st[<span class=\"number\">0</span>]] = u;</span><br><span class=\"line\">    dfn[u] = low[u] = ++timer;</span><br><span class=\"line\">    vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = head[u]; i; i = edge[i].nxt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">tarjan</span>(v);</span><br><span class=\"line\">            low[u] = <span class=\"built_in\">min</span>(low[u], low[v]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vis[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            low[u] = <span class=\"built_in\">min</span>(low[u], dfn[v]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dfn[u] == low[u])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ++c;</span><br><span class=\"line\">        <span class=\"type\">int</span> now;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            now = st[st[<span class=\"number\">0</span>]--];</span><br><span class=\"line\">            col[c] = c;</span><br><span class=\"line\">            <span class=\"built_in\">merge</span>(u, now);</span><br><span class=\"line\">            vis[now] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (now != u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n), <span class=\"built_in\">read</span>(m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fa[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(que[i].a);</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(que[i].b);</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(que[i].c);</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(que[i].d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> T = <span class=\"number\">1</span>; T &lt;= m; T++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            head[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            dfn[j] = low[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            vis[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            col[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tot = <span class=\"number\">0</span>, c = <span class=\"number\">0</span>, timer = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"built_in\">find</span>(que[i].a) == <span class=\"built_in\">find</span>(que[i].c) &amp;&amp; que[i].a &lt;= que[i].b &amp;&amp; que[i].c &lt;= que[i].d)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ++que[i].a;</span><br><span class=\"line\">                ++que[i].c;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (que[i].c &gt; que[i].d)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">                <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (que[i].a &lt;= que[i].b)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">add</span>(<span class=\"built_in\">find</span>(que[i].a), <span class=\"built_in\">find</span>(que[i].c));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!dfn[j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">tarjan</span>(j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"at_arc165_d-arc165d-substring-comparison-题解\">AT_arc165_d\r\n[ARC165D] Substring Comparison 题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_arc165_d\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/arc165/tasks/arc165_d\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定正整数 <span class=\"math inline\">\\(n,m\\)</span> 和 <span\r\nclass=\"math inline\">\\(m\\)</span> 个形如 <span\r\nclass=\"math inline\">\\((A_{i},B_{i},C_{i},D_{i})\\)</span>\r\n的限制条件。</p>\r\n<p>判断是否存在一个长度为 <span class=\"math inline\">\\(n\\)</span> 的序列\r\n<span class=\"math inline\">\\(P\\)</span> 满足 <span\r\nclass=\"math inline\">\\(\\forall i \\in [1,m]\\)</span>，<span\r\nclass=\"math inline\">\\(P_{A_{i} \\dots B_{i}}\\)</span> 字典序小于 <span\r\nclass=\"math inline\">\\(P_{C_{i} \\dots D_{i}}\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(1 \\leq n,m \\leq 2 \\times\r\n10^{3}\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>考虑比较字典序时的操作：如果某一位相同，不会造成影响，当一个串先比较完时，这个串更小，否则字典序取决于需要的比较第一个不同的。</p>\r\n<p>因此可以考虑逐步减小限制的区间，具体的，当两个区间均不为空时，我们判断两区间左端是否相同，若相同，区间左端一起向右移动一位即可。</p>\r\n<p>考虑剩下的小于关系构成的有向图：如果存在环，这些数必须相同，大小关系继承到下一位。</p>\r\n<p>如果不存在环，答案成立，直接输出即可。</p>\r\n<p>如果一组限制的第二个区间先被取完，这样的数据无法构造出解，直接输出即可。</p>\r\n<p>实现的时候用并查集记录大小相同的位置，用 tarjan 找环。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Problem: D - Substring Comparison</span></span><br><span class=\"line\"><span class=\"comment\">// Contest: AtCoder - AtCoder Regular Contest 165</span></span><br><span class=\"line\"><span class=\"comment\">// URL: https://atcoder.jp/contests/arc165/tasks/arc165_d</span></span><br><span class=\"line\"><span class=\"comment\">// Memory Limit: 1024 MB</span></span><br><span class=\"line\"><span class=\"comment\">// Time Limit: 2000 ms</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 510101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> to, nxt;</span><br><span class=\"line\">&#125; edge[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> head[max_n], tot;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edge[++tot].to = v;</span><br><span class=\"line\">    edge[tot].nxt = head[u];</span><br><span class=\"line\">    head[u] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Query</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a, b, c, d;</span><br><span class=\"line\">&#125; que[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> fa[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fa[u] == u)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fa[u] = <span class=\"built_in\">find</span>(fa[u]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(u) == <span class=\"built_in\">find</span>(v))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fa[<span class=\"built_in\">find</span>(u)] = <span class=\"built_in\">find</span>(v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> dfn[max_n], low[max_n], timer, st[max_n], vis[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> col[max_n], c;</span><br><span class=\"line\"><span class=\"type\">bool</span> no_circle;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    st[++st[<span class=\"number\">0</span>]] = u;</span><br><span class=\"line\">    dfn[u] = low[u] = ++timer;</span><br><span class=\"line\">    vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = head[u]; i; i = edge[i].nxt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!dfn[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">tarjan</span>(v);</span><br><span class=\"line\">            low[u] = <span class=\"built_in\">min</span>(low[u], low[v]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (vis[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            low[u] = <span class=\"built_in\">min</span>(low[u], dfn[v]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dfn[u] == low[u])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ++c;</span><br><span class=\"line\">        <span class=\"type\">int</span> now;</span><br><span class=\"line\">        <span class=\"keyword\">do</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            now = st[st[<span class=\"number\">0</span>]--];</span><br><span class=\"line\">            col[c] = c;</span><br><span class=\"line\">            <span class=\"built_in\">merge</span>(u, now);</span><br><span class=\"line\">            vis[now] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (now != u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n), <span class=\"built_in\">read</span>(m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fa[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(que[i].a);</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(que[i].b);</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(que[i].c);</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(que[i].d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> T = <span class=\"number\">1</span>; T &lt;= m; T++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            head[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            dfn[j] = low[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            vis[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            col[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tot = <span class=\"number\">0</span>, c = <span class=\"number\">0</span>, timer = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"built_in\">find</span>(que[i].a) == <span class=\"built_in\">find</span>(que[i].c) &amp;&amp; que[i].a &lt;= que[i].b &amp;&amp; que[i].c &lt;= que[i].d)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ++que[i].a;</span><br><span class=\"line\">                ++que[i].c;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (que[i].c &gt; que[i].d)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">                <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (que[i].a &lt;= que[i].b)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">add</span>(<span class=\"built_in\">find</span>(que[i].a), <span class=\"built_in\">find</span>(que[i].c));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!dfn[j])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">tarjan</span>(j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\">            <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1268B 题解","mathjax":true,"_content":"\n# CF1268B 题解\n\n<!-- more -->\n\n\n## 题目翻译\n\n给你一个杨表，用一个有 $n$ 个元素的数组 $a$ 表示杨表每一列的高度。你需要用 $1 \\times 2$ 或 $2 \\times 1$ 的骨牌填充这个杨表，求出最多填充的骨牌数量。\n\n## 题目分析\n\n我们先来处理一个问题：什么是杨表？\n\n- **杨表是一种每行长度（或每列高度） 单调递减的不规则图**，注意这里**并非**要求严格递减，相邻行的长度（或列的高度）可以相同。\n\n对于这道题，我们将杨表交替染色。为了统一标准，我们规定第奇数行的第奇数个位置染为黑色，交错排列。\n\n例如题目中给出的图片，染色后如下图。\n\n![染色图片](https://cdn.luogu.com.cn/upload/image_hosting/gjmquur9.png)\n\n染色之后，我们可以从小的杨表入手，推导关系。如下图所示，我们可以发现，对于黑白色数量相同的杨图：\n- 若有长度相同的行（或高度相同的列），则可以将最外侧高度相同的两个块用一个单位杨图覆盖，例如上图，可用单位杨图覆盖第二行第三、第四两小块（上图并不符合我们黑白色数相同的条件，在此仅用于举例），剩余部分仍为黑白数量相同，且存在长度相同的行（或高度相同的列）。如此递归，可用单位杨图覆盖原图形。\n\n\n![排列图片](https://cdn.luogu.com.cn/upload/image_hosting/iu9xhbnt.png)\n\n- 而白色和黑色个数不同的杨图，一定形如下图所示的严格单调递增阶梯状，无论何种情况的阶梯状杨表都无法做到白色和黑色个数相同。\n\n![阶梯](https://cdn.luogu.com.cn/upload/image_hosting/0s0tl2ot.png)\n\n通过推导，我们可以发现用左上角的两个单位杨图，可以以拼成任意**白色和黑色个数相同**的杨图（以下称为优秀杨图），此时填充的骨牌数量即为白色格子数。在优秀杨图上，我们可以继续拓展，得到所有的杨图。若从一个优秀杨图拓展到目标图需要的格子最少（以下称为最优方案），则拓展的部分不能再放骨牌（否则会产生新的单位杨图，可以从包含新产生的单位杨图的优秀杨图开始拓展，原方案不是最优方案）。\n\n\n因此，我们得出了结论，**可以摆放的骨牌数等于单位杨图数量即黑白块中个数较少的块数**。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 300100\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if(x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if(x>9)\n    {\n        write_(x/10);\n    }\n    putchar(x%10+'0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint n,num;\nint sum1,sum2;\nsigned main()\n{\n    #if _clang_\n        freopen(\"1.in\",\"r\",stdin);\n        freopen(\"1.out\",\"w\",stdout);\n    #endif \n    read(n);\n    for(int i = 1;i<=n;i++)\n    {\n        read(num);\n        sum1 += num /2;\n        sum2 += num/2;\n        if(num%2 != 0)\n        {\n            if(i % 2 !=0)\n            {\n                sum1++;\n            }\n            else\n            {\n                sum2++;\n            }\n        }\n    }\n    writeln(min(sum1,sum2));\n    return 0;\n}\n```\n","source":"_posts/CF1268B 题解.md","raw":"---\ntitle: \"CF1268B 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF1268B 题解\n\n<!-- more -->\n\n\n## 题目翻译\n\n给你一个杨表，用一个有 $n$ 个元素的数组 $a$ 表示杨表每一列的高度。你需要用 $1 \\times 2$ 或 $2 \\times 1$ 的骨牌填充这个杨表，求出最多填充的骨牌数量。\n\n## 题目分析\n\n我们先来处理一个问题：什么是杨表？\n\n- **杨表是一种每行长度（或每列高度） 单调递减的不规则图**，注意这里**并非**要求严格递减，相邻行的长度（或列的高度）可以相同。\n\n对于这道题，我们将杨表交替染色。为了统一标准，我们规定第奇数行的第奇数个位置染为黑色，交错排列。\n\n例如题目中给出的图片，染色后如下图。\n\n![染色图片](https://cdn.luogu.com.cn/upload/image_hosting/gjmquur9.png)\n\n染色之后，我们可以从小的杨表入手，推导关系。如下图所示，我们可以发现，对于黑白色数量相同的杨图：\n- 若有长度相同的行（或高度相同的列），则可以将最外侧高度相同的两个块用一个单位杨图覆盖，例如上图，可用单位杨图覆盖第二行第三、第四两小块（上图并不符合我们黑白色数相同的条件，在此仅用于举例），剩余部分仍为黑白数量相同，且存在长度相同的行（或高度相同的列）。如此递归，可用单位杨图覆盖原图形。\n\n\n![排列图片](https://cdn.luogu.com.cn/upload/image_hosting/iu9xhbnt.png)\n\n- 而白色和黑色个数不同的杨图，一定形如下图所示的严格单调递增阶梯状，无论何种情况的阶梯状杨表都无法做到白色和黑色个数相同。\n\n![阶梯](https://cdn.luogu.com.cn/upload/image_hosting/0s0tl2ot.png)\n\n通过推导，我们可以发现用左上角的两个单位杨图，可以以拼成任意**白色和黑色个数相同**的杨图（以下称为优秀杨图），此时填充的骨牌数量即为白色格子数。在优秀杨图上，我们可以继续拓展，得到所有的杨图。若从一个优秀杨图拓展到目标图需要的格子最少（以下称为最优方案），则拓展的部分不能再放骨牌（否则会产生新的单位杨图，可以从包含新产生的单位杨图的优秀杨图开始拓展，原方案不是最优方案）。\n\n\n因此，我们得出了结论，**可以摆放的骨牌数等于单位杨图数量即黑白块中个数较少的块数**。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 300100\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if(x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if(x>9)\n    {\n        write_(x/10);\n    }\n    putchar(x%10+'0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint n,num;\nint sum1,sum2;\nsigned main()\n{\n    #if _clang_\n        freopen(\"1.in\",\"r\",stdin);\n        freopen(\"1.out\",\"w\",stdout);\n    #endif \n    read(n);\n    for(int i = 1;i<=n;i++)\n    {\n        read(num);\n        sum1 += num /2;\n        sum2 += num/2;\n        if(num%2 != 0)\n        {\n            if(i % 2 !=0)\n            {\n                sum1++;\n            }\n            else\n            {\n                sum2++;\n            }\n        }\n    }\n    writeln(min(sum1,sum2));\n    return 0;\n}\n```\n","slug":"CF1268B 题解","published":1,"date":"2023-10-04T14:11:08.244Z","updated":"2023-10-04T14:11:08.244Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9yk000iosja8s8o3cx1","content":"<h1 id=\"cf1268b-题解\">CF1268B 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"题目翻译\">题目翻译</h2>\r\n<p>给你一个杨表，用一个有 <span class=\"math inline\">\\(n\\)</span>\r\n个元素的数组 <span class=\"math inline\">\\(a\\)</span>\r\n表示杨表每一列的高度。你需要用 <span class=\"math inline\">\\(1 \\times\r\n2\\)</span> 或 <span class=\"math inline\">\\(2 \\times 1\\)</span>\r\n的骨牌填充这个杨表，求出最多填充的骨牌数量。</p>\r\n<h2 id=\"题目分析\">题目分析</h2>\r\n<p>我们先来处理一个问题：什么是杨表？</p>\r\n<ul>\r\n<li><strong>杨表是一种每行长度（或每列高度）\r\n单调递减的不规则图</strong>，注意这里<strong>并非</strong>要求严格递减，相邻行的长度（或列的高度）可以相同。</li>\r\n</ul>\r\n<p>对于这道题，我们将杨表交替染色。为了统一标准，我们规定第奇数行的第奇数个位置染为黑色，交错排列。</p>\r\n<p>例如题目中给出的图片，染色后如下图。</p>\r\n<figure>\r\n<img src=\"https://cdn.luogu.com.cn/upload/image_hosting/gjmquur9.png\"\r\nalt=\"染色图片\" />\r\n<figcaption aria-hidden=\"true\">染色图片</figcaption>\r\n</figure>\r\n<p>染色之后，我们可以从小的杨表入手，推导关系。如下图所示，我们可以发现，对于黑白色数量相同的杨图：\r\n-\r\n若有长度相同的行（或高度相同的列），则可以将最外侧高度相同的两个块用一个单位杨图覆盖，例如上图，可用单位杨图覆盖第二行第三、第四两小块（上图并不符合我们黑白色数相同的条件，在此仅用于举例），剩余部分仍为黑白数量相同，且存在长度相同的行（或高度相同的列）。如此递归，可用单位杨图覆盖原图形。</p>\r\n<figure>\r\n<img src=\"https://cdn.luogu.com.cn/upload/image_hosting/iu9xhbnt.png\"\r\nalt=\"排列图片\" />\r\n<figcaption aria-hidden=\"true\">排列图片</figcaption>\r\n</figure>\r\n<ul>\r\n<li>而白色和黑色个数不同的杨图，一定形如下图所示的严格单调递增阶梯状，无论何种情况的阶梯状杨表都无法做到白色和黑色个数相同。</li>\r\n</ul>\r\n<figure>\r\n<img src=\"https://cdn.luogu.com.cn/upload/image_hosting/0s0tl2ot.png\"\r\nalt=\"阶梯\" />\r\n<figcaption aria-hidden=\"true\">阶梯</figcaption>\r\n</figure>\r\n<p>通过推导，我们可以发现用左上角的两个单位杨图，可以以拼成任意<strong>白色和黑色个数相同</strong>的杨图（以下称为优秀杨图），此时填充的骨牌数量即为白色格子数。在优秀杨图上，我们可以继续拓展，得到所有的杨图。若从一个优秀杨图拓展到目标图需要的格子最少（以下称为最优方案），则拓展的部分不能再放骨牌（否则会产生新的单位杨图，可以从包含新产生的单位杨图的优秀杨图开始拓展，原方案不是最优方案）。</p>\r\n<p>因此，我们得出了结论，<strong>可以摆放的骨牌数等于单位杨图数量即黑白块中个数较少的块数</strong>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 300100</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;<span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x/<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x%<span class=\"number\">10</span>+<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,num;</span><br><span class=\"line\"><span class=\"type\">int</span> sum1,sum2;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,stdin);</span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">endif</span> </span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(num);</span><br><span class=\"line\">        sum1 += num /<span class=\"number\">2</span>;</span><br><span class=\"line\">        sum2 += num/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num%<span class=\"number\">2</span> != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i % <span class=\"number\">2</span> !=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sum1++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sum2++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(<span class=\"built_in\">min</span>(sum1,sum2));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf1268b-题解\">CF1268B 题解</h1>","more":"<h2 id=\"题目翻译\">题目翻译</h2>\r\n<p>给你一个杨表，用一个有 <span class=\"math inline\">\\(n\\)</span>\r\n个元素的数组 <span class=\"math inline\">\\(a\\)</span>\r\n表示杨表每一列的高度。你需要用 <span class=\"math inline\">\\(1 \\times\r\n2\\)</span> 或 <span class=\"math inline\">\\(2 \\times 1\\)</span>\r\n的骨牌填充这个杨表，求出最多填充的骨牌数量。</p>\r\n<h2 id=\"题目分析\">题目分析</h2>\r\n<p>我们先来处理一个问题：什么是杨表？</p>\r\n<ul>\r\n<li><strong>杨表是一种每行长度（或每列高度）\r\n单调递减的不规则图</strong>，注意这里<strong>并非</strong>要求严格递减，相邻行的长度（或列的高度）可以相同。</li>\r\n</ul>\r\n<p>对于这道题，我们将杨表交替染色。为了统一标准，我们规定第奇数行的第奇数个位置染为黑色，交错排列。</p>\r\n<p>例如题目中给出的图片，染色后如下图。</p>\r\n<figure>\r\n<img src=\"https://cdn.luogu.com.cn/upload/image_hosting/gjmquur9.png\"\r\nalt=\"染色图片\" />\r\n<figcaption aria-hidden=\"true\">染色图片</figcaption>\r\n</figure>\r\n<p>染色之后，我们可以从小的杨表入手，推导关系。如下图所示，我们可以发现，对于黑白色数量相同的杨图：\r\n-\r\n若有长度相同的行（或高度相同的列），则可以将最外侧高度相同的两个块用一个单位杨图覆盖，例如上图，可用单位杨图覆盖第二行第三、第四两小块（上图并不符合我们黑白色数相同的条件，在此仅用于举例），剩余部分仍为黑白数量相同，且存在长度相同的行（或高度相同的列）。如此递归，可用单位杨图覆盖原图形。</p>\r\n<figure>\r\n<img src=\"https://cdn.luogu.com.cn/upload/image_hosting/iu9xhbnt.png\"\r\nalt=\"排列图片\" />\r\n<figcaption aria-hidden=\"true\">排列图片</figcaption>\r\n</figure>\r\n<ul>\r\n<li>而白色和黑色个数不同的杨图，一定形如下图所示的严格单调递增阶梯状，无论何种情况的阶梯状杨表都无法做到白色和黑色个数相同。</li>\r\n</ul>\r\n<figure>\r\n<img src=\"https://cdn.luogu.com.cn/upload/image_hosting/0s0tl2ot.png\"\r\nalt=\"阶梯\" />\r\n<figcaption aria-hidden=\"true\">阶梯</figcaption>\r\n</figure>\r\n<p>通过推导，我们可以发现用左上角的两个单位杨图，可以以拼成任意<strong>白色和黑色个数相同</strong>的杨图（以下称为优秀杨图），此时填充的骨牌数量即为白色格子数。在优秀杨图上，我们可以继续拓展，得到所有的杨图。若从一个优秀杨图拓展到目标图需要的格子最少（以下称为最优方案），则拓展的部分不能再放骨牌（否则会产生新的单位杨图，可以从包含新产生的单位杨图的优秀杨图开始拓展，原方案不是最优方案）。</p>\r\n<p>因此，我们得出了结论，<strong>可以摆放的骨牌数等于单位杨图数量即黑白块中个数较少的块数</strong>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 300100</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;<span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x/<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x%<span class=\"number\">10</span>+<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,num;</span><br><span class=\"line\"><span class=\"type\">int</span> sum1,sum2;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,stdin);</span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">endif</span> </span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(num);</span><br><span class=\"line\">        sum1 += num /<span class=\"number\">2</span>;</span><br><span class=\"line\">        sum2 += num/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num%<span class=\"number\">2</span> != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i % <span class=\"number\">2</span> !=<span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sum1++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sum2++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(<span class=\"built_in\">min</span>(sum1,sum2));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1394D Boboniu and Jianghu 题解","mathjax":true,"_content":"\n# CF1394D Boboniu and Jianghu 题解\n\n<!-- more -->\n\n\n## Links\n\n[Luogu](https://www.luogu.com.cn/problem/CF1394D)\n\n[Codeforces](http://codeforces.com/problemset/problem/1394/D)\n\n## Solution\n\n可以处理出对于每个点，向下 $b$ 递增的最小 $a$ 之和 $dp_{i,0}$ 和向下 $b$ 递减的最小 $a$ 之和 $dp_{i,1}$。令与一个点 $u$ 相连的点中有 $k_{1}$ 个 $b$ 值大于点 $u$ 的，剩余 $k_{2}$ 个小于点 $u$ 的，则该点贡献为 $\\max(k_{1},k_{2}) \\times  a_{u}$。\n\n对于个端点指出的边，若两端点的 $b$ 值相等则既可以连接子树递增的链，又可以连接子树递减的链。我们先假设连接递增的链，然后贪心的改变一些链接情况。具体的，找到从链接递增改变到连接递减后改变最大的一部分进行改变。\n\n利用 dfs 进行转移即可。\n\n该部分代码：\n\n```cpp\nvoid dfs(int u, int fa)\n{\n    int sum = 0, cnt_up = 0, cnt_down = 0;\n    for (int i = head[u]; i; i = edge[i].nxt)\n    {\n        int v = edge[i].to;\n        if (v == fa)\n        {\n            continue;\n        }\n        dfs(v, u);\n        // 可以递增，可以递减\n        if (points[u].b == points[v].b)\n        {\n            // 换一个的价值\n            st[u].push_back(dp[v][1] - dp[v][0]);\n            // 先假定递增\n            ++cnt_up;\n            sum += dp[v][0];\n        }\n        else if (points[u].b > points[v].b)\n        {\n            ++cnt_up;\n            sum += dp[v][0];\n        }\n        else\n        {\n            ++cnt_down;\n            sum += dp[v][1];\n        }\n    }\n    sort(st[u].begin(), st[u].end());\n    // 把多少个转换\n    for (int i = 0; i <= st[u].size(); i++)\n    {\n        dp[u][0] = min(dp[u][0], sum + max(cnt_up, cnt_down + (u != 1)) * points[u].a);\n        dp[u][1] = min(dp[u][1], sum + max(cnt_up + (u != 1), cnt_down) * points[u].a);\n        --cnt_up, ++cnt_down; // 改变了一条边\n        if (i < st[u].size())\n        {\n            sum += st[u][i];\n        }\n    }\n}\n```\n\n注意到当 $u = 1$ 时需要特殊转移，即两条链可以合并为一条。最终答案即为 $\\min(dp_{1,0},dp_{1,1})$。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 210101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint n;\nstruct node\n{\n    int to, nxt;\n} edge[max_n << 1];\nint head[max_n], tot;\nvoid add(int u, int v)\n{\n    edge[++tot].to = v;\n    edge[tot].nxt = head[u];\n    head[u] = tot;\n}\nstruct Point\n{\n    int a, b;\n} points[max_n];\nint dp[max_n][2];\nvector<int> st[max_n];\nvoid dfs(int u, int fa)\n{\n    int sum = 0, cnt_up = 0, cnt_down = 0;\n    for (int i = head[u]; i; i = edge[i].nxt)\n    {\n        int v = edge[i].to;\n        if (v == fa)\n        {\n            continue;\n        }\n        dfs(v, u);\n        // 可以递增，可以递减\n        if (points[u].b == points[v].b)\n        {\n            // 换一个的价值\n            st[u].push_back(dp[v][1] - dp[v][0]);\n            // 先假定递增\n            ++cnt_up;\n            sum += dp[v][0];\n        }\n        else if (points[u].b > points[v].b)\n        {\n            ++cnt_up;\n            sum += dp[v][0];\n        }\n        else\n        {\n            ++cnt_down;\n            sum += dp[v][1];\n        }\n    }\n    sort(st[u].begin(), st[u].end());\n    // 把多少个转换\n    for (int i = 0; i <= st[u].size(); i++)\n    {\n        dp[u][0] = min(dp[u][0], sum + max(cnt_up, cnt_down + (u != 1)) * points[u].a);\n        dp[u][1] = min(dp[u][1], sum + max(cnt_up + (u != 1), cnt_down) * points[u].a);\n        --cnt_up, ++cnt_down; // 改变了一条边\n        if (i < st[u].size())\n        {\n            sum += st[u][i];\n        }\n    }\n}\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(n);\n    for (int i = 1; i <= n; i++)\n    {\n        read(points[i].a);\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        read(points[i].b);\n    }\n    for (int i = 1, u, v; i < n; i++)\n    {\n        read(u), read(v);\n        add(u, v);\n        add(v, u);\n    }\n    memset(dp, 0x3f, sizeof(dp));\n    dfs(1, 0);\n    writeln(min(dp[1][0], dp[1][1]));\n    return 0;\n}\n```","source":"_posts/CF1394D Boboniu and Jianghu 题解.md","raw":"---\ntitle: \"CF1394D Boboniu and Jianghu 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF1394D Boboniu and Jianghu 题解\n\n<!-- more -->\n\n\n## Links\n\n[Luogu](https://www.luogu.com.cn/problem/CF1394D)\n\n[Codeforces](http://codeforces.com/problemset/problem/1394/D)\n\n## Solution\n\n可以处理出对于每个点，向下 $b$ 递增的最小 $a$ 之和 $dp_{i,0}$ 和向下 $b$ 递减的最小 $a$ 之和 $dp_{i,1}$。令与一个点 $u$ 相连的点中有 $k_{1}$ 个 $b$ 值大于点 $u$ 的，剩余 $k_{2}$ 个小于点 $u$ 的，则该点贡献为 $\\max(k_{1},k_{2}) \\times  a_{u}$。\n\n对于个端点指出的边，若两端点的 $b$ 值相等则既可以连接子树递增的链，又可以连接子树递减的链。我们先假设连接递增的链，然后贪心的改变一些链接情况。具体的，找到从链接递增改变到连接递减后改变最大的一部分进行改变。\n\n利用 dfs 进行转移即可。\n\n该部分代码：\n\n```cpp\nvoid dfs(int u, int fa)\n{\n    int sum = 0, cnt_up = 0, cnt_down = 0;\n    for (int i = head[u]; i; i = edge[i].nxt)\n    {\n        int v = edge[i].to;\n        if (v == fa)\n        {\n            continue;\n        }\n        dfs(v, u);\n        // 可以递增，可以递减\n        if (points[u].b == points[v].b)\n        {\n            // 换一个的价值\n            st[u].push_back(dp[v][1] - dp[v][0]);\n            // 先假定递增\n            ++cnt_up;\n            sum += dp[v][0];\n        }\n        else if (points[u].b > points[v].b)\n        {\n            ++cnt_up;\n            sum += dp[v][0];\n        }\n        else\n        {\n            ++cnt_down;\n            sum += dp[v][1];\n        }\n    }\n    sort(st[u].begin(), st[u].end());\n    // 把多少个转换\n    for (int i = 0; i <= st[u].size(); i++)\n    {\n        dp[u][0] = min(dp[u][0], sum + max(cnt_up, cnt_down + (u != 1)) * points[u].a);\n        dp[u][1] = min(dp[u][1], sum + max(cnt_up + (u != 1), cnt_down) * points[u].a);\n        --cnt_up, ++cnt_down; // 改变了一条边\n        if (i < st[u].size())\n        {\n            sum += st[u][i];\n        }\n    }\n}\n```\n\n注意到当 $u = 1$ 时需要特殊转移，即两条链可以合并为一条。最终答案即为 $\\min(dp_{1,0},dp_{1,1})$。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 210101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint n;\nstruct node\n{\n    int to, nxt;\n} edge[max_n << 1];\nint head[max_n], tot;\nvoid add(int u, int v)\n{\n    edge[++tot].to = v;\n    edge[tot].nxt = head[u];\n    head[u] = tot;\n}\nstruct Point\n{\n    int a, b;\n} points[max_n];\nint dp[max_n][2];\nvector<int> st[max_n];\nvoid dfs(int u, int fa)\n{\n    int sum = 0, cnt_up = 0, cnt_down = 0;\n    for (int i = head[u]; i; i = edge[i].nxt)\n    {\n        int v = edge[i].to;\n        if (v == fa)\n        {\n            continue;\n        }\n        dfs(v, u);\n        // 可以递增，可以递减\n        if (points[u].b == points[v].b)\n        {\n            // 换一个的价值\n            st[u].push_back(dp[v][1] - dp[v][0]);\n            // 先假定递增\n            ++cnt_up;\n            sum += dp[v][0];\n        }\n        else if (points[u].b > points[v].b)\n        {\n            ++cnt_up;\n            sum += dp[v][0];\n        }\n        else\n        {\n            ++cnt_down;\n            sum += dp[v][1];\n        }\n    }\n    sort(st[u].begin(), st[u].end());\n    // 把多少个转换\n    for (int i = 0; i <= st[u].size(); i++)\n    {\n        dp[u][0] = min(dp[u][0], sum + max(cnt_up, cnt_down + (u != 1)) * points[u].a);\n        dp[u][1] = min(dp[u][1], sum + max(cnt_up + (u != 1), cnt_down) * points[u].a);\n        --cnt_up, ++cnt_down; // 改变了一条边\n        if (i < st[u].size())\n        {\n            sum += st[u][i];\n        }\n    }\n}\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(n);\n    for (int i = 1; i <= n; i++)\n    {\n        read(points[i].a);\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        read(points[i].b);\n    }\n    for (int i = 1, u, v; i < n; i++)\n    {\n        read(u), read(v);\n        add(u, v);\n        add(v, u);\n    }\n    memset(dp, 0x3f, sizeof(dp));\n    dfs(1, 0);\n    writeln(min(dp[1][0], dp[1][1]));\n    return 0;\n}\n```","slug":"CF1394D Boboniu and Jianghu 题解","published":1,"date":"2023-10-04T14:11:08.245Z","updated":"2023-10-04T14:11:08.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9ym000kosjaaq8g5rph","content":"<h1 id=\"cf1394d-boboniu-and-jianghu-题解\">CF1394D Boboniu and Jianghu\r\n题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1394D\">Luogu</a></p>\r\n<p><a\r\nhref=\"http://codeforces.com/problemset/problem/1394/D\">Codeforces</a></p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>可以处理出对于每个点，向下 <span class=\"math inline\">\\(b\\)</span>\r\n递增的最小 <span class=\"math inline\">\\(a\\)</span> 之和 <span\r\nclass=\"math inline\">\\(dp_{i,0}\\)</span> 和向下 <span\r\nclass=\"math inline\">\\(b\\)</span> 递减的最小 <span\r\nclass=\"math inline\">\\(a\\)</span> 之和 <span\r\nclass=\"math inline\">\\(dp_{i,1}\\)</span>。令与一个点 <span\r\nclass=\"math inline\">\\(u\\)</span> 相连的点中有 <span\r\nclass=\"math inline\">\\(k_{1}\\)</span> 个 <span\r\nclass=\"math inline\">\\(b\\)</span> 值大于点 <span\r\nclass=\"math inline\">\\(u\\)</span> 的，剩余 <span\r\nclass=\"math inline\">\\(k_{2}\\)</span> 个小于点 <span\r\nclass=\"math inline\">\\(u\\)</span> 的，则该点贡献为 <span\r\nclass=\"math inline\">\\(\\max(k_{1},k_{2}) \\times a_{u}\\)</span>。</p>\r\n<p>对于个端点指出的边，若两端点的 <span class=\"math inline\">\\(b\\)</span>\r\n值相等则既可以连接子树递增的链，又可以连接子树递减的链。我们先假设连接递增的链，然后贪心的改变一些链接情况。具体的，找到从链接递增改变到连接递减后改变最大的一部分进行改变。</p>\r\n<p>利用 dfs 进行转移即可。</p>\r\n<p>该部分代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> fa)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>, cnt_up = <span class=\"number\">0</span>, cnt_down = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = head[u]; i; i = edge[i].nxt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v == fa)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v, u);</span><br><span class=\"line\">        <span class=\"comment\">// 可以递增，可以递减</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (points[u].b == points[v].b)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 换一个的价值</span></span><br><span class=\"line\">            st[u].<span class=\"built_in\">push_back</span>(dp[v][<span class=\"number\">1</span>] - dp[v][<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"comment\">// 先假定递增</span></span><br><span class=\"line\">            ++cnt_up;</span><br><span class=\"line\">            sum += dp[v][<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (points[u].b &gt; points[v].b)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++cnt_up;</span><br><span class=\"line\">            sum += dp[v][<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++cnt_down;</span><br><span class=\"line\">            sum += dp[v][<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(st[u].<span class=\"built_in\">begin</span>(), st[u].<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"comment\">// 把多少个转换</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= st[u].<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dp[u][<span class=\"number\">0</span>] = <span class=\"built_in\">min</span>(dp[u][<span class=\"number\">0</span>], sum + <span class=\"built_in\">max</span>(cnt_up, cnt_down + (u != <span class=\"number\">1</span>)) * points[u].a);</span><br><span class=\"line\">        dp[u][<span class=\"number\">1</span>] = <span class=\"built_in\">min</span>(dp[u][<span class=\"number\">1</span>], sum + <span class=\"built_in\">max</span>(cnt_up + (u != <span class=\"number\">1</span>), cnt_down) * points[u].a);</span><br><span class=\"line\">        --cnt_up, ++cnt_down; <span class=\"comment\">// 改变了一条边</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; st[u].<span class=\"built_in\">size</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            sum += st[u][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>注意到当 <span class=\"math inline\">\\(u = 1\\)</span>\r\n时需要特殊转移，即两条链可以合并为一条。最终答案即为 <span\r\nclass=\"math inline\">\\(\\min(dp_{1,0},dp_{1,1})\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 210101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> to, nxt;</span><br><span class=\"line\">&#125; edge[max_n &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> head[max_n], tot;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edge[++tot].to = v;</span><br><span class=\"line\">    edge[tot].nxt = head[u];</span><br><span class=\"line\">    head[u] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Point</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a, b;</span><br><span class=\"line\">&#125; points[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> dp[max_n][<span class=\"number\">2</span>];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; st[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> fa)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>, cnt_up = <span class=\"number\">0</span>, cnt_down = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = head[u]; i; i = edge[i].nxt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v == fa)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v, u);</span><br><span class=\"line\">        <span class=\"comment\">// 可以递增，可以递减</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (points[u].b == points[v].b)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 换一个的价值</span></span><br><span class=\"line\">            st[u].<span class=\"built_in\">push_back</span>(dp[v][<span class=\"number\">1</span>] - dp[v][<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"comment\">// 先假定递增</span></span><br><span class=\"line\">            ++cnt_up;</span><br><span class=\"line\">            sum += dp[v][<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (points[u].b &gt; points[v].b)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++cnt_up;</span><br><span class=\"line\">            sum += dp[v][<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++cnt_down;</span><br><span class=\"line\">            sum += dp[v][<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(st[u].<span class=\"built_in\">begin</span>(), st[u].<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"comment\">// 把多少个转换</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= st[u].<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dp[u][<span class=\"number\">0</span>] = <span class=\"built_in\">min</span>(dp[u][<span class=\"number\">0</span>], sum + <span class=\"built_in\">max</span>(cnt_up, cnt_down + (u != <span class=\"number\">1</span>)) * points[u].a);</span><br><span class=\"line\">        dp[u][<span class=\"number\">1</span>] = <span class=\"built_in\">min</span>(dp[u][<span class=\"number\">1</span>], sum + <span class=\"built_in\">max</span>(cnt_up + (u != <span class=\"number\">1</span>), cnt_down) * points[u].a);</span><br><span class=\"line\">        --cnt_up, ++cnt_down; <span class=\"comment\">// 改变了一条边</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; st[u].<span class=\"built_in\">size</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            sum += st[u][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(points[i].a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(points[i].b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>, u, v; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(u), <span class=\"built_in\">read</span>(v);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(u, v);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(v, u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dp, <span class=\"number\">0x3f</span>, <span class=\"built_in\">sizeof</span>(dp));</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(<span class=\"built_in\">min</span>(dp[<span class=\"number\">1</span>][<span class=\"number\">0</span>], dp[<span class=\"number\">1</span>][<span class=\"number\">1</span>]));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf1394d-boboniu-and-jianghu-题解\">CF1394D Boboniu and Jianghu\r\n题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1394D\">Luogu</a></p>\r\n<p><a\r\nhref=\"http://codeforces.com/problemset/problem/1394/D\">Codeforces</a></p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>可以处理出对于每个点，向下 <span class=\"math inline\">\\(b\\)</span>\r\n递增的最小 <span class=\"math inline\">\\(a\\)</span> 之和 <span\r\nclass=\"math inline\">\\(dp_{i,0}\\)</span> 和向下 <span\r\nclass=\"math inline\">\\(b\\)</span> 递减的最小 <span\r\nclass=\"math inline\">\\(a\\)</span> 之和 <span\r\nclass=\"math inline\">\\(dp_{i,1}\\)</span>。令与一个点 <span\r\nclass=\"math inline\">\\(u\\)</span> 相连的点中有 <span\r\nclass=\"math inline\">\\(k_{1}\\)</span> 个 <span\r\nclass=\"math inline\">\\(b\\)</span> 值大于点 <span\r\nclass=\"math inline\">\\(u\\)</span> 的，剩余 <span\r\nclass=\"math inline\">\\(k_{2}\\)</span> 个小于点 <span\r\nclass=\"math inline\">\\(u\\)</span> 的，则该点贡献为 <span\r\nclass=\"math inline\">\\(\\max(k_{1},k_{2}) \\times a_{u}\\)</span>。</p>\r\n<p>对于个端点指出的边，若两端点的 <span class=\"math inline\">\\(b\\)</span>\r\n值相等则既可以连接子树递增的链，又可以连接子树递减的链。我们先假设连接递增的链，然后贪心的改变一些链接情况。具体的，找到从链接递增改变到连接递减后改变最大的一部分进行改变。</p>\r\n<p>利用 dfs 进行转移即可。</p>\r\n<p>该部分代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> fa)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>, cnt_up = <span class=\"number\">0</span>, cnt_down = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = head[u]; i; i = edge[i].nxt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v == fa)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v, u);</span><br><span class=\"line\">        <span class=\"comment\">// 可以递增，可以递减</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (points[u].b == points[v].b)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 换一个的价值</span></span><br><span class=\"line\">            st[u].<span class=\"built_in\">push_back</span>(dp[v][<span class=\"number\">1</span>] - dp[v][<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"comment\">// 先假定递增</span></span><br><span class=\"line\">            ++cnt_up;</span><br><span class=\"line\">            sum += dp[v][<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (points[u].b &gt; points[v].b)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++cnt_up;</span><br><span class=\"line\">            sum += dp[v][<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++cnt_down;</span><br><span class=\"line\">            sum += dp[v][<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(st[u].<span class=\"built_in\">begin</span>(), st[u].<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"comment\">// 把多少个转换</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= st[u].<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dp[u][<span class=\"number\">0</span>] = <span class=\"built_in\">min</span>(dp[u][<span class=\"number\">0</span>], sum + <span class=\"built_in\">max</span>(cnt_up, cnt_down + (u != <span class=\"number\">1</span>)) * points[u].a);</span><br><span class=\"line\">        dp[u][<span class=\"number\">1</span>] = <span class=\"built_in\">min</span>(dp[u][<span class=\"number\">1</span>], sum + <span class=\"built_in\">max</span>(cnt_up + (u != <span class=\"number\">1</span>), cnt_down) * points[u].a);</span><br><span class=\"line\">        --cnt_up, ++cnt_down; <span class=\"comment\">// 改变了一条边</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; st[u].<span class=\"built_in\">size</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            sum += st[u][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>注意到当 <span class=\"math inline\">\\(u = 1\\)</span>\r\n时需要特殊转移，即两条链可以合并为一条。最终答案即为 <span\r\nclass=\"math inline\">\\(\\min(dp_{1,0},dp_{1,1})\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 210101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> to, nxt;</span><br><span class=\"line\">&#125; edge[max_n &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> head[max_n], tot;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edge[++tot].to = v;</span><br><span class=\"line\">    edge[tot].nxt = head[u];</span><br><span class=\"line\">    head[u] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Point</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a, b;</span><br><span class=\"line\">&#125; points[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> dp[max_n][<span class=\"number\">2</span>];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; st[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> fa)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>, cnt_up = <span class=\"number\">0</span>, cnt_down = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = head[u]; i; i = edge[i].nxt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v == fa)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v, u);</span><br><span class=\"line\">        <span class=\"comment\">// 可以递增，可以递减</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (points[u].b == points[v].b)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 换一个的价值</span></span><br><span class=\"line\">            st[u].<span class=\"built_in\">push_back</span>(dp[v][<span class=\"number\">1</span>] - dp[v][<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"comment\">// 先假定递增</span></span><br><span class=\"line\">            ++cnt_up;</span><br><span class=\"line\">            sum += dp[v][<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (points[u].b &gt; points[v].b)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++cnt_up;</span><br><span class=\"line\">            sum += dp[v][<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++cnt_down;</span><br><span class=\"line\">            sum += dp[v][<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(st[u].<span class=\"built_in\">begin</span>(), st[u].<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"comment\">// 把多少个转换</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= st[u].<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dp[u][<span class=\"number\">0</span>] = <span class=\"built_in\">min</span>(dp[u][<span class=\"number\">0</span>], sum + <span class=\"built_in\">max</span>(cnt_up, cnt_down + (u != <span class=\"number\">1</span>)) * points[u].a);</span><br><span class=\"line\">        dp[u][<span class=\"number\">1</span>] = <span class=\"built_in\">min</span>(dp[u][<span class=\"number\">1</span>], sum + <span class=\"built_in\">max</span>(cnt_up + (u != <span class=\"number\">1</span>), cnt_down) * points[u].a);</span><br><span class=\"line\">        --cnt_up, ++cnt_down; <span class=\"comment\">// 改变了一条边</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; st[u].<span class=\"built_in\">size</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            sum += st[u][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(points[i].a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(points[i].b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>, u, v; i &lt; n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(u), <span class=\"built_in\">read</span>(v);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(u, v);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(v, u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dp, <span class=\"number\">0x3f</span>, <span class=\"built_in\">sizeof</span>(dp));</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(<span class=\"built_in\">min</span>(dp[<span class=\"number\">1</span>][<span class=\"number\">0</span>], dp[<span class=\"number\">1</span>][<span class=\"number\">1</span>]));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF14D Two Paths题解","mathjax":true,"_content":"\n# CF14D Two Paths 题解\n\n<!-- more -->\n\n\n## 题目链接\n\n[传送门](https://www.luogu.com.cn/problem/CF14D)\n\n## 题意简述\n\n给定一棵树，找出两条不经过相同点的最长路径，使得他们的长度乘积最大。\n\n## 题目分析\n\n首先，如果在一棵树上，两条路径没有共同的点，那么这两条路径对应的两个深度更小的端点之间一定有唯一一条路径。我们只需要删掉这条路径上任意一条边，就可以分离这两个路径。\n\n看到两秒的时间限制和 $n \\le 200$ 的数据范围，我们可以想到暴力删除每一条边，在分成的两颗子树中找到直径即可。\n\n关于如何找到直径，有两种方法，请参考 [oi_wiki 中相关内容](https://oi-wiki.org/graph/tree-diameter/)。\n\n此外，在删边找直径时，为了方便，我们可以直接将删掉的边 $e$ 的两个端点 $u$ 和 $v$ 授予子孙关系，这样在 dfs 的时候就不会遍历到另一棵树上了。\n\n## 代码示例\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 300\n//以下为读入输出优化模板\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\n//以上为读入输出优化模板\n//需要开两个记录边的vector，e 在删边时使用，edge 在 dfs 的时候使用\nvector<pair<int,int>> e;\nvector<int> edge[max_n];\nint n;\nint dis1[max_n],dis2[max_n];//求树的直径需要用到的辅助数组，dis1[i]为从i开始最长的边，dis2[i]为从i开始第二长的边\nint max_d = 0;//记录树的直径\nvoid dfs(int u,int fa)\n{\n    dis1[u] = dis2[u] = 0;//初值都为0\n    for(auto v:edge[u])//遍历与u相连的每一个点 等价于 for(int i = 0;i<edge[u].size();i++) v = edge[u][i]\n    {\n        if(v == fa)\n        {\n            continue;\n        }  \n        dfs(v,u);\n        int now = dis1[v] +1;//这条路径的长度\n        if(now>dis1[u])//大于最长路分别更新最长路和次长路\n        {\n            dis2[u] = dis1[u];\n            dis1[u] = now;\n        }\n        else if(now > dis2[u])//大于次长路更新次长路\n        {\n            dis2[u] = now;\n        }\n    }\n\n    max_d = max(max_d,dis1[u] + dis2[u]);//最后一条经过u的路径的最大长度即为最长路加次长路\n}\nsigned main()\n{\n    //测试用\n    #if _clang_\n        freopen(\"1.in\",\"r\",stdin);\n        freopen(\"1.out\",\"w\",stdout);\n    #endif\n\n    read(n);\n    int u,v;\n    for(int i = 1;i<n;i++)\n    {\n        read(u),read(v);\n        //分别加边\n        e.push_back({u,v});\n        edge[u].push_back(v);\n        edge[v].push_back(u);\n    }\n    int d1 = 0,d2 = 0,ans = 0;\n    for(int i = 1;i<n;i++)\n    {\n        //一定要初始化！\n        memset(dis1,0,sizeof(dis1));\n        memset(dis2,0,sizeof(dis2));\n        max_d = 0;\n        //找e[i-1].first所在子树的直径\n        dfs(e[i-1].first,e[i-1].second);\n        d1 = max_d;\n        ////找e[i-1].second所在子树的直径\n        max_d = 0;\n        dfs(e[i-1].second,e[i-1].first);\n        d2 = max_d;\n        ans = max(ans,d1*d2);\n    }\n    writeln(ans);\n    return 0;\n}\n```\n","source":"_posts/CF14D Two Paths题解.md","raw":"---\ntitle: \"CF14D Two Paths题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF14D Two Paths 题解\n\n<!-- more -->\n\n\n## 题目链接\n\n[传送门](https://www.luogu.com.cn/problem/CF14D)\n\n## 题意简述\n\n给定一棵树，找出两条不经过相同点的最长路径，使得他们的长度乘积最大。\n\n## 题目分析\n\n首先，如果在一棵树上，两条路径没有共同的点，那么这两条路径对应的两个深度更小的端点之间一定有唯一一条路径。我们只需要删掉这条路径上任意一条边，就可以分离这两个路径。\n\n看到两秒的时间限制和 $n \\le 200$ 的数据范围，我们可以想到暴力删除每一条边，在分成的两颗子树中找到直径即可。\n\n关于如何找到直径，有两种方法，请参考 [oi_wiki 中相关内容](https://oi-wiki.org/graph/tree-diameter/)。\n\n此外，在删边找直径时，为了方便，我们可以直接将删掉的边 $e$ 的两个端点 $u$ 和 $v$ 授予子孙关系，这样在 dfs 的时候就不会遍历到另一棵树上了。\n\n## 代码示例\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 300\n//以下为读入输出优化模板\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\n//以上为读入输出优化模板\n//需要开两个记录边的vector，e 在删边时使用，edge 在 dfs 的时候使用\nvector<pair<int,int>> e;\nvector<int> edge[max_n];\nint n;\nint dis1[max_n],dis2[max_n];//求树的直径需要用到的辅助数组，dis1[i]为从i开始最长的边，dis2[i]为从i开始第二长的边\nint max_d = 0;//记录树的直径\nvoid dfs(int u,int fa)\n{\n    dis1[u] = dis2[u] = 0;//初值都为0\n    for(auto v:edge[u])//遍历与u相连的每一个点 等价于 for(int i = 0;i<edge[u].size();i++) v = edge[u][i]\n    {\n        if(v == fa)\n        {\n            continue;\n        }  \n        dfs(v,u);\n        int now = dis1[v] +1;//这条路径的长度\n        if(now>dis1[u])//大于最长路分别更新最长路和次长路\n        {\n            dis2[u] = dis1[u];\n            dis1[u] = now;\n        }\n        else if(now > dis2[u])//大于次长路更新次长路\n        {\n            dis2[u] = now;\n        }\n    }\n\n    max_d = max(max_d,dis1[u] + dis2[u]);//最后一条经过u的路径的最大长度即为最长路加次长路\n}\nsigned main()\n{\n    //测试用\n    #if _clang_\n        freopen(\"1.in\",\"r\",stdin);\n        freopen(\"1.out\",\"w\",stdout);\n    #endif\n\n    read(n);\n    int u,v;\n    for(int i = 1;i<n;i++)\n    {\n        read(u),read(v);\n        //分别加边\n        e.push_back({u,v});\n        edge[u].push_back(v);\n        edge[v].push_back(u);\n    }\n    int d1 = 0,d2 = 0,ans = 0;\n    for(int i = 1;i<n;i++)\n    {\n        //一定要初始化！\n        memset(dis1,0,sizeof(dis1));\n        memset(dis2,0,sizeof(dis2));\n        max_d = 0;\n        //找e[i-1].first所在子树的直径\n        dfs(e[i-1].first,e[i-1].second);\n        d1 = max_d;\n        ////找e[i-1].second所在子树的直径\n        max_d = 0;\n        dfs(e[i-1].second,e[i-1].first);\n        d2 = max_d;\n        ans = max(ans,d1*d2);\n    }\n    writeln(ans);\n    return 0;\n}\n```\n","slug":"CF14D Two Paths题解","published":1,"date":"2023-10-04T14:11:08.245Z","updated":"2023-10-04T14:11:08.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9yn000nosja9bpmh0ri","content":"<h1 id=\"cf14d-two-paths-题解\">CF14D Two Paths 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"题目链接\">题目链接</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF14D\">传送门</a></p>\r\n<h2 id=\"题意简述\">题意简述</h2>\r\n<p>给定一棵树，找出两条不经过相同点的最长路径，使得他们的长度乘积最大。</p>\r\n<h2 id=\"题目分析\">题目分析</h2>\r\n<p>首先，如果在一棵树上，两条路径没有共同的点，那么这两条路径对应的两个深度更小的端点之间一定有唯一一条路径。我们只需要删掉这条路径上任意一条边，就可以分离这两个路径。</p>\r\n<p>看到两秒的时间限制和 <span class=\"math inline\">\\(n \\le 200\\)</span>\r\n的数据范围，我们可以想到暴力删除每一条边，在分成的两颗子树中找到直径即可。</p>\r\n<p>关于如何找到直径，有两种方法，请参考 <a\r\nhref=\"https://oi-wiki.org/graph/tree-diameter/\">oi_wiki\r\n中相关内容</a>。</p>\r\n<p>此外，在删边找直径时，为了方便，我们可以直接将删掉的边 <span\r\nclass=\"math inline\">\\(e\\)</span> 的两个端点 <span\r\nclass=\"math inline\">\\(u\\)</span> 和 <span\r\nclass=\"math inline\">\\(v\\)</span> 授予子孙关系，这样在 dfs\r\n的时候就不会遍历到另一棵树上了。</p>\r\n<h2 id=\"代码示例\">代码示例</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 300</span></span><br><span class=\"line\"><span class=\"comment\">//以下为读入输出优化模板</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//以上为读入输出优化模板</span></span><br><span class=\"line\"><span class=\"comment\">//需要开两个记录边的vector，e 在删边时使用，edge 在 dfs 的时候使用</span></span><br><span class=\"line\">vector&lt;pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt;&gt; e;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; edge[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> dis1[max_n],dis2[max_n];<span class=\"comment\">//求树的直径需要用到的辅助数组，dis1[i]为从i开始最长的边，dis2[i]为从i开始第二长的边</span></span><br><span class=\"line\"><span class=\"type\">int</span> max_d = <span class=\"number\">0</span>;<span class=\"comment\">//记录树的直径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> fa)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dis1[u] = dis2[u] = <span class=\"number\">0</span>;<span class=\"comment\">//初值都为0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:edge[u])<span class=\"comment\">//遍历与u相连的每一个点 等价于 for(int i = 0;i&lt;edge[u].size();i++) v = edge[u][i]</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v == fa)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v,u);</span><br><span class=\"line\">        <span class=\"type\">int</span> now = dis1[v] +<span class=\"number\">1</span>;<span class=\"comment\">//这条路径的长度</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(now&gt;dis1[u])<span class=\"comment\">//大于最长路分别更新最长路和次长路</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dis2[u] = dis1[u];</span><br><span class=\"line\">            dis1[u] = now;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(now &gt; dis2[u])<span class=\"comment\">//大于次长路更新次长路</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dis2[u] = now;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    max_d = <span class=\"built_in\">max</span>(max_d,dis1[u] + dis2[u]);<span class=\"comment\">//最后一条经过u的路径的最大长度即为最长路加次长路</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//测试用</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,stdin);</span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"type\">int</span> u,v;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(u),<span class=\"built_in\">read</span>(v);</span><br><span class=\"line\">        <span class=\"comment\">//分别加边</span></span><br><span class=\"line\">        e.<span class=\"built_in\">push_back</span>(&#123;u,v&#125;);</span><br><span class=\"line\">        edge[u].<span class=\"built_in\">push_back</span>(v);</span><br><span class=\"line\">        edge[v].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> d1 = <span class=\"number\">0</span>,d2 = <span class=\"number\">0</span>,ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//一定要初始化！</span></span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dis1,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(dis1));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dis2,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(dis2));</span><br><span class=\"line\">        max_d = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//找e[i-1].first所在子树的直径</span></span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(e[i<span class=\"number\">-1</span>].first,e[i<span class=\"number\">-1</span>].second);</span><br><span class=\"line\">        d1 = max_d;</span><br><span class=\"line\">        <span class=\"comment\">////找e[i-1].second所在子树的直径</span></span><br><span class=\"line\">        max_d = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(e[i<span class=\"number\">-1</span>].second,e[i<span class=\"number\">-1</span>].first);</span><br><span class=\"line\">        d2 = max_d;</span><br><span class=\"line\">        ans = <span class=\"built_in\">max</span>(ans,d1*d2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf14d-two-paths-题解\">CF14D Two Paths 题解</h1>","more":"<h2 id=\"题目链接\">题目链接</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF14D\">传送门</a></p>\r\n<h2 id=\"题意简述\">题意简述</h2>\r\n<p>给定一棵树，找出两条不经过相同点的最长路径，使得他们的长度乘积最大。</p>\r\n<h2 id=\"题目分析\">题目分析</h2>\r\n<p>首先，如果在一棵树上，两条路径没有共同的点，那么这两条路径对应的两个深度更小的端点之间一定有唯一一条路径。我们只需要删掉这条路径上任意一条边，就可以分离这两个路径。</p>\r\n<p>看到两秒的时间限制和 <span class=\"math inline\">\\(n \\le 200\\)</span>\r\n的数据范围，我们可以想到暴力删除每一条边，在分成的两颗子树中找到直径即可。</p>\r\n<p>关于如何找到直径，有两种方法，请参考 <a\r\nhref=\"https://oi-wiki.org/graph/tree-diameter/\">oi_wiki\r\n中相关内容</a>。</p>\r\n<p>此外，在删边找直径时，为了方便，我们可以直接将删掉的边 <span\r\nclass=\"math inline\">\\(e\\)</span> 的两个端点 <span\r\nclass=\"math inline\">\\(u\\)</span> 和 <span\r\nclass=\"math inline\">\\(v\\)</span> 授予子孙关系，这样在 dfs\r\n的时候就不会遍历到另一棵树上了。</p>\r\n<h2 id=\"代码示例\">代码示例</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 300</span></span><br><span class=\"line\"><span class=\"comment\">//以下为读入输出优化模板</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//以上为读入输出优化模板</span></span><br><span class=\"line\"><span class=\"comment\">//需要开两个记录边的vector，e 在删边时使用，edge 在 dfs 的时候使用</span></span><br><span class=\"line\">vector&lt;pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt;&gt; e;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; edge[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> dis1[max_n],dis2[max_n];<span class=\"comment\">//求树的直径需要用到的辅助数组，dis1[i]为从i开始最长的边，dis2[i]为从i开始第二长的边</span></span><br><span class=\"line\"><span class=\"type\">int</span> max_d = <span class=\"number\">0</span>;<span class=\"comment\">//记录树的直径</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> fa)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dis1[u] = dis2[u] = <span class=\"number\">0</span>;<span class=\"comment\">//初值都为0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v:edge[u])<span class=\"comment\">//遍历与u相连的每一个点 等价于 for(int i = 0;i&lt;edge[u].size();i++) v = edge[u][i]</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v == fa)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v,u);</span><br><span class=\"line\">        <span class=\"type\">int</span> now = dis1[v] +<span class=\"number\">1</span>;<span class=\"comment\">//这条路径的长度</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(now&gt;dis1[u])<span class=\"comment\">//大于最长路分别更新最长路和次长路</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dis2[u] = dis1[u];</span><br><span class=\"line\">            dis1[u] = now;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(now &gt; dis2[u])<span class=\"comment\">//大于次长路更新次长路</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dis2[u] = now;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    max_d = <span class=\"built_in\">max</span>(max_d,dis1[u] + dis2[u]);<span class=\"comment\">//最后一条经过u的路径的最大长度即为最长路加次长路</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//测试用</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,stdin);</span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"type\">int</span> u,v;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(u),<span class=\"built_in\">read</span>(v);</span><br><span class=\"line\">        <span class=\"comment\">//分别加边</span></span><br><span class=\"line\">        e.<span class=\"built_in\">push_back</span>(&#123;u,v&#125;);</span><br><span class=\"line\">        edge[u].<span class=\"built_in\">push_back</span>(v);</span><br><span class=\"line\">        edge[v].<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> d1 = <span class=\"number\">0</span>,d2 = <span class=\"number\">0</span>,ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i&lt;n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">//一定要初始化！</span></span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dis1,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(dis1));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dis2,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(dis2));</span><br><span class=\"line\">        max_d = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"comment\">//找e[i-1].first所在子树的直径</span></span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(e[i<span class=\"number\">-1</span>].first,e[i<span class=\"number\">-1</span>].second);</span><br><span class=\"line\">        d1 = max_d;</span><br><span class=\"line\">        <span class=\"comment\">////找e[i-1].second所在子树的直径</span></span><br><span class=\"line\">        max_d = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(e[i<span class=\"number\">-1</span>].second,e[i<span class=\"number\">-1</span>].first);</span><br><span class=\"line\">        d2 = max_d;</span><br><span class=\"line\">        ans = <span class=\"built_in\">max</span>(ans,d1*d2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1512D Permutation by Sum 题解","mathjax":true,"_content":"\n# CF1512D Permutation by Sum 题解\n\n<!-- more -->\n\n\n## Link\n\n[洛谷](https://www.luogu.com.cn/problem/CF1512E)\n\n[Codeforces](https://codeforces.com/problemset/problem/1512/E)\n\n## Description\n\n$T$ 组数据，每组数据由互相独立的 $n,l,r,s$ 组成，求 $\\{a\\}$，$\\{a\\}$ 是 $1$ 到 $n$ 的一个排列使得 $\\sum_{i = l}^ra_i = s$，并输出这个排列，如果无法找到这样的排列输出 `-1`。\n\n## Solution\n\n只计算 $l$ 到 $r$ 的和，与其他位置无关。计算部分的长度 $len$ 为 $r - l + 1$。所以答案的最小值为 $\\sum_{i = 1}^{len} i$，最大值为 $\\sum_{i = n - len + 1}^{n} i$。\n\n先令在 $[l,r]$ 的范围内的数为 $1$ 到 $len$。则需要增大 $s - \\frac{ len \\times \\left ( len + 1\\right )}{2}$。可以想到从对大的数开始增大，直到不能增大或和为 $s$ 停止。这样不会产生冲突，其余位置填充剩余的数即可。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 101010\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T;\nint n, l, r, s;\nint nums[max_n];\nint vis[max_n], now;\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(T);\n    while (T--)\n    {\n        read(n), read(l), read(r), read(s);\n        memset(vis, 0, (n + 2) * (sizeof(int)));\n        now = 1;\n        int len = (r - l + 1), sum = 0;\n        for (int i = 1; i <= len; i++)\n        {\n            sum += i;\n            nums[i] = i;\n        }\n        int sum2 = 0;\n        for (int i = n; i > n - len; i--)\n        {\n            sum2 += i;\n        }\n        if (sum > s || s > sum2)\n        {\n            puts(\"-1\");\n            continue;\n        }\n        int ps = n - len;\n        if (len == n)\n        {\n            if (sum == s)\n            {\n                for (int i = 1; i <= n; i++)\n                {\n                    writesp(i);\n                }\n                puts(\"\");\n            }\n            else\n            {\n                puts(\"-1\");\n            }\n            continue;\n        }\n        if ((s - sum) > ps * len)\n        {\n            puts(\"-1\");\n            continue;\n        }\n        else\n        {\n            //   cout << ps << endl;\n            int i = len;\n            for (; s - sum > ps; i--)\n            {\n                sum += ps;\n                nums[i] += ps;\n                //    cout << i << \" \" << nums[i] << endl;\n            }\n            // cout << i + l - 1 << endl;\n            // cout << nums[len] << endl;\n            //   cout << s - sum << endl;\n            nums[i] += s - sum;\n        }\n        for (int i = 1; i <= len; i++)\n        {\n            vis[nums[i]] = 1;\n        }\n        for (int i = 1; i < l; i++)\n        {\n            while (vis[now])\n            {\n                ++now;\n            }\n            writesp(now);\n            ++now;\n        }\n        for (int i = l; i <= r; i++)\n        {\n            writesp(nums[i - l + 1]);\n        }\n        for (int i = r + 1; i <= n; i++)\n        {\n            while (vis[now])\n            {\n                ++now;\n            }\n            writesp(now);\n            ++now;\n        }\n        puts(\"\");\n    }\n    return 0;\n}\n```","source":"_posts/CF1512D Permutation by Sum 题解.md","raw":"---\ntitle: \"CF1512D Permutation by Sum 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF1512D Permutation by Sum 题解\n\n<!-- more -->\n\n\n## Link\n\n[洛谷](https://www.luogu.com.cn/problem/CF1512E)\n\n[Codeforces](https://codeforces.com/problemset/problem/1512/E)\n\n## Description\n\n$T$ 组数据，每组数据由互相独立的 $n,l,r,s$ 组成，求 $\\{a\\}$，$\\{a\\}$ 是 $1$ 到 $n$ 的一个排列使得 $\\sum_{i = l}^ra_i = s$，并输出这个排列，如果无法找到这样的排列输出 `-1`。\n\n## Solution\n\n只计算 $l$ 到 $r$ 的和，与其他位置无关。计算部分的长度 $len$ 为 $r - l + 1$。所以答案的最小值为 $\\sum_{i = 1}^{len} i$，最大值为 $\\sum_{i = n - len + 1}^{n} i$。\n\n先令在 $[l,r]$ 的范围内的数为 $1$ 到 $len$。则需要增大 $s - \\frac{ len \\times \\left ( len + 1\\right )}{2}$。可以想到从对大的数开始增大，直到不能增大或和为 $s$ 停止。这样不会产生冲突，其余位置填充剩余的数即可。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 101010\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T;\nint n, l, r, s;\nint nums[max_n];\nint vis[max_n], now;\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(T);\n    while (T--)\n    {\n        read(n), read(l), read(r), read(s);\n        memset(vis, 0, (n + 2) * (sizeof(int)));\n        now = 1;\n        int len = (r - l + 1), sum = 0;\n        for (int i = 1; i <= len; i++)\n        {\n            sum += i;\n            nums[i] = i;\n        }\n        int sum2 = 0;\n        for (int i = n; i > n - len; i--)\n        {\n            sum2 += i;\n        }\n        if (sum > s || s > sum2)\n        {\n            puts(\"-1\");\n            continue;\n        }\n        int ps = n - len;\n        if (len == n)\n        {\n            if (sum == s)\n            {\n                for (int i = 1; i <= n; i++)\n                {\n                    writesp(i);\n                }\n                puts(\"\");\n            }\n            else\n            {\n                puts(\"-1\");\n            }\n            continue;\n        }\n        if ((s - sum) > ps * len)\n        {\n            puts(\"-1\");\n            continue;\n        }\n        else\n        {\n            //   cout << ps << endl;\n            int i = len;\n            for (; s - sum > ps; i--)\n            {\n                sum += ps;\n                nums[i] += ps;\n                //    cout << i << \" \" << nums[i] << endl;\n            }\n            // cout << i + l - 1 << endl;\n            // cout << nums[len] << endl;\n            //   cout << s - sum << endl;\n            nums[i] += s - sum;\n        }\n        for (int i = 1; i <= len; i++)\n        {\n            vis[nums[i]] = 1;\n        }\n        for (int i = 1; i < l; i++)\n        {\n            while (vis[now])\n            {\n                ++now;\n            }\n            writesp(now);\n            ++now;\n        }\n        for (int i = l; i <= r; i++)\n        {\n            writesp(nums[i - l + 1]);\n        }\n        for (int i = r + 1; i <= n; i++)\n        {\n            while (vis[now])\n            {\n                ++now;\n            }\n            writesp(now);\n            ++now;\n        }\n        puts(\"\");\n    }\n    return 0;\n}\n```","slug":"CF1512D Permutation by Sum 题解","published":1,"date":"2023-10-04T14:11:08.246Z","updated":"2023-10-04T14:11:08.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9yo000posja5x1z7g43","content":"<h1 id=\"cf1512d-permutation-by-sum-题解\">CF1512D Permutation by Sum\r\n题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"link\">Link</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1512E\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1512/E\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p><span class=\"math inline\">\\(T\\)</span> 组数据，每组数据由互相独立的\r\n<span class=\"math inline\">\\(n,l,r,s\\)</span> 组成，求 <span\r\nclass=\"math inline\">\\(\\{a\\}\\)</span>，<span\r\nclass=\"math inline\">\\(\\{a\\}\\)</span> 是 <span\r\nclass=\"math inline\">\\(1\\)</span> 到 <span\r\nclass=\"math inline\">\\(n\\)</span> 的一个排列使得 <span\r\nclass=\"math inline\">\\(\\sum_{i = l}^ra_i =\r\ns\\)</span>，并输出这个排列，如果无法找到这样的排列输出\r\n<code>-1</code>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>只计算 <span class=\"math inline\">\\(l\\)</span> 到 <span\r\nclass=\"math inline\">\\(r\\)</span> 的和，与其他位置无关。计算部分的长度\r\n<span class=\"math inline\">\\(len\\)</span> 为 <span\r\nclass=\"math inline\">\\(r - l + 1\\)</span>。所以答案的最小值为 <span\r\nclass=\"math inline\">\\(\\sum_{i = 1}^{len} i\\)</span>，最大值为 <span\r\nclass=\"math inline\">\\(\\sum_{i = n - len + 1}^{n} i\\)</span>。</p>\r\n<p>先令在 <span class=\"math inline\">\\([l,r]\\)</span> 的范围内的数为\r\n<span class=\"math inline\">\\(1\\)</span> 到 <span\r\nclass=\"math inline\">\\(len\\)</span>。则需要增大 <span\r\nclass=\"math inline\">\\(s - \\frac{ len \\times \\left ( len + 1\\right\r\n)}{2}\\)</span>。可以想到从对大的数开始增大，直到不能增大或和为 <span\r\nclass=\"math inline\">\\(s\\)</span>\r\n停止。这样不会产生冲突，其余位置填充剩余的数即可。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 101010</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T;</span><br><span class=\"line\"><span class=\"type\">int</span> n, l, r, s;</span><br><span class=\"line\"><span class=\"type\">int</span> nums[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> vis[max_n], now;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(n), <span class=\"built_in\">read</span>(l), <span class=\"built_in\">read</span>(r), <span class=\"built_in\">read</span>(s);</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, (n + <span class=\"number\">2</span>) * (<span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>)));</span><br><span class=\"line\">        now = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> len = (r - l + <span class=\"number\">1</span>), sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= len; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            sum += i;</span><br><span class=\"line\">            nums[i] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> sum2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n; i &gt; n - len; i--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            sum2 += i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum &gt; s || s &gt; sum2)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> ps = n - len;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len == n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum == s)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">writesp</span>(i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((s - sum) &gt; ps * len)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//   cout &lt;&lt; ps &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"type\">int</span> i = len;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; s - sum &gt; ps; i--)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sum += ps;</span><br><span class=\"line\">                nums[i] += ps;</span><br><span class=\"line\">                <span class=\"comment\">//    cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; nums[i] &lt;&lt; endl;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; i + l - 1 &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; nums[len] &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"comment\">//   cout &lt;&lt; s - sum &lt;&lt; endl;</span></span><br><span class=\"line\">            nums[i] += s - sum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= len; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            vis[nums[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; l; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (vis[now])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ++now;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">writesp</span>(now);</span><br><span class=\"line\">            ++now;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = l; i &lt;= r; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">writesp</span>(nums[i - l + <span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = r + <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (vis[now])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ++now;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">writesp</span>(now);</span><br><span class=\"line\">            ++now;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf1512d-permutation-by-sum-题解\">CF1512D Permutation by Sum\r\n题解</h1>","more":"<h2 id=\"link\">Link</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1512E\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1512/E\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p><span class=\"math inline\">\\(T\\)</span> 组数据，每组数据由互相独立的\r\n<span class=\"math inline\">\\(n,l,r,s\\)</span> 组成，求 <span\r\nclass=\"math inline\">\\(\\{a\\}\\)</span>，<span\r\nclass=\"math inline\">\\(\\{a\\}\\)</span> 是 <span\r\nclass=\"math inline\">\\(1\\)</span> 到 <span\r\nclass=\"math inline\">\\(n\\)</span> 的一个排列使得 <span\r\nclass=\"math inline\">\\(\\sum_{i = l}^ra_i =\r\ns\\)</span>，并输出这个排列，如果无法找到这样的排列输出\r\n<code>-1</code>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>只计算 <span class=\"math inline\">\\(l\\)</span> 到 <span\r\nclass=\"math inline\">\\(r\\)</span> 的和，与其他位置无关。计算部分的长度\r\n<span class=\"math inline\">\\(len\\)</span> 为 <span\r\nclass=\"math inline\">\\(r - l + 1\\)</span>。所以答案的最小值为 <span\r\nclass=\"math inline\">\\(\\sum_{i = 1}^{len} i\\)</span>，最大值为 <span\r\nclass=\"math inline\">\\(\\sum_{i = n - len + 1}^{n} i\\)</span>。</p>\r\n<p>先令在 <span class=\"math inline\">\\([l,r]\\)</span> 的范围内的数为\r\n<span class=\"math inline\">\\(1\\)</span> 到 <span\r\nclass=\"math inline\">\\(len\\)</span>。则需要增大 <span\r\nclass=\"math inline\">\\(s - \\frac{ len \\times \\left ( len + 1\\right\r\n)}{2}\\)</span>。可以想到从对大的数开始增大，直到不能增大或和为 <span\r\nclass=\"math inline\">\\(s\\)</span>\r\n停止。这样不会产生冲突，其余位置填充剩余的数即可。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 101010</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T;</span><br><span class=\"line\"><span class=\"type\">int</span> n, l, r, s;</span><br><span class=\"line\"><span class=\"type\">int</span> nums[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> vis[max_n], now;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(n), <span class=\"built_in\">read</span>(l), <span class=\"built_in\">read</span>(r), <span class=\"built_in\">read</span>(s);</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, (n + <span class=\"number\">2</span>) * (<span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>)));</span><br><span class=\"line\">        now = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> len = (r - l + <span class=\"number\">1</span>), sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= len; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            sum += i;</span><br><span class=\"line\">            nums[i] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> sum2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n; i &gt; n - len; i--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            sum2 += i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum &gt; s || s &gt; sum2)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> ps = n - len;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (len == n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum == s)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">writesp</span>(i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((s - sum) &gt; ps * len)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">//   cout &lt;&lt; ps &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"type\">int</span> i = len;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; s - sum &gt; ps; i--)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sum += ps;</span><br><span class=\"line\">                nums[i] += ps;</span><br><span class=\"line\">                <span class=\"comment\">//    cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; nums[i] &lt;&lt; endl;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; i + l - 1 &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"comment\">// cout &lt;&lt; nums[len] &lt;&lt; endl;</span></span><br><span class=\"line\">            <span class=\"comment\">//   cout &lt;&lt; s - sum &lt;&lt; endl;</span></span><br><span class=\"line\">            nums[i] += s - sum;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= len; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            vis[nums[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; l; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (vis[now])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ++now;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">writesp</span>(now);</span><br><span class=\"line\">            ++now;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = l; i &lt;= r; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">writesp</span>(nums[i - l + <span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = r + <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (vis[now])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ++now;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">writesp</span>(now);</span><br><span class=\"line\">            ++now;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1512C A-B Palindrome 题解","mathjax":true,"_content":"\n# CF1512C A-B Palindrome 题解\n\n<!-- more -->\n\n\n## Link\n\n[洛谷](https://www.luogu.com.cn/problem/CF1512C)\n\n[Codeforces](https://www.luogu.com.cn/problem/CF1512C)\n\n## Description\n\n给出 $T$ 个只由 `0`、`1` 和 `?` 组成的字符串 $s$，将字符串中的 `?` 替换成 `0` 或 `1` 之后形成一个回文串并且恰好有 $a$ 个 `0` 和 $b$ 个 `1`，无解输出 `-1`。\n\n## Solution\n\n首先，若不考虑 `?` 原串不为回文串一定无解，输出 `-1` 即可。\n\n下面进行分类讨论。\n\n1. 若 $s_{i}$ 为 `?`：\n\n- 当 $s_{n - i + 1}$ 为 `0` 时，$s_{i}$ 也应该为 `0`，将 $a$ 减一并将 $s_{i}$ 改为 `0`。\n- 当 $s_{n - i + 1}$ 为 `1` 时，$s_{i}$ 也应该为 `1`，将 $b$ 减一并将 $s_{i}$ 改为 `1`。\n- 当 $s_{n - i + 1}$ 为 `?` 时，二者相等即可，记录一下个数为 $cnt$。\n\n2. 若 $s_{i}$ 为 `0`：当 $s_{n - i + 1}$ 为 `1` 时，无解。否则 $a$ 减一即可（对 $s_{n - i + 1}$ 的处理在枚举到该位置时处理）。\n\n3. 若 $s_{i}$ 为 `1`：当 $s_{n - i + 1}$ 为 `0` 时，无解。否则 $b$ 减一即可（对 $s_{n - i + 1}$ 的处理在枚举到该位置时处理）。\n\n当处理完成时，若 $a < 0$ 或 $b < 0$ 或 $a + b \\ne cnt$ 无解。\n\n若 $n$ 为奇数：\n\n- 当 $s_{\\left \\lfloor \\frac{n}{2} \\right \\rfloor + 1}$ 为 `?` 时，$a$ 和 $b$ 只能有一个为奇数，并将 $s_{\\left \\lfloor \\frac{n}{2} \\right \\rfloor + 1}$ 替换为对应的数即可。\n\n- 否则 $a$ 和 $b$ 必须均为偶数才有解。\n\n遍历一次，遇到 `?` 判断能填哪个就可以了。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 310010\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T;\nint a, b, cnt;\nchar s[max_n];\n\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(T);\n    while (T--)\n    {\n        cnt = 0;\n        read(a), read(b);\n        scanf(\"%s\", s + 1);\n        int n = strlen(s + 1);\n        if (n != a + b)\n        {\n            puts(\"-1\");\n            continue;\n        }\n        bool ans = true;\n        for (int i = 1; i <= n; i++)\n        {\n            if (s[i] == '1')\n            {\n                if (s[n - i + 1] != s[i] && s[n - i + 1] != '?')\n                {\n                    ans = false;\n                    break;\n                }\n                b--;\n            }\n            else if (s[i] == '0')\n            {\n                if (s[n - i + 1] != s[i] && s[n - i + 1] != '?')\n                {\n                    ans = false;\n                    break;\n                }\n                a--;\n            }\n            else\n            {\n                if (s[n - i + 1] == '0')\n                {\n                    s[i] = '0';\n                    a--;\n                }\n                else if (s[n - i + 1] == '1')\n                {\n                    s[i] = '1';\n                    b--;\n                }\n                else\n                {\n                    ++cnt;\n                }\n            }\n        }\n        if (!ans)\n        {\n            puts(\"-1\");\n            continue;\n        }\n        if (a < 0 || b < 0)\n        {\n            puts(\"-1\");\n            continue;\n        }\n        else if (cnt == a + b)\n        {\n            if (n % 2 == 1 && s[n / 2 + 1] == '?')\n            {\n                if ((a & 1) && (!(b & 1)))\n                {\n                    a--;\n                    s[n / 2 + 1] = '0';\n                }\n                else if ((b & 1) && (!(a & 1)))\n                {\n                    b--;\n                    s[n / 2 + 1] == '1';\n                }\n                else\n                {\n                    puts(\"-1\");\n                    continue;\n                }\n            }\n            else if ((a & 1) || (b & 1))\n            {\n                puts(\"-1\");\n                continue;\n            }\n            for (int i = 1; i <= n; i++)\n            {\n                if (s[i] == '?')\n                {\n                    if (a)\n                    {\n                        a -= 2;\n                        s[i] = '0';\n                        s[n - i + 1] = '0';\n                    }\n                    else\n                    {\n                        b -= 2;\n                        s[i] = '1';\n                        s[n - i + 1] = '1';\n                    }\n                }\n                putchar(s[i]);\n            }\n            puts(\"\");\n        }\n        else\n        {\n            puts(\"-1\");\n            continue;\n        }\n    }\n    return 0;\n}\n```\n","source":"_posts/CF1512C A-B Palindrome 题解.md","raw":"---\ntitle: \"CF1512C A-B Palindrome 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF1512C A-B Palindrome 题解\n\n<!-- more -->\n\n\n## Link\n\n[洛谷](https://www.luogu.com.cn/problem/CF1512C)\n\n[Codeforces](https://www.luogu.com.cn/problem/CF1512C)\n\n## Description\n\n给出 $T$ 个只由 `0`、`1` 和 `?` 组成的字符串 $s$，将字符串中的 `?` 替换成 `0` 或 `1` 之后形成一个回文串并且恰好有 $a$ 个 `0` 和 $b$ 个 `1`，无解输出 `-1`。\n\n## Solution\n\n首先，若不考虑 `?` 原串不为回文串一定无解，输出 `-1` 即可。\n\n下面进行分类讨论。\n\n1. 若 $s_{i}$ 为 `?`：\n\n- 当 $s_{n - i + 1}$ 为 `0` 时，$s_{i}$ 也应该为 `0`，将 $a$ 减一并将 $s_{i}$ 改为 `0`。\n- 当 $s_{n - i + 1}$ 为 `1` 时，$s_{i}$ 也应该为 `1`，将 $b$ 减一并将 $s_{i}$ 改为 `1`。\n- 当 $s_{n - i + 1}$ 为 `?` 时，二者相等即可，记录一下个数为 $cnt$。\n\n2. 若 $s_{i}$ 为 `0`：当 $s_{n - i + 1}$ 为 `1` 时，无解。否则 $a$ 减一即可（对 $s_{n - i + 1}$ 的处理在枚举到该位置时处理）。\n\n3. 若 $s_{i}$ 为 `1`：当 $s_{n - i + 1}$ 为 `0` 时，无解。否则 $b$ 减一即可（对 $s_{n - i + 1}$ 的处理在枚举到该位置时处理）。\n\n当处理完成时，若 $a < 0$ 或 $b < 0$ 或 $a + b \\ne cnt$ 无解。\n\n若 $n$ 为奇数：\n\n- 当 $s_{\\left \\lfloor \\frac{n}{2} \\right \\rfloor + 1}$ 为 `?` 时，$a$ 和 $b$ 只能有一个为奇数，并将 $s_{\\left \\lfloor \\frac{n}{2} \\right \\rfloor + 1}$ 替换为对应的数即可。\n\n- 否则 $a$ 和 $b$ 必须均为偶数才有解。\n\n遍历一次，遇到 `?` 判断能填哪个就可以了。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 310010\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T;\nint a, b, cnt;\nchar s[max_n];\n\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(T);\n    while (T--)\n    {\n        cnt = 0;\n        read(a), read(b);\n        scanf(\"%s\", s + 1);\n        int n = strlen(s + 1);\n        if (n != a + b)\n        {\n            puts(\"-1\");\n            continue;\n        }\n        bool ans = true;\n        for (int i = 1; i <= n; i++)\n        {\n            if (s[i] == '1')\n            {\n                if (s[n - i + 1] != s[i] && s[n - i + 1] != '?')\n                {\n                    ans = false;\n                    break;\n                }\n                b--;\n            }\n            else if (s[i] == '0')\n            {\n                if (s[n - i + 1] != s[i] && s[n - i + 1] != '?')\n                {\n                    ans = false;\n                    break;\n                }\n                a--;\n            }\n            else\n            {\n                if (s[n - i + 1] == '0')\n                {\n                    s[i] = '0';\n                    a--;\n                }\n                else if (s[n - i + 1] == '1')\n                {\n                    s[i] = '1';\n                    b--;\n                }\n                else\n                {\n                    ++cnt;\n                }\n            }\n        }\n        if (!ans)\n        {\n            puts(\"-1\");\n            continue;\n        }\n        if (a < 0 || b < 0)\n        {\n            puts(\"-1\");\n            continue;\n        }\n        else if (cnt == a + b)\n        {\n            if (n % 2 == 1 && s[n / 2 + 1] == '?')\n            {\n                if ((a & 1) && (!(b & 1)))\n                {\n                    a--;\n                    s[n / 2 + 1] = '0';\n                }\n                else if ((b & 1) && (!(a & 1)))\n                {\n                    b--;\n                    s[n / 2 + 1] == '1';\n                }\n                else\n                {\n                    puts(\"-1\");\n                    continue;\n                }\n            }\n            else if ((a & 1) || (b & 1))\n            {\n                puts(\"-1\");\n                continue;\n            }\n            for (int i = 1; i <= n; i++)\n            {\n                if (s[i] == '?')\n                {\n                    if (a)\n                    {\n                        a -= 2;\n                        s[i] = '0';\n                        s[n - i + 1] = '0';\n                    }\n                    else\n                    {\n                        b -= 2;\n                        s[i] = '1';\n                        s[n - i + 1] = '1';\n                    }\n                }\n                putchar(s[i]);\n            }\n            puts(\"\");\n        }\n        else\n        {\n            puts(\"-1\");\n            continue;\n        }\n    }\n    return 0;\n}\n```\n","slug":"CF1512C A-B Palindrome 题解","published":1,"date":"2023-10-04T14:11:08.246Z","updated":"2023-10-04T14:11:08.246Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9yp000rosja615z63u9","content":"<h1 id=\"cf1512c-a-b-palindrome-题解\">CF1512C A-B Palindrome 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"link\">Link</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1512C\">洛谷</a></p>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1512C\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给出 <span class=\"math inline\">\\(T\\)</span> 个只由\r\n<code>0</code>、<code>1</code> 和 <code>?</code> 组成的字符串 <span\r\nclass=\"math inline\">\\(s\\)</span>，将字符串中的 <code>?</code> 替换成\r\n<code>0</code> 或 <code>1</code> 之后形成一个回文串并且恰好有 <span\r\nclass=\"math inline\">\\(a\\)</span> 个 <code>0</code> 和 <span\r\nclass=\"math inline\">\\(b\\)</span> 个 <code>1</code>，无解输出\r\n<code>-1</code>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>首先，若不考虑 <code>?</code> 原串不为回文串一定无解，输出\r\n<code>-1</code> 即可。</p>\r\n<p>下面进行分类讨论。</p>\r\n<ol type=\"1\">\r\n<li>若 <span class=\"math inline\">\\(s_{i}\\)</span> 为\r\n<code>?</code>：</li>\r\n</ol>\r\n<ul>\r\n<li>当 <span class=\"math inline\">\\(s_{n - i + 1}\\)</span> 为\r\n<code>0</code> 时，<span class=\"math inline\">\\(s_{i}\\)</span> 也应该为\r\n<code>0</code>，将 <span class=\"math inline\">\\(a\\)</span> 减一并将 <span\r\nclass=\"math inline\">\\(s_{i}\\)</span> 改为 <code>0</code>。</li>\r\n<li>当 <span class=\"math inline\">\\(s_{n - i + 1}\\)</span> 为\r\n<code>1</code> 时，<span class=\"math inline\">\\(s_{i}\\)</span> 也应该为\r\n<code>1</code>，将 <span class=\"math inline\">\\(b\\)</span> 减一并将 <span\r\nclass=\"math inline\">\\(s_{i}\\)</span> 改为 <code>1</code>。</li>\r\n<li>当 <span class=\"math inline\">\\(s_{n - i + 1}\\)</span> 为\r\n<code>?</code> 时，二者相等即可，记录一下个数为 <span\r\nclass=\"math inline\">\\(cnt\\)</span>。</li>\r\n</ul>\r\n<ol start=\"2\" type=\"1\">\r\n<li><p>若 <span class=\"math inline\">\\(s_{i}\\)</span> 为\r\n<code>0</code>：当 <span class=\"math inline\">\\(s_{n - i + 1}\\)</span> 为\r\n<code>1</code> 时，无解。否则 <span class=\"math inline\">\\(a\\)</span>\r\n减一即可（对 <span class=\"math inline\">\\(s_{n - i + 1}\\)</span>\r\n的处理在枚举到该位置时处理）。</p></li>\r\n<li><p>若 <span class=\"math inline\">\\(s_{i}\\)</span> 为\r\n<code>1</code>：当 <span class=\"math inline\">\\(s_{n - i + 1}\\)</span> 为\r\n<code>0</code> 时，无解。否则 <span class=\"math inline\">\\(b\\)</span>\r\n减一即可（对 <span class=\"math inline\">\\(s_{n - i + 1}\\)</span>\r\n的处理在枚举到该位置时处理）。</p></li>\r\n</ol>\r\n<p>当处理完成时，若 <span class=\"math inline\">\\(a &lt; 0\\)</span> 或\r\n<span class=\"math inline\">\\(b &lt; 0\\)</span> 或 <span\r\nclass=\"math inline\">\\(a + b \\ne cnt\\)</span> 无解。</p>\r\n<p>若 <span class=\"math inline\">\\(n\\)</span> 为奇数：</p>\r\n<ul>\r\n<li><p>当 <span class=\"math inline\">\\(s_{\\left \\lfloor \\frac{n}{2}\r\n\\right \\rfloor + 1}\\)</span> 为 <code>?</code> 时，<span\r\nclass=\"math inline\">\\(a\\)</span> 和 <span\r\nclass=\"math inline\">\\(b\\)</span> 只能有一个为奇数，并将 <span\r\nclass=\"math inline\">\\(s_{\\left \\lfloor \\frac{n}{2} \\right \\rfloor +\r\n1}\\)</span> 替换为对应的数即可。</p></li>\r\n<li><p>否则 <span class=\"math inline\">\\(a\\)</span> 和 <span\r\nclass=\"math inline\">\\(b\\)</span> 必须均为偶数才有解。</p></li>\r\n</ul>\r\n<p>遍历一次，遇到 <code>?</code> 判断能填哪个就可以了。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 310010</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T;</span><br><span class=\"line\"><span class=\"type\">int</span> a, b, cnt;</span><br><span class=\"line\"><span class=\"type\">char</span> s[max_n];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(a), <span class=\"built_in\">read</span>(b);</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, s + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> n = <span class=\"built_in\">strlen</span>(s + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n != a + b)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">bool</span> ans = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s[n - i + <span class=\"number\">1</span>] != s[i] &amp;&amp; s[n - i + <span class=\"number\">1</span>] != <span class=\"string\">&#x27;?&#x27;</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ans = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                b--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s[n - i + <span class=\"number\">1</span>] != s[i] &amp;&amp; s[n - i + <span class=\"number\">1</span>] != <span class=\"string\">&#x27;?&#x27;</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ans = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                a--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s[n - i + <span class=\"number\">1</span>] == <span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    s[i] = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">                    a--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[n - i + <span class=\"number\">1</span>] == <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    s[i] = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">                    b--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ++cnt;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ans)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a &lt; <span class=\"number\">0</span> || b &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cnt == a + b)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> == <span class=\"number\">1</span> &amp;&amp; s[n / <span class=\"number\">2</span> + <span class=\"number\">1</span>] == <span class=\"string\">&#x27;?&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((a &amp; <span class=\"number\">1</span>) &amp;&amp; (!(b &amp; <span class=\"number\">1</span>)))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    a--;</span><br><span class=\"line\">                    s[n / <span class=\"number\">2</span> + <span class=\"number\">1</span>] = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((b &amp; <span class=\"number\">1</span>) &amp;&amp; (!(a &amp; <span class=\"number\">1</span>)))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    b--;</span><br><span class=\"line\">                    s[n / <span class=\"number\">2</span> + <span class=\"number\">1</span>] == <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((a &amp; <span class=\"number\">1</span>) || (b &amp; <span class=\"number\">1</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;?&#x27;</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (a)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        a -= <span class=\"number\">2</span>;</span><br><span class=\"line\">                        s[i] = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">                        s[n - i + <span class=\"number\">1</span>] = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        b -= <span class=\"number\">2</span>;</span><br><span class=\"line\">                        s[i] = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">                        s[n - i + <span class=\"number\">1</span>] = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"built_in\">putchar</span>(s[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf1512c-a-b-palindrome-题解\">CF1512C A-B Palindrome 题解</h1>","more":"<h2 id=\"link\">Link</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1512C\">洛谷</a></p>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1512C\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给出 <span class=\"math inline\">\\(T\\)</span> 个只由\r\n<code>0</code>、<code>1</code> 和 <code>?</code> 组成的字符串 <span\r\nclass=\"math inline\">\\(s\\)</span>，将字符串中的 <code>?</code> 替换成\r\n<code>0</code> 或 <code>1</code> 之后形成一个回文串并且恰好有 <span\r\nclass=\"math inline\">\\(a\\)</span> 个 <code>0</code> 和 <span\r\nclass=\"math inline\">\\(b\\)</span> 个 <code>1</code>，无解输出\r\n<code>-1</code>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>首先，若不考虑 <code>?</code> 原串不为回文串一定无解，输出\r\n<code>-1</code> 即可。</p>\r\n<p>下面进行分类讨论。</p>\r\n<ol type=\"1\">\r\n<li>若 <span class=\"math inline\">\\(s_{i}\\)</span> 为\r\n<code>?</code>：</li>\r\n</ol>\r\n<ul>\r\n<li>当 <span class=\"math inline\">\\(s_{n - i + 1}\\)</span> 为\r\n<code>0</code> 时，<span class=\"math inline\">\\(s_{i}\\)</span> 也应该为\r\n<code>0</code>，将 <span class=\"math inline\">\\(a\\)</span> 减一并将 <span\r\nclass=\"math inline\">\\(s_{i}\\)</span> 改为 <code>0</code>。</li>\r\n<li>当 <span class=\"math inline\">\\(s_{n - i + 1}\\)</span> 为\r\n<code>1</code> 时，<span class=\"math inline\">\\(s_{i}\\)</span> 也应该为\r\n<code>1</code>，将 <span class=\"math inline\">\\(b\\)</span> 减一并将 <span\r\nclass=\"math inline\">\\(s_{i}\\)</span> 改为 <code>1</code>。</li>\r\n<li>当 <span class=\"math inline\">\\(s_{n - i + 1}\\)</span> 为\r\n<code>?</code> 时，二者相等即可，记录一下个数为 <span\r\nclass=\"math inline\">\\(cnt\\)</span>。</li>\r\n</ul>\r\n<ol start=\"2\" type=\"1\">\r\n<li><p>若 <span class=\"math inline\">\\(s_{i}\\)</span> 为\r\n<code>0</code>：当 <span class=\"math inline\">\\(s_{n - i + 1}\\)</span> 为\r\n<code>1</code> 时，无解。否则 <span class=\"math inline\">\\(a\\)</span>\r\n减一即可（对 <span class=\"math inline\">\\(s_{n - i + 1}\\)</span>\r\n的处理在枚举到该位置时处理）。</p></li>\r\n<li><p>若 <span class=\"math inline\">\\(s_{i}\\)</span> 为\r\n<code>1</code>：当 <span class=\"math inline\">\\(s_{n - i + 1}\\)</span> 为\r\n<code>0</code> 时，无解。否则 <span class=\"math inline\">\\(b\\)</span>\r\n减一即可（对 <span class=\"math inline\">\\(s_{n - i + 1}\\)</span>\r\n的处理在枚举到该位置时处理）。</p></li>\r\n</ol>\r\n<p>当处理完成时，若 <span class=\"math inline\">\\(a &lt; 0\\)</span> 或\r\n<span class=\"math inline\">\\(b &lt; 0\\)</span> 或 <span\r\nclass=\"math inline\">\\(a + b \\ne cnt\\)</span> 无解。</p>\r\n<p>若 <span class=\"math inline\">\\(n\\)</span> 为奇数：</p>\r\n<ul>\r\n<li><p>当 <span class=\"math inline\">\\(s_{\\left \\lfloor \\frac{n}{2}\r\n\\right \\rfloor + 1}\\)</span> 为 <code>?</code> 时，<span\r\nclass=\"math inline\">\\(a\\)</span> 和 <span\r\nclass=\"math inline\">\\(b\\)</span> 只能有一个为奇数，并将 <span\r\nclass=\"math inline\">\\(s_{\\left \\lfloor \\frac{n}{2} \\right \\rfloor +\r\n1}\\)</span> 替换为对应的数即可。</p></li>\r\n<li><p>否则 <span class=\"math inline\">\\(a\\)</span> 和 <span\r\nclass=\"math inline\">\\(b\\)</span> 必须均为偶数才有解。</p></li>\r\n</ul>\r\n<p>遍历一次，遇到 <code>?</code> 判断能填哪个就可以了。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 310010</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T;</span><br><span class=\"line\"><span class=\"type\">int</span> a, b, cnt;</span><br><span class=\"line\"><span class=\"type\">char</span> s[max_n];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(a), <span class=\"built_in\">read</span>(b);</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, s + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> n = <span class=\"built_in\">strlen</span>(s + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n != a + b)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">bool</span> ans = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s[n - i + <span class=\"number\">1</span>] != s[i] &amp;&amp; s[n - i + <span class=\"number\">1</span>] != <span class=\"string\">&#x27;?&#x27;</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ans = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                b--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s[n - i + <span class=\"number\">1</span>] != s[i] &amp;&amp; s[n - i + <span class=\"number\">1</span>] != <span class=\"string\">&#x27;?&#x27;</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ans = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                a--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s[n - i + <span class=\"number\">1</span>] == <span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    s[i] = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">                    a--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[n - i + <span class=\"number\">1</span>] == <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    s[i] = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">                    b--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ++cnt;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ans)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a &lt; <span class=\"number\">0</span> || b &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cnt == a + b)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> == <span class=\"number\">1</span> &amp;&amp; s[n / <span class=\"number\">2</span> + <span class=\"number\">1</span>] == <span class=\"string\">&#x27;?&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ((a &amp; <span class=\"number\">1</span>) &amp;&amp; (!(b &amp; <span class=\"number\">1</span>)))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    a--;</span><br><span class=\"line\">                    s[n / <span class=\"number\">2</span> + <span class=\"number\">1</span>] = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((b &amp; <span class=\"number\">1</span>) &amp;&amp; (!(a &amp; <span class=\"number\">1</span>)))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    b--;</span><br><span class=\"line\">                    s[n / <span class=\"number\">2</span> + <span class=\"number\">1</span>] == <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((a &amp; <span class=\"number\">1</span>) || (b &amp; <span class=\"number\">1</span>))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;?&#x27;</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (a)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        a -= <span class=\"number\">2</span>;</span><br><span class=\"line\">                        s[i] = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">                        s[n - i + <span class=\"number\">1</span>] = <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        b -= <span class=\"number\">2</span>;</span><br><span class=\"line\">                        s[i] = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">                        s[n - i + <span class=\"number\">1</span>] = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"built_in\">putchar</span>(s[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1580D Subsequence 题解","mathjax":true,"_content":"\n# CF1580D Subsequence 题解\n\n<!-- more -->\n\n\n## Links\n\n[Luogu](https://www.luogu.com.cn/problem/CF1580D)\n\n[Codeforces](https://codeforces.com/problemset/problem/1580/D)\n\n## Description\n\n从长度为 $n$ 的序列中按顺序选择 $m$ 个值，定义其权值为所选数和的 $m$ 倍减去在原序列中所选的数两两之间的最小值。\n\n首先我们看一下要求的这一个东西，对它进行一下化简。\n\n---\n\n$$\\begin{aligned} \\sum_{i = 1}^m (m \\cdot a_{b_i}) - \\sum_{i = 1}^m \\sum_{j = 1}^m f(\\min(b_i, b_j), \\max(b_i, b_j)) &= \\sum_{i = 1}^m (m \\cdot a_{b_i}) - 2 \\times \\sum_{i = 1}^{m -1} \\sum_{j = i + 1}^m f(b_{i},b_{j}) - \\sum_{i = 1}^{m} a_{b_{i}} \\\\ &= (m - 1) \\times \\sum_{i = 1}^m a_{b_i} - 2 \\times \\sum_{i = 1}^{m - 1} \\sum_{j = i + 1}^m f(b_{i},b_{j}) \\end{aligned}$$\n\n---\n\n考虑到后面 $f(i,j)$ 的部分为取区间最小值，因此我们可以构建出笛卡尔树。\n\n[利用栈构建笛卡尔树](https://oi-wiki.org/ds/cartesian-tree/#%E6%A0%88%E6%9E%84%E5%BB%BA)的代码：\n\n```cpp\nfor (int i = 1; i <= n; i++)\n{\n    read(nums[i]);\n    st[st[0] + 1] = 0;\n    while (st[0] && nums[st[st[0]]] > nums[i])\n    {\n        --st[0];\n    }\n    son[st[st[0]]][1] = i;\n    son[i][0] = st[st[0] + 1];\n    st[++st[0]] = i;\n}\n```\n\n考虑利用树上 dp 求解，设 $dp_{i,j}$ 表示在以 $i$ 为根的子树中选取 $j$ 个值的最大权值。$lc$ 为树上当前节点的左孩子，$rc$ 为树上当前节点的右孩子。\n\n则有如下转移（没有左右节点时特判处理即可）：\n\n不选当前节点时：\n\n$$dp_{x,i + j} = dp_{lc,i} + dp_{rc,j} - 2 \\times i \\times j \\times nums_{x}$$\n\n即左节点最大贡献加右节点最大贡献减去最小值的贡献。显然若左子树选了 $i$ 个，右子树选了 $j$ 个，则根据题意有 $i \\times j$ 个区间最小值为 $nums_{x}$，减去即可。\n\n\n选择当前节点时：\n\n$$dp_{x,i + j + 1} = dp_{lc,i} + dp_{rc,j} - 2 \\times i \\times j \\times nums_{x} + \\left (m - 1 \\right) \\times nums_{x} - 2 \\times \\left (i + j \\right) \\times nums_{x}$$\n\n前面的部分不变，在加上最小值单独的贡献即可。\n\n该部分代码:\n\n```cpp\nfor (int i = 0; i <= siz[lc]; i++)\n{\n    for (int j = 0; j <= siz[rc]; j++)\n    {\n        dp[u][i + j] = max(dp[u][i + j], dp[lc][i] + dp[rc][j] - 2 * i * j * nums[u]);\n    }\n}\nfor (int i = 0; i <= siz[lc]; i++)\n{\n    for (int j = 0; j <= siz[rc]; j++)\n    {\n        dp[u][i + j + 1] = max(dp[u][i + j + 1], dp[lc][i] + dp[rc][j] + (m - 1) * nums[u] - 2 * (i * j + i + j) * nums[u]);\n    }\n}\n```\n\n---\n\ndp 方程满足在 dfs 条件下的无后效性，利用 dfs 求解即可。\n\n最后答案即为 $dp_{root,m}$。\n\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 5101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint n, m, nums[max_n];\nint root, siz[max_n], st[max_n], son[max_n][2], fa[max_n]; // 分别为根、子树大小、构建用的栈、左/右孩子、父亲节点\n\nint dp[max_n][max_n];\nvoid dfs(int u)\n{\n    siz[u] = 1;\n    int lc = son[u][0], rc = son[u][1];\n    // 没有左右孩子（即区间长度为 1），不取贡献为 0，取贡献为 (m - 1) * nums[u];\n    if (!lc && !rc)\n    {\n        dp[u][0] = 0;\n        dp[u][1] = nums[u] * (m - 1);\n        return;\n    }\n    // 只有右孩子\n    if (!lc && rc)\n    {\n        dfs(rc);\n        siz[u] += siz[rc];\n        memcpy(dp[u], dp[rc], sizeof(dp[rc]));//不取当前点直接复制过来\n        // 取当前点\n        for (int i = 0; i <= siz[rc]; i++)\n        {\n            dp[u][i + 1] = max(dp[u][i + 1], dp[rc][i] + (m - 1) * nums[u] - 2 * i * nums[u]);\n        }\n        return;\n    }\n    // 只有左孩子同上\n    if (lc && !rc)\n    {\n        dfs(lc);\n        siz[u] += siz[lc];\n        memcpy(dp[u], dp[lc], sizeof(dp[lc]));\n        for (int i = 0; i <= siz[lc]; i++)\n        {\n            dp[u][i + 1] = max(dp[u][i + 1], dp[lc][i] + (m - 1) * nums[u] - 2 * i * nums[u]);\n        }\n        return;\n    }\n\n    // 左右孩子都有\n\n    dfs(lc), dfs(rc);\n    siz[u] += siz[lc];\n    siz[u] += siz[rc];\n    for (int i = 0; i <= siz[lc]; i++)\n    {\n        for (int j = 0; j <= siz[rc]; j++)\n        {\n            dp[u][i + j] = max(dp[u][i + j], dp[lc][i] + dp[rc][j] - 2 * i * j * nums[u]);\n        }\n    }\n    for (int i = 0; i <= siz[lc]; i++)\n    {\n        for (int j = 0; j <= siz[rc]; j++)\n        {\n            dp[u][i + j + 1] = max(dp[u][i + j + 1], dp[lc][i] + dp[rc][j] + (m - 1) * nums[u] - 2 * (i * j + i + j) * nums[u]);\n        }\n    }\n}\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(n), read(m);\n    for (int i = 1; i <= n; i++)\n    {\n        read(nums[i]);\n        st[st[0] + 1] = 0;\n        while (st[0] && nums[st[st[0]]] > nums[i])\n        {\n            --st[0];\n        }\n        son[st[st[0]]][1] = i;\n        son[i][0] = st[st[0] + 1];\n        st[++st[0]] = i;\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        fa[son[i][0]] = fa[son[i][1]] = i;\n    }\n    root = min_element(fa + 1, fa + n + 1) - fa; // 找到根节点\n    dfs(root);\n    writeln(dp[root][m]);\n    return 0;\n}\n```","source":"_posts/CF1580D Subsequence 题解.md","raw":"---\ntitle: \"CF1580D Subsequence 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF1580D Subsequence 题解\n\n<!-- more -->\n\n\n## Links\n\n[Luogu](https://www.luogu.com.cn/problem/CF1580D)\n\n[Codeforces](https://codeforces.com/problemset/problem/1580/D)\n\n## Description\n\n从长度为 $n$ 的序列中按顺序选择 $m$ 个值，定义其权值为所选数和的 $m$ 倍减去在原序列中所选的数两两之间的最小值。\n\n首先我们看一下要求的这一个东西，对它进行一下化简。\n\n---\n\n$$\\begin{aligned} \\sum_{i = 1}^m (m \\cdot a_{b_i}) - \\sum_{i = 1}^m \\sum_{j = 1}^m f(\\min(b_i, b_j), \\max(b_i, b_j)) &= \\sum_{i = 1}^m (m \\cdot a_{b_i}) - 2 \\times \\sum_{i = 1}^{m -1} \\sum_{j = i + 1}^m f(b_{i},b_{j}) - \\sum_{i = 1}^{m} a_{b_{i}} \\\\ &= (m - 1) \\times \\sum_{i = 1}^m a_{b_i} - 2 \\times \\sum_{i = 1}^{m - 1} \\sum_{j = i + 1}^m f(b_{i},b_{j}) \\end{aligned}$$\n\n---\n\n考虑到后面 $f(i,j)$ 的部分为取区间最小值，因此我们可以构建出笛卡尔树。\n\n[利用栈构建笛卡尔树](https://oi-wiki.org/ds/cartesian-tree/#%E6%A0%88%E6%9E%84%E5%BB%BA)的代码：\n\n```cpp\nfor (int i = 1; i <= n; i++)\n{\n    read(nums[i]);\n    st[st[0] + 1] = 0;\n    while (st[0] && nums[st[st[0]]] > nums[i])\n    {\n        --st[0];\n    }\n    son[st[st[0]]][1] = i;\n    son[i][0] = st[st[0] + 1];\n    st[++st[0]] = i;\n}\n```\n\n考虑利用树上 dp 求解，设 $dp_{i,j}$ 表示在以 $i$ 为根的子树中选取 $j$ 个值的最大权值。$lc$ 为树上当前节点的左孩子，$rc$ 为树上当前节点的右孩子。\n\n则有如下转移（没有左右节点时特判处理即可）：\n\n不选当前节点时：\n\n$$dp_{x,i + j} = dp_{lc,i} + dp_{rc,j} - 2 \\times i \\times j \\times nums_{x}$$\n\n即左节点最大贡献加右节点最大贡献减去最小值的贡献。显然若左子树选了 $i$ 个，右子树选了 $j$ 个，则根据题意有 $i \\times j$ 个区间最小值为 $nums_{x}$，减去即可。\n\n\n选择当前节点时：\n\n$$dp_{x,i + j + 1} = dp_{lc,i} + dp_{rc,j} - 2 \\times i \\times j \\times nums_{x} + \\left (m - 1 \\right) \\times nums_{x} - 2 \\times \\left (i + j \\right) \\times nums_{x}$$\n\n前面的部分不变，在加上最小值单独的贡献即可。\n\n该部分代码:\n\n```cpp\nfor (int i = 0; i <= siz[lc]; i++)\n{\n    for (int j = 0; j <= siz[rc]; j++)\n    {\n        dp[u][i + j] = max(dp[u][i + j], dp[lc][i] + dp[rc][j] - 2 * i * j * nums[u]);\n    }\n}\nfor (int i = 0; i <= siz[lc]; i++)\n{\n    for (int j = 0; j <= siz[rc]; j++)\n    {\n        dp[u][i + j + 1] = max(dp[u][i + j + 1], dp[lc][i] + dp[rc][j] + (m - 1) * nums[u] - 2 * (i * j + i + j) * nums[u]);\n    }\n}\n```\n\n---\n\ndp 方程满足在 dfs 条件下的无后效性，利用 dfs 求解即可。\n\n最后答案即为 $dp_{root,m}$。\n\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 5101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint n, m, nums[max_n];\nint root, siz[max_n], st[max_n], son[max_n][2], fa[max_n]; // 分别为根、子树大小、构建用的栈、左/右孩子、父亲节点\n\nint dp[max_n][max_n];\nvoid dfs(int u)\n{\n    siz[u] = 1;\n    int lc = son[u][0], rc = son[u][1];\n    // 没有左右孩子（即区间长度为 1），不取贡献为 0，取贡献为 (m - 1) * nums[u];\n    if (!lc && !rc)\n    {\n        dp[u][0] = 0;\n        dp[u][1] = nums[u] * (m - 1);\n        return;\n    }\n    // 只有右孩子\n    if (!lc && rc)\n    {\n        dfs(rc);\n        siz[u] += siz[rc];\n        memcpy(dp[u], dp[rc], sizeof(dp[rc]));//不取当前点直接复制过来\n        // 取当前点\n        for (int i = 0; i <= siz[rc]; i++)\n        {\n            dp[u][i + 1] = max(dp[u][i + 1], dp[rc][i] + (m - 1) * nums[u] - 2 * i * nums[u]);\n        }\n        return;\n    }\n    // 只有左孩子同上\n    if (lc && !rc)\n    {\n        dfs(lc);\n        siz[u] += siz[lc];\n        memcpy(dp[u], dp[lc], sizeof(dp[lc]));\n        for (int i = 0; i <= siz[lc]; i++)\n        {\n            dp[u][i + 1] = max(dp[u][i + 1], dp[lc][i] + (m - 1) * nums[u] - 2 * i * nums[u]);\n        }\n        return;\n    }\n\n    // 左右孩子都有\n\n    dfs(lc), dfs(rc);\n    siz[u] += siz[lc];\n    siz[u] += siz[rc];\n    for (int i = 0; i <= siz[lc]; i++)\n    {\n        for (int j = 0; j <= siz[rc]; j++)\n        {\n            dp[u][i + j] = max(dp[u][i + j], dp[lc][i] + dp[rc][j] - 2 * i * j * nums[u]);\n        }\n    }\n    for (int i = 0; i <= siz[lc]; i++)\n    {\n        for (int j = 0; j <= siz[rc]; j++)\n        {\n            dp[u][i + j + 1] = max(dp[u][i + j + 1], dp[lc][i] + dp[rc][j] + (m - 1) * nums[u] - 2 * (i * j + i + j) * nums[u]);\n        }\n    }\n}\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(n), read(m);\n    for (int i = 1; i <= n; i++)\n    {\n        read(nums[i]);\n        st[st[0] + 1] = 0;\n        while (st[0] && nums[st[st[0]]] > nums[i])\n        {\n            --st[0];\n        }\n        son[st[st[0]]][1] = i;\n        son[i][0] = st[st[0] + 1];\n        st[++st[0]] = i;\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        fa[son[i][0]] = fa[son[i][1]] = i;\n    }\n    root = min_element(fa + 1, fa + n + 1) - fa; // 找到根节点\n    dfs(root);\n    writeln(dp[root][m]);\n    return 0;\n}\n```","slug":"CF1580D Subsequence 题解","published":1,"date":"2023-10-04T14:11:08.246Z","updated":"2023-10-04T14:11:08.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9yr000uosja8kzh5fer","content":"<h1 id=\"cf1580d-subsequence-题解\">CF1580D Subsequence 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1580D\">Luogu</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1580/D\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>从长度为 <span class=\"math inline\">\\(n\\)</span> 的序列中按顺序选择\r\n<span class=\"math inline\">\\(m\\)</span> 个值，定义其权值为所选数和的\r\n<span class=\"math inline\">\\(m\\)</span>\r\n倍减去在原序列中所选的数两两之间的最小值。</p>\r\n<p>首先我们看一下要求的这一个东西，对它进行一下化简。</p>\r\n<hr />\r\n<p><span class=\"math display\">\\[\\begin{aligned} \\sum_{i = 1}^m (m \\cdot\r\na_{b_i}) - \\sum_{i = 1}^m \\sum_{j = 1}^m f(\\min(b_i, b_j), \\max(b_i,\r\nb_j)) &amp;= \\sum_{i = 1}^m (m \\cdot a_{b_i}) - 2 \\times \\sum_{i = 1}^{m\r\n-1} \\sum_{j = i + 1}^m f(b_{i},b_{j}) - \\sum_{i = 1}^{m} a_{b_{i}} \\\\\r\n&amp;= (m - 1) \\times \\sum_{i = 1}^m a_{b_i} - 2 \\times \\sum_{i = 1}^{m\r\n- 1} \\sum_{j = i + 1}^m f(b_{i},b_{j}) \\end{aligned}\\]</span></p>\r\n<hr />\r\n<p>考虑到后面 <span class=\"math inline\">\\(f(i,j)\\)</span>\r\n的部分为取区间最小值，因此我们可以构建出笛卡尔树。</p>\r\n<p><a\r\nhref=\"https://oi-wiki.org/ds/cartesian-tree/#%E6%A0%88%E6%9E%84%E5%BB%BA\">利用栈构建笛卡尔树</a>的代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">    st[st[<span class=\"number\">0</span>] + <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (st[<span class=\"number\">0</span>] &amp;&amp; nums[st[st[<span class=\"number\">0</span>]]] &gt; nums[i])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        --st[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    son[st[st[<span class=\"number\">0</span>]]][<span class=\"number\">1</span>] = i;</span><br><span class=\"line\">    son[i][<span class=\"number\">0</span>] = st[st[<span class=\"number\">0</span>] + <span class=\"number\">1</span>];</span><br><span class=\"line\">    st[++st[<span class=\"number\">0</span>]] = i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>考虑利用树上 dp 求解，设 <span\r\nclass=\"math inline\">\\(dp_{i,j}\\)</span> 表示在以 <span\r\nclass=\"math inline\">\\(i\\)</span> 为根的子树中选取 <span\r\nclass=\"math inline\">\\(j\\)</span> 个值的最大权值。<span\r\nclass=\"math inline\">\\(lc\\)</span> 为树上当前节点的左孩子，<span\r\nclass=\"math inline\">\\(rc\\)</span> 为树上当前节点的右孩子。</p>\r\n<p>则有如下转移（没有左右节点时特判处理即可）：</p>\r\n<p>不选当前节点时：</p>\r\n<p><span class=\"math display\">\\[dp_{x,i + j} = dp_{lc,i} + dp_{rc,j} - 2\r\n\\times i \\times j \\times nums_{x}\\]</span></p>\r\n<p>即左节点最大贡献加右节点最大贡献减去最小值的贡献。显然若左子树选了\r\n<span class=\"math inline\">\\(i\\)</span> 个，右子树选了 <span\r\nclass=\"math inline\">\\(j\\)</span> 个，则根据题意有 <span\r\nclass=\"math inline\">\\(i \\times j\\)</span> 个区间最小值为 <span\r\nclass=\"math inline\">\\(nums_{x}\\)</span>，减去即可。</p>\r\n<p>选择当前节点时：</p>\r\n<p><span class=\"math display\">\\[dp_{x,i + j + 1} = dp_{lc,i} + dp_{rc,j}\r\n- 2 \\times i \\times j \\times nums_{x} + \\left (m - 1 \\right) \\times\r\nnums_{x} - 2 \\times \\left (i + j \\right) \\times nums_{x}\\]</span></p>\r\n<p>前面的部分不变，在加上最小值单独的贡献即可。</p>\r\n<p>该部分代码:</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= siz[lc]; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt;= siz[rc]; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dp[u][i + j] = <span class=\"built_in\">max</span>(dp[u][i + j], dp[lc][i] + dp[rc][j] - <span class=\"number\">2</span> * i * j * nums[u]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= siz[lc]; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt;= siz[rc]; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dp[u][i + j + <span class=\"number\">1</span>] = <span class=\"built_in\">max</span>(dp[u][i + j + <span class=\"number\">1</span>], dp[lc][i] + dp[rc][j] + (m - <span class=\"number\">1</span>) * nums[u] - <span class=\"number\">2</span> * (i * j + i + j) * nums[u]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<hr />\r\n<p>dp 方程满足在 dfs 条件下的无后效性，利用 dfs 求解即可。</p>\r\n<p>最后答案即为 <span class=\"math inline\">\\(dp_{root,m}\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 5101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, nums[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> root, siz[max_n], st[max_n], son[max_n][<span class=\"number\">2</span>], fa[max_n]; <span class=\"comment\">// 分别为根、子树大小、构建用的栈、左/右孩子、父亲节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> dp[max_n][max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    siz[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> lc = son[u][<span class=\"number\">0</span>], rc = son[u][<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 没有左右孩子（即区间长度为 1），不取贡献为 0，取贡献为 (m - 1) * nums[u];</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!lc &amp;&amp; !rc)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dp[u][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        dp[u][<span class=\"number\">1</span>] = nums[u] * (m - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 只有右孩子</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!lc &amp;&amp; rc)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(rc);</span><br><span class=\"line\">        siz[u] += siz[rc];</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(dp[u], dp[rc], <span class=\"built_in\">sizeof</span>(dp[rc]));<span class=\"comment\">//不取当前点直接复制过来</span></span><br><span class=\"line\">        <span class=\"comment\">// 取当前点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= siz[rc]; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dp[u][i + <span class=\"number\">1</span>] = <span class=\"built_in\">max</span>(dp[u][i + <span class=\"number\">1</span>], dp[rc][i] + (m - <span class=\"number\">1</span>) * nums[u] - <span class=\"number\">2</span> * i * nums[u]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 只有左孩子同上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lc &amp;&amp; !rc)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(lc);</span><br><span class=\"line\">        siz[u] += siz[lc];</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(dp[u], dp[lc], <span class=\"built_in\">sizeof</span>(dp[lc]));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= siz[lc]; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dp[u][i + <span class=\"number\">1</span>] = <span class=\"built_in\">max</span>(dp[u][i + <span class=\"number\">1</span>], dp[lc][i] + (m - <span class=\"number\">1</span>) * nums[u] - <span class=\"number\">2</span> * i * nums[u]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 左右孩子都有</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(lc), <span class=\"built_in\">dfs</span>(rc);</span><br><span class=\"line\">    siz[u] += siz[lc];</span><br><span class=\"line\">    siz[u] += siz[rc];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= siz[lc]; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt;= siz[rc]; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dp[u][i + j] = <span class=\"built_in\">max</span>(dp[u][i + j], dp[lc][i] + dp[rc][j] - <span class=\"number\">2</span> * i * j * nums[u]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= siz[lc]; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt;= siz[rc]; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dp[u][i + j + <span class=\"number\">1</span>] = <span class=\"built_in\">max</span>(dp[u][i + j + <span class=\"number\">1</span>], dp[lc][i] + dp[rc][j] + (m - <span class=\"number\">1</span>) * nums[u] - <span class=\"number\">2</span> * (i * j + i + j) * nums[u]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n), <span class=\"built_in\">read</span>(m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">        st[st[<span class=\"number\">0</span>] + <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (st[<span class=\"number\">0</span>] &amp;&amp; nums[st[st[<span class=\"number\">0</span>]]] &gt; nums[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            --st[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        son[st[st[<span class=\"number\">0</span>]]][<span class=\"number\">1</span>] = i;</span><br><span class=\"line\">        son[i][<span class=\"number\">0</span>] = st[st[<span class=\"number\">0</span>] + <span class=\"number\">1</span>];</span><br><span class=\"line\">        st[++st[<span class=\"number\">0</span>]] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fa[son[i][<span class=\"number\">0</span>]] = fa[son[i][<span class=\"number\">1</span>]] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root = <span class=\"built_in\">min_element</span>(fa + <span class=\"number\">1</span>, fa + n + <span class=\"number\">1</span>) - fa; <span class=\"comment\">// 找到根节点</span></span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(root);</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(dp[root][m]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf1580d-subsequence-题解\">CF1580D Subsequence 题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1580D\">Luogu</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1580/D\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>从长度为 <span class=\"math inline\">\\(n\\)</span> 的序列中按顺序选择\r\n<span class=\"math inline\">\\(m\\)</span> 个值，定义其权值为所选数和的\r\n<span class=\"math inline\">\\(m\\)</span>\r\n倍减去在原序列中所选的数两两之间的最小值。</p>\r\n<p>首先我们看一下要求的这一个东西，对它进行一下化简。</p>\r\n<hr />\r\n<p><span class=\"math display\">\\[\\begin{aligned} \\sum_{i = 1}^m (m \\cdot\r\na_{b_i}) - \\sum_{i = 1}^m \\sum_{j = 1}^m f(\\min(b_i, b_j), \\max(b_i,\r\nb_j)) &amp;= \\sum_{i = 1}^m (m \\cdot a_{b_i}) - 2 \\times \\sum_{i = 1}^{m\r\n-1} \\sum_{j = i + 1}^m f(b_{i},b_{j}) - \\sum_{i = 1}^{m} a_{b_{i}} \\\\\r\n&amp;= (m - 1) \\times \\sum_{i = 1}^m a_{b_i} - 2 \\times \\sum_{i = 1}^{m\r\n- 1} \\sum_{j = i + 1}^m f(b_{i},b_{j}) \\end{aligned}\\]</span></p>\r\n<hr />\r\n<p>考虑到后面 <span class=\"math inline\">\\(f(i,j)\\)</span>\r\n的部分为取区间最小值，因此我们可以构建出笛卡尔树。</p>\r\n<p><a\r\nhref=\"https://oi-wiki.org/ds/cartesian-tree/#%E6%A0%88%E6%9E%84%E5%BB%BA\">利用栈构建笛卡尔树</a>的代码：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">    st[st[<span class=\"number\">0</span>] + <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (st[<span class=\"number\">0</span>] &amp;&amp; nums[st[st[<span class=\"number\">0</span>]]] &gt; nums[i])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        --st[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    son[st[st[<span class=\"number\">0</span>]]][<span class=\"number\">1</span>] = i;</span><br><span class=\"line\">    son[i][<span class=\"number\">0</span>] = st[st[<span class=\"number\">0</span>] + <span class=\"number\">1</span>];</span><br><span class=\"line\">    st[++st[<span class=\"number\">0</span>]] = i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>考虑利用树上 dp 求解，设 <span\r\nclass=\"math inline\">\\(dp_{i,j}\\)</span> 表示在以 <span\r\nclass=\"math inline\">\\(i\\)</span> 为根的子树中选取 <span\r\nclass=\"math inline\">\\(j\\)</span> 个值的最大权值。<span\r\nclass=\"math inline\">\\(lc\\)</span> 为树上当前节点的左孩子，<span\r\nclass=\"math inline\">\\(rc\\)</span> 为树上当前节点的右孩子。</p>\r\n<p>则有如下转移（没有左右节点时特判处理即可）：</p>\r\n<p>不选当前节点时：</p>\r\n<p><span class=\"math display\">\\[dp_{x,i + j} = dp_{lc,i} + dp_{rc,j} - 2\r\n\\times i \\times j \\times nums_{x}\\]</span></p>\r\n<p>即左节点最大贡献加右节点最大贡献减去最小值的贡献。显然若左子树选了\r\n<span class=\"math inline\">\\(i\\)</span> 个，右子树选了 <span\r\nclass=\"math inline\">\\(j\\)</span> 个，则根据题意有 <span\r\nclass=\"math inline\">\\(i \\times j\\)</span> 个区间最小值为 <span\r\nclass=\"math inline\">\\(nums_{x}\\)</span>，减去即可。</p>\r\n<p>选择当前节点时：</p>\r\n<p><span class=\"math display\">\\[dp_{x,i + j + 1} = dp_{lc,i} + dp_{rc,j}\r\n- 2 \\times i \\times j \\times nums_{x} + \\left (m - 1 \\right) \\times\r\nnums_{x} - 2 \\times \\left (i + j \\right) \\times nums_{x}\\]</span></p>\r\n<p>前面的部分不变，在加上最小值单独的贡献即可。</p>\r\n<p>该部分代码:</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= siz[lc]; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt;= siz[rc]; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dp[u][i + j] = <span class=\"built_in\">max</span>(dp[u][i + j], dp[lc][i] + dp[rc][j] - <span class=\"number\">2</span> * i * j * nums[u]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= siz[lc]; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt;= siz[rc]; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dp[u][i + j + <span class=\"number\">1</span>] = <span class=\"built_in\">max</span>(dp[u][i + j + <span class=\"number\">1</span>], dp[lc][i] + dp[rc][j] + (m - <span class=\"number\">1</span>) * nums[u] - <span class=\"number\">2</span> * (i * j + i + j) * nums[u]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<hr />\r\n<p>dp 方程满足在 dfs 条件下的无后效性，利用 dfs 求解即可。</p>\r\n<p>最后答案即为 <span class=\"math inline\">\\(dp_{root,m}\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 5101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, nums[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> root, siz[max_n], st[max_n], son[max_n][<span class=\"number\">2</span>], fa[max_n]; <span class=\"comment\">// 分别为根、子树大小、构建用的栈、左/右孩子、父亲节点</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> dp[max_n][max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    siz[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> lc = son[u][<span class=\"number\">0</span>], rc = son[u][<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"comment\">// 没有左右孩子（即区间长度为 1），不取贡献为 0，取贡献为 (m - 1) * nums[u];</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!lc &amp;&amp; !rc)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dp[u][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        dp[u][<span class=\"number\">1</span>] = nums[u] * (m - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 只有右孩子</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!lc &amp;&amp; rc)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(rc);</span><br><span class=\"line\">        siz[u] += siz[rc];</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(dp[u], dp[rc], <span class=\"built_in\">sizeof</span>(dp[rc]));<span class=\"comment\">//不取当前点直接复制过来</span></span><br><span class=\"line\">        <span class=\"comment\">// 取当前点</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= siz[rc]; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dp[u][i + <span class=\"number\">1</span>] = <span class=\"built_in\">max</span>(dp[u][i + <span class=\"number\">1</span>], dp[rc][i] + (m - <span class=\"number\">1</span>) * nums[u] - <span class=\"number\">2</span> * i * nums[u]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 只有左孩子同上</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lc &amp;&amp; !rc)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(lc);</span><br><span class=\"line\">        siz[u] += siz[lc];</span><br><span class=\"line\">        <span class=\"built_in\">memcpy</span>(dp[u], dp[lc], <span class=\"built_in\">sizeof</span>(dp[lc]));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= siz[lc]; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dp[u][i + <span class=\"number\">1</span>] = <span class=\"built_in\">max</span>(dp[u][i + <span class=\"number\">1</span>], dp[lc][i] + (m - <span class=\"number\">1</span>) * nums[u] - <span class=\"number\">2</span> * i * nums[u]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 左右孩子都有</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(lc), <span class=\"built_in\">dfs</span>(rc);</span><br><span class=\"line\">    siz[u] += siz[lc];</span><br><span class=\"line\">    siz[u] += siz[rc];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= siz[lc]; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt;= siz[rc]; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dp[u][i + j] = <span class=\"built_in\">max</span>(dp[u][i + j], dp[lc][i] + dp[rc][j] - <span class=\"number\">2</span> * i * j * nums[u]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= siz[lc]; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt;= siz[rc]; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dp[u][i + j + <span class=\"number\">1</span>] = <span class=\"built_in\">max</span>(dp[u][i + j + <span class=\"number\">1</span>], dp[lc][i] + dp[rc][j] + (m - <span class=\"number\">1</span>) * nums[u] - <span class=\"number\">2</span> * (i * j + i + j) * nums[u]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n), <span class=\"built_in\">read</span>(m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">        st[st[<span class=\"number\">0</span>] + <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (st[<span class=\"number\">0</span>] &amp;&amp; nums[st[st[<span class=\"number\">0</span>]]] &gt; nums[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            --st[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        son[st[st[<span class=\"number\">0</span>]]][<span class=\"number\">1</span>] = i;</span><br><span class=\"line\">        son[i][<span class=\"number\">0</span>] = st[st[<span class=\"number\">0</span>] + <span class=\"number\">1</span>];</span><br><span class=\"line\">        st[++st[<span class=\"number\">0</span>]] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fa[son[i][<span class=\"number\">0</span>]] = fa[son[i][<span class=\"number\">1</span>]] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root = <span class=\"built_in\">min_element</span>(fa + <span class=\"number\">1</span>, fa + n + <span class=\"number\">1</span>) - fa; <span class=\"comment\">// 找到根节点</span></span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(root);</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(dp[root][m]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1667A 题解","mathjax":true,"_content":"\n# CF1667A Make it Increasing 题解\n\n\n<!-- more -->\n\n\n## 题目链接\n[洛谷](https://www.luogu.com.cn/problem/CF1667A)\n\n[Codeforces](https://codeforces.com/contest/1667/problem/A)\n\n## 题目讲解\n\n有一个比较显然的性质：在**最优方案**下一定有一个位置**不需要改动**。因为若没有位置为 $0$，则我们一定可以对绝对值最小的位置不改动，仍满足单调递增条件。\n\n观察数据范围，本题支持 $O(N^2)$ 的做法，那么我们可以枚举哪一个位置为 $0$。之后分别向前、向后枚举，使得数列满足单调递增性质。\n\n记上一个更改的数为 $last$，则本次对答案的贡献为 \n\n$$\\left \\lfloor \\frac{last}{nums_{i}}  \\right \\rfloor +1$$\n同时更新 \n$$last = (\\left \\lfloor \\frac{last}{nums_{i}}  \\right \\rfloor  + 1) \\times nums_i$$\n\n这里由于在同一方向上符号相同，因此都用正数表示较为方便。\n\n---\n\n\n下面给出示例代码，代码中有一定的注释：\n\n``` cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 5100\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint n;\nint nums[max_n];\nint ans = 0;\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    ans = LONG_LONG_MAX;\n    read(n);\n    for (int i = 1; i <= n; i++)\n    {\n        read(nums[i]);\n    }\n    for (int i = 1; i <= n; i++) // 枚举为 0 的位置\n    {\n        int res = 0;\n        int last = 0;\n        int tms = 0; // 本次需要更改的次数\n        for (int j = i - 1; j >= 1; j--)\n        {\n            tms = (last / nums[j]) + 1;\n            res += tms;\n            last = tms * nums[j];\n        }\n        last = 0;\n        for (int j = i + 1; j <= n; j++)\n        {\n            tms = (last / nums[j]) + 1;\n            res += tms;\n            last = tms * nums[j];\n        }\n        // writeln(res);\n        ans = min(ans, res);\n    }\n    writeln(ans);\n    return 0;\n}\n```","source":"_posts/CF1667A 题解.md","raw":"---\ntitle: \"CF1667A 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF1667A Make it Increasing 题解\n\n\n<!-- more -->\n\n\n## 题目链接\n[洛谷](https://www.luogu.com.cn/problem/CF1667A)\n\n[Codeforces](https://codeforces.com/contest/1667/problem/A)\n\n## 题目讲解\n\n有一个比较显然的性质：在**最优方案**下一定有一个位置**不需要改动**。因为若没有位置为 $0$，则我们一定可以对绝对值最小的位置不改动，仍满足单调递增条件。\n\n观察数据范围，本题支持 $O(N^2)$ 的做法，那么我们可以枚举哪一个位置为 $0$。之后分别向前、向后枚举，使得数列满足单调递增性质。\n\n记上一个更改的数为 $last$，则本次对答案的贡献为 \n\n$$\\left \\lfloor \\frac{last}{nums_{i}}  \\right \\rfloor +1$$\n同时更新 \n$$last = (\\left \\lfloor \\frac{last}{nums_{i}}  \\right \\rfloor  + 1) \\times nums_i$$\n\n这里由于在同一方向上符号相同，因此都用正数表示较为方便。\n\n---\n\n\n下面给出示例代码，代码中有一定的注释：\n\n``` cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 5100\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint n;\nint nums[max_n];\nint ans = 0;\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    ans = LONG_LONG_MAX;\n    read(n);\n    for (int i = 1; i <= n; i++)\n    {\n        read(nums[i]);\n    }\n    for (int i = 1; i <= n; i++) // 枚举为 0 的位置\n    {\n        int res = 0;\n        int last = 0;\n        int tms = 0; // 本次需要更改的次数\n        for (int j = i - 1; j >= 1; j--)\n        {\n            tms = (last / nums[j]) + 1;\n            res += tms;\n            last = tms * nums[j];\n        }\n        last = 0;\n        for (int j = i + 1; j <= n; j++)\n        {\n            tms = (last / nums[j]) + 1;\n            res += tms;\n            last = tms * nums[j];\n        }\n        // writeln(res);\n        ans = min(ans, res);\n    }\n    writeln(ans);\n    return 0;\n}\n```","slug":"CF1667A 题解","published":1,"date":"2023-10-04T14:11:08.247Z","updated":"2023-10-04T14:11:08.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9ys000wosja4hgd5fi1","content":"<h1 id=\"cf1667a-make-it-increasing-题解\">CF1667A Make it Increasing\r\n题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"题目链接\">题目链接</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1667A\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/contest/1667/problem/A\">Codeforces</a></p>\r\n<h2 id=\"题目讲解\">题目讲解</h2>\r\n<p>有一个比较显然的性质：在<strong>最优方案</strong>下一定有一个位置<strong>不需要改动</strong>。因为若没有位置为\r\n<span\r\nclass=\"math inline\">\\(0\\)</span>，则我们一定可以对绝对值最小的位置不改动，仍满足单调递增条件。</p>\r\n<p>观察数据范围，本题支持 <span class=\"math inline\">\\(O(N^2)\\)</span>\r\n的做法，那么我们可以枚举哪一个位置为 <span\r\nclass=\"math inline\">\\(0\\)</span>。之后分别向前、向后枚举，使得数列满足单调递增性质。</p>\r\n<p>记上一个更改的数为 <span\r\nclass=\"math inline\">\\(last\\)</span>，则本次对答案的贡献为</p>\r\n<p><span class=\"math display\">\\[\\left \\lfloor\r\n\\frac{last}{nums_{i}}  \\right \\rfloor +1\\]</span> 同时更新 <span\r\nclass=\"math display\">\\[last = (\\left \\lfloor\r\n\\frac{last}{nums_{i}}  \\right \\rfloor  + 1) \\times nums_i\\]</span></p>\r\n<p>这里由于在同一方向上符号相同，因此都用正数表示较为方便。</p>\r\n<hr />\r\n<p>下面给出示例代码，代码中有一定的注释：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 5100</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> nums[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    ans = LONG_LONG_MAX;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) <span class=\"comment\">// 枚举为 0 的位置</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> last = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> tms = <span class=\"number\">0</span>; <span class=\"comment\">// 本次需要更改的次数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">1</span>; j--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tms = (last / nums[j]) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            res += tms;</span><br><span class=\"line\">            last = tms * nums[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        last = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tms = (last / nums[j]) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            res += tms;</span><br><span class=\"line\">            last = tms * nums[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// writeln(res);</span></span><br><span class=\"line\">        ans = <span class=\"built_in\">min</span>(ans, res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf1667a-make-it-increasing-题解\">CF1667A Make it Increasing\r\n题解</h1>","more":"<h2 id=\"题目链接\">题目链接</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1667A\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/contest/1667/problem/A\">Codeforces</a></p>\r\n<h2 id=\"题目讲解\">题目讲解</h2>\r\n<p>有一个比较显然的性质：在<strong>最优方案</strong>下一定有一个位置<strong>不需要改动</strong>。因为若没有位置为\r\n<span\r\nclass=\"math inline\">\\(0\\)</span>，则我们一定可以对绝对值最小的位置不改动，仍满足单调递增条件。</p>\r\n<p>观察数据范围，本题支持 <span class=\"math inline\">\\(O(N^2)\\)</span>\r\n的做法，那么我们可以枚举哪一个位置为 <span\r\nclass=\"math inline\">\\(0\\)</span>。之后分别向前、向后枚举，使得数列满足单调递增性质。</p>\r\n<p>记上一个更改的数为 <span\r\nclass=\"math inline\">\\(last\\)</span>，则本次对答案的贡献为</p>\r\n<p><span class=\"math display\">\\[\\left \\lfloor\r\n\\frac{last}{nums_{i}}  \\right \\rfloor +1\\]</span> 同时更新 <span\r\nclass=\"math display\">\\[last = (\\left \\lfloor\r\n\\frac{last}{nums_{i}}  \\right \\rfloor  + 1) \\times nums_i\\]</span></p>\r\n<p>这里由于在同一方向上符号相同，因此都用正数表示较为方便。</p>\r\n<hr />\r\n<p>下面给出示例代码，代码中有一定的注释：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 5100</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> nums[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    ans = LONG_LONG_MAX;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) <span class=\"comment\">// 枚举为 0 的位置</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> last = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> tms = <span class=\"number\">0</span>; <span class=\"comment\">// 本次需要更改的次数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">1</span>; j--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tms = (last / nums[j]) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            res += tms;</span><br><span class=\"line\">            last = tms * nums[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        last = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tms = (last / nums[j]) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            res += tms;</span><br><span class=\"line\">            last = tms * nums[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// writeln(res);</span></span><br><span class=\"line\">        ans = <span class=\"built_in\">min</span>(ans, res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1778C Flexible String 题解","mathjax":true,"_content":"\n# CF1778C Flexible String 题解\n\n<!-- more -->\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF1778C)\n\n[Codeforces](https://codeforces.com/problemset/problem/1778/C)\n\n## Description\n\n对于长度为 $n$ 的 $a,b$ 两个字符串，$a$ 初始最多含有 $10$ 个不同字母。你可以选择至多 $k$ 个不同字母，将 $a$ 中的这些字母替换为任意字母。\n\n你需要求出经过上述操作后，$a,b$ 相同位置且相同字母的子串尽可能多。 \n\n数据范围：$1 \\le t \\le 10^4,1 \\le n \\le 10^5,0 \\le k \\le 10$。\n\n## Solution\n\n\n分析一下答案，发现答案是对于每段极长的相同字串长度 $l$，求 $\\sum\\frac{l \\times \\left (l +1 \\right)}{2}$。\n\n首先考虑两个个贪心的性质。\n\n- 一个位置不会被改变两次。\n\n- 如果一个字母被改变，所有这个字母的位置都会被改变（可能改变成本身）。\n\n证明：只要一个字符在集合里，再操作不会有代价，但会增加贡献，一定更优。\n\n看到不同的字母少于 $10$，直接枚举每个字母是否改变即可计算答案，注意要满足不超过 $k$ 个被改变，时间复杂度为 $O\\left(n \\times 2^{n}\\right)$。\n\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 510101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T,n,k;\nchar s[max_n];\nmap<char,int> mp1;\nchar mp2[20];\nint cnt;\nint lowbit(int x)\n{\n    return (-x) & x;\n}\nint pop_count(int x)\n{\n    int tot = 0;\n    while(x)\n    {\n        tot += x & 1;\n        x >>= 1;\n    }\n    return tot;\n}\nchar s2[max_n],s3[max_n];\nint ans;\nvoid check(int flag)\n{\n    int now_ans = 0;\n    for(int i = 1;i <= n;i++)\n    {  \n        if(flag & (1 << (mp1[s[i]] - 1) ) )\n        {\n            s3[i] = s2[i];\n        }\n        else\n        {\n            s3[i] = s[i];\n        }\n    }\n    int ls = 0;\n    for(int i = 1;i <= n;i++)\n    {\n        if(s2[i] != s3[i])\n        {\n            int ap = i - 1 - ls;\n            now_ans += ap * (ap + 1) / 2; \n            ls = i;\n        }\n    }\n    int ap = n - ls;\n    now_ans += ap * (ap + 1) / 2; \n    // cout<<now_ans<<endl;\n    // for(int i = 1;i <= n;i++)\n    // {\n    //     cout<<s3[i]<<\" \";\n    // }\n    // cout<<endl;\n    ans = max(ans,now_ans);\n}\nvoid solution()\n{\n    cnt = 0;\n    mp1.clear();\n    ans= 0;\n    read(n),read(k);\n    scanf(\"%s\",s + 1);\n    scanf(\"%s\",s2 + 1);\n    for(int i = 1;i <= n;i++)\n    {\n        if(!mp1[s[i]])\n        {\n            mp1[s[i]] = ++cnt;\n            mp2[cnt] = s[i];\n        }\n    }\n    for(int i = 0;i < (1LL << cnt);i++)\n    {\n        if(pop_count(i) <= k)\n        {\n           // cout<<\"@\"<<i<<\" \";\n            check(i);\n        \n        }\n    }\n    writeln(ans);\n}\nsigned main()\n{\n    read(T);\n    while(T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```","source":"_posts/CF1778C Flexible String 题解.md","raw":"---\ntitle: \"CF1778C Flexible String 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF1778C Flexible String 题解\n\n<!-- more -->\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF1778C)\n\n[Codeforces](https://codeforces.com/problemset/problem/1778/C)\n\n## Description\n\n对于长度为 $n$ 的 $a,b$ 两个字符串，$a$ 初始最多含有 $10$ 个不同字母。你可以选择至多 $k$ 个不同字母，将 $a$ 中的这些字母替换为任意字母。\n\n你需要求出经过上述操作后，$a,b$ 相同位置且相同字母的子串尽可能多。 \n\n数据范围：$1 \\le t \\le 10^4,1 \\le n \\le 10^5,0 \\le k \\le 10$。\n\n## Solution\n\n\n分析一下答案，发现答案是对于每段极长的相同字串长度 $l$，求 $\\sum\\frac{l \\times \\left (l +1 \\right)}{2}$。\n\n首先考虑两个个贪心的性质。\n\n- 一个位置不会被改变两次。\n\n- 如果一个字母被改变，所有这个字母的位置都会被改变（可能改变成本身）。\n\n证明：只要一个字符在集合里，再操作不会有代价，但会增加贡献，一定更优。\n\n看到不同的字母少于 $10$，直接枚举每个字母是否改变即可计算答案，注意要满足不超过 $k$ 个被改变，时间复杂度为 $O\\left(n \\times 2^{n}\\right)$。\n\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 510101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T,n,k;\nchar s[max_n];\nmap<char,int> mp1;\nchar mp2[20];\nint cnt;\nint lowbit(int x)\n{\n    return (-x) & x;\n}\nint pop_count(int x)\n{\n    int tot = 0;\n    while(x)\n    {\n        tot += x & 1;\n        x >>= 1;\n    }\n    return tot;\n}\nchar s2[max_n],s3[max_n];\nint ans;\nvoid check(int flag)\n{\n    int now_ans = 0;\n    for(int i = 1;i <= n;i++)\n    {  \n        if(flag & (1 << (mp1[s[i]] - 1) ) )\n        {\n            s3[i] = s2[i];\n        }\n        else\n        {\n            s3[i] = s[i];\n        }\n    }\n    int ls = 0;\n    for(int i = 1;i <= n;i++)\n    {\n        if(s2[i] != s3[i])\n        {\n            int ap = i - 1 - ls;\n            now_ans += ap * (ap + 1) / 2; \n            ls = i;\n        }\n    }\n    int ap = n - ls;\n    now_ans += ap * (ap + 1) / 2; \n    // cout<<now_ans<<endl;\n    // for(int i = 1;i <= n;i++)\n    // {\n    //     cout<<s3[i]<<\" \";\n    // }\n    // cout<<endl;\n    ans = max(ans,now_ans);\n}\nvoid solution()\n{\n    cnt = 0;\n    mp1.clear();\n    ans= 0;\n    read(n),read(k);\n    scanf(\"%s\",s + 1);\n    scanf(\"%s\",s2 + 1);\n    for(int i = 1;i <= n;i++)\n    {\n        if(!mp1[s[i]])\n        {\n            mp1[s[i]] = ++cnt;\n            mp2[cnt] = s[i];\n        }\n    }\n    for(int i = 0;i < (1LL << cnt);i++)\n    {\n        if(pop_count(i) <= k)\n        {\n           // cout<<\"@\"<<i<<\" \";\n            check(i);\n        \n        }\n    }\n    writeln(ans);\n}\nsigned main()\n{\n    read(T);\n    while(T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```","slug":"CF1778C Flexible String 题解","published":1,"date":"2023-10-04T14:11:08.248Z","updated":"2023-10-04T14:11:08.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9yt000zosja69rddn31","content":"<h1 id=\"cf1778c-flexible-string-题解\">CF1778C Flexible String 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1778C\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1778/C\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>对于长度为 <span class=\"math inline\">\\(n\\)</span> 的 <span\r\nclass=\"math inline\">\\(a,b\\)</span> 两个字符串，<span\r\nclass=\"math inline\">\\(a\\)</span> 初始最多含有 <span\r\nclass=\"math inline\">\\(10\\)</span> 个不同字母。你可以选择至多 <span\r\nclass=\"math inline\">\\(k\\)</span> 个不同字母，将 <span\r\nclass=\"math inline\">\\(a\\)</span> 中的这些字母替换为任意字母。</p>\r\n<p>你需要求出经过上述操作后，<span class=\"math inline\">\\(a,b\\)</span>\r\n相同位置且相同字母的子串尽可能多。</p>\r\n<p>数据范围：<span class=\"math inline\">\\(1 \\le t \\le 10^4,1 \\le n \\le\r\n10^5,0 \\le k \\le 10\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>分析一下答案，发现答案是对于每段极长的相同字串长度 <span\r\nclass=\"math inline\">\\(l\\)</span>，求 <span\r\nclass=\"math inline\">\\(\\sum\\frac{l \\times \\left (l +1\r\n\\right)}{2}\\)</span>。</p>\r\n<p>首先考虑两个个贪心的性质。</p>\r\n<ul>\r\n<li><p>一个位置不会被改变两次。</p></li>\r\n<li><p>如果一个字母被改变，所有这个字母的位置都会被改变（可能改变成本身）。</p></li>\r\n</ul>\r\n<p>证明：只要一个字符在集合里，再操作不会有代价，但会增加贡献，一定更优。</p>\r\n<p>看到不同的字母少于 <span\r\nclass=\"math inline\">\\(10\\)</span>，直接枚举每个字母是否改变即可计算答案，注意要满足不超过\r\n<span class=\"math inline\">\\(k\\)</span> 个被改变，时间复杂度为 <span\r\nclass=\"math inline\">\\(O\\left(n \\times 2^{n}\\right)\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 510101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,k;</span><br><span class=\"line\"><span class=\"type\">char</span> s[max_n];</span><br><span class=\"line\">map&lt;<span class=\"type\">char</span>,<span class=\"type\">int</span>&gt; mp1;</span><br><span class=\"line\"><span class=\"type\">char</span> mp2[<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> cnt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (-x) &amp; x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pop_count</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tot += x &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">        x &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">char</span> s2[max_n],s3[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> flag)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> now_ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag &amp; (<span class=\"number\">1</span> &lt;&lt; (mp1[s[i]] - <span class=\"number\">1</span>) ) )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            s3[i] = s2[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            s3[i] = s[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ls = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s2[i] != s3[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> ap = i - <span class=\"number\">1</span> - ls;</span><br><span class=\"line\">            now_ans += ap * (ap + <span class=\"number\">1</span>) / <span class=\"number\">2</span>; </span><br><span class=\"line\">            ls = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ap = n - ls;</span><br><span class=\"line\">    now_ans += ap * (ap + <span class=\"number\">1</span>) / <span class=\"number\">2</span>; </span><br><span class=\"line\">    <span class=\"comment\">// cout&lt;&lt;now_ans&lt;&lt;endl;</span></span><br><span class=\"line\">    <span class=\"comment\">// for(int i = 1;i &lt;= n;i++)</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     cout&lt;&lt;s3[i]&lt;&lt;&quot; &quot;;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// cout&lt;&lt;endl;</span></span><br><span class=\"line\">    ans = <span class=\"built_in\">max</span>(ans,now_ans);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    mp1.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    ans= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n),<span class=\"built_in\">read</span>(k);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,s + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,s2 + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!mp1[s[i]])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mp1[s[i]] = ++cnt;</span><br><span class=\"line\">            mp2[cnt] = s[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; (<span class=\"number\">1LL</span> &lt;&lt; cnt);i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">pop_count</span>(i) &lt;= k)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">           <span class=\"comment\">// cout&lt;&lt;&quot;@&quot;&lt;&lt;i&lt;&lt;&quot; &quot;;</span></span><br><span class=\"line\">            <span class=\"built_in\">check</span>(i);</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf1778c-flexible-string-题解\">CF1778C Flexible String 题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1778C\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1778/C\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>对于长度为 <span class=\"math inline\">\\(n\\)</span> 的 <span\r\nclass=\"math inline\">\\(a,b\\)</span> 两个字符串，<span\r\nclass=\"math inline\">\\(a\\)</span> 初始最多含有 <span\r\nclass=\"math inline\">\\(10\\)</span> 个不同字母。你可以选择至多 <span\r\nclass=\"math inline\">\\(k\\)</span> 个不同字母，将 <span\r\nclass=\"math inline\">\\(a\\)</span> 中的这些字母替换为任意字母。</p>\r\n<p>你需要求出经过上述操作后，<span class=\"math inline\">\\(a,b\\)</span>\r\n相同位置且相同字母的子串尽可能多。</p>\r\n<p>数据范围：<span class=\"math inline\">\\(1 \\le t \\le 10^4,1 \\le n \\le\r\n10^5,0 \\le k \\le 10\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>分析一下答案，发现答案是对于每段极长的相同字串长度 <span\r\nclass=\"math inline\">\\(l\\)</span>，求 <span\r\nclass=\"math inline\">\\(\\sum\\frac{l \\times \\left (l +1\r\n\\right)}{2}\\)</span>。</p>\r\n<p>首先考虑两个个贪心的性质。</p>\r\n<ul>\r\n<li><p>一个位置不会被改变两次。</p></li>\r\n<li><p>如果一个字母被改变，所有这个字母的位置都会被改变（可能改变成本身）。</p></li>\r\n</ul>\r\n<p>证明：只要一个字符在集合里，再操作不会有代价，但会增加贡献，一定更优。</p>\r\n<p>看到不同的字母少于 <span\r\nclass=\"math inline\">\\(10\\)</span>，直接枚举每个字母是否改变即可计算答案，注意要满足不超过\r\n<span class=\"math inline\">\\(k\\)</span> 个被改变，时间复杂度为 <span\r\nclass=\"math inline\">\\(O\\left(n \\times 2^{n}\\right)\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 510101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,k;</span><br><span class=\"line\"><span class=\"type\">char</span> s[max_n];</span><br><span class=\"line\">map&lt;<span class=\"type\">char</span>,<span class=\"type\">int</span>&gt; mp1;</span><br><span class=\"line\"><span class=\"type\">char</span> mp2[<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> cnt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (-x) &amp; x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pop_count</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(x)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tot += x &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">        x &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">char</span> s2[max_n],s3[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> flag)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> now_ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(flag &amp; (<span class=\"number\">1</span> &lt;&lt; (mp1[s[i]] - <span class=\"number\">1</span>) ) )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            s3[i] = s2[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            s3[i] = s[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ls = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s2[i] != s3[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> ap = i - <span class=\"number\">1</span> - ls;</span><br><span class=\"line\">            now_ans += ap * (ap + <span class=\"number\">1</span>) / <span class=\"number\">2</span>; </span><br><span class=\"line\">            ls = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ap = n - ls;</span><br><span class=\"line\">    now_ans += ap * (ap + <span class=\"number\">1</span>) / <span class=\"number\">2</span>; </span><br><span class=\"line\">    <span class=\"comment\">// cout&lt;&lt;now_ans&lt;&lt;endl;</span></span><br><span class=\"line\">    <span class=\"comment\">// for(int i = 1;i &lt;= n;i++)</span></span><br><span class=\"line\">    <span class=\"comment\">// &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     cout&lt;&lt;s3[i]&lt;&lt;&quot; &quot;;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// cout&lt;&lt;endl;</span></span><br><span class=\"line\">    ans = <span class=\"built_in\">max</span>(ans,now_ans);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    mp1.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    ans= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n),<span class=\"built_in\">read</span>(k);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,s + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,s2 + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!mp1[s[i]])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mp1[s[i]] = ++cnt;</span><br><span class=\"line\">            mp2[cnt] = s[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; (<span class=\"number\">1LL</span> &lt;&lt; cnt);i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">pop_count</span>(i) &lt;= k)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">           <span class=\"comment\">// cout&lt;&lt;&quot;@&quot;&lt;&lt;i&lt;&lt;&quot; &quot;;</span></span><br><span class=\"line\">            <span class=\"built_in\">check</span>(i);</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1767C Count Binary Strings 题解","mathjax":true,"_content":"\n# CF1767C Count Binary Strings 题解\n\n<!-- more -->\n\n\n\n## Foreword\n\n感谢 [@樱雪喵](https://www.luogu.com.cn/user/234074)、[@swiftc](https://www.luogu.com.cn/user/183154) 两位大佬的耐心指导。\n\n## Links \n\n[洛谷](https://www.luogu.com.cn/problem/CF1767C)\n\n[Codeforces](https://codeforces.com/problemset/problem/1767/C)\n\n## Description\n\n有一个长度为 $n$ 的 01 串 $s$（下标从 $1$ 开始）和一些限制 $a_{i,j}(1 \\le i \\le j \\le n)$。\n\n$a_{i,j}$ 的含义如下：\n\n| $a_{i,j}=$ |                      含义                       |\n| :--------: | :---------------------------------------------: |\n|    $0$     |                    没有限制                     |\n|    $1$     | 对于所有的 $i \\le p \\le q \\le j$ 均有 $s_p=s_q$ |\n|    $2$     | 存在 $i \\le p \\le q \\le j$ 使得 $s_p \\neq s_q$  |\n\n求可能的 $s$ 的个数。**答案对 $998\\,244\\,353$ 取模。**\n\n\n对于 $100\\%$ 的数据，$2 \\le n \\le 100$，$0 \\le a_{i,j} \\le 2$。\n\n## Solution\n\n这种计数类问题大概率是组合数学或者 dp，然而这道题限制条件很多，组合数学大概是做不成了，那么考虑 dp。\n\n首先一个很显然的情况是如果 $a_{i,i} = 2$ 那么无解。接下来考虑对 $a_{i,j} = 1$ 的限制，我们把这些需要区间内全相同的合并成一个块，对块内每个位置的限制等价于对整个块的限制，使用并查集维护即可，注意每个块合并的时候都合并到最前面的位置。\n\n```cpp\nint fa[222];\nvoid init()\n{\n    for (int i = 1; i <= n; i++)\n        fa[i] = i;\n}\nint find(int u)\n{\n    if (fa[u] == u)\n        return fa[u];\n    else\n        return fa[u] = find(fa[u]);\n}\nvoid merge(int u, int v)\n{\n    if (find(u) == find(v))\n        return;\n    if (find(u) < find(v))\n        fa[find(v)] = find(u);\n    else\n        fa[find(u)] = find(v);\n}\n```\n主函数中：\n\n```cpp\ninit();\nfor (int i = 1; i <= n; i++)\n{\n    for (int j = i; j <= n; j++)\n    {\n        read(nums[i][j]);\n        if (nums[i][j] == 1)\n        {\n            for (int k = i + 1; k <= j; k++)\n            {\n                merge(i, k);\n            }\n        }\n    }\n}\n```\n\n之后，我们很容易想到，对于每个块 $p$，我们找到对于 $i \\in p$，$a_{i,j} = 2$ 这样的限制中最大的 $j$，只要满足这条限制，在前面的限制也就都满足了，求出 $mx_{i}$ 表示块 $i$ 之前最后一个能满足从 $mx_{i}$ 到 $i$ 与 $i$ 填的数全相同的块。\n\n\nDP 的思路有两种，一种是一维的，另一种是二维的。我开始写的一维，然而没有考虑到一些问题写挂了，尝试了二维通过之后又回到了一维。\n\n这里先从二维 DP 开始讲。\n\n考虑某个位置和前一位是否相同，有：\n\n$$\\begin{cases}\n dp_{i,j} = dp_{i - 1,j} & \\texttt{if } s_{i} = s_{i - 1}\n\\\\\ndp_{i,i} = \\sum_{j = mx_{i}}^{i - 1} dp_{i - 1,j} & \\texttt{if } s_{i} \\neq s_{i - 1}\n\\end{cases}$$\n\n即如果要求和前一位相同，不会有新的贡献，否则累加贡献。\n\n直接判断是否可行并转移即可。\n\n```cpp\ndp[1][1] = 1;\nfor (int i = 2; i <= n; i++)\n{\n    if (find(i) == i)\n    {\n        for (int j = 1; j < i; j++)\n        {\n            (dp[i][i] += dp[i - 1][j]) %= 998244353;\n        }\n    }\n    for (int j = mx[find(i)]; j < i; j++)\n    {\n        (dp[i][j] += dp[i - 1][j]) %= 998244353;\n    }\n}\n\nint res = 0;\nfor (int i = mmx; i <= n; i++)\n{\n    (res += dp[n][i]) %= 998244353;\n}\nwriteln(2 * res % 998244353);\n```\n\n接下来考虑一维 DP 怎么做。\n\n$$\\begin{cases}\n dp_{i,j} = dp_{i - 1,j} & \\texttt{if } s_{i} = s_{i - 1}\n\\\\\ndp_{i,i} = \\sum_{j = mx_{i}}^{i - 1} dp_{i - 1,j} & \\texttt{if } s_{i} \\neq s_{i - 1}\n\\end{cases}$$\n\n上面的方程实际上就是 相同的地方 复制了 前面第一个不同的地方。\n\n定义 $k$ 为 $i$ 之前第一个不同的。有\n$$\ndp_{i,i} = \\sum_{k}\\sum_{j = mx_{i}}^{i - 1} dp_{k,j} \\ \\texttt{  if } s_{i} \\neq s_{i - 1}\n$$\n\n也就是我们每次从 $k$ 转移并且累加一下。\n\n注意到由于 $s_{k} \\neq s_{k - 1}$，我们之前计算 $dp_{k,j'}$ 的时候应该只更新了 $dp_{k,k}$。\n\n因此实际上我们得到的是 $dp_{i,i} = \\sum_{k}dp_{k,k} \\ \\texttt{ if } mx_{i} \\leq k \\leq i - 1$。\n\n优化掉第二维，有 $dp_{i} = \\sum_{k = mx_{i}}^{i - 1}dp_{k} $。\n\n**注意：这里有个问题，假设有按顺序 $A,B,C,D$ 四个块，如果限制 $B,C$ 不能相同，那么显然我们无法从 $A$ 到 $D$ 全部相同，因此我们 $mx$ 还要取一个前缀 $\\operatorname{max}$**。\n\n\n由于我们合并块的编号并不连续，这不利于我们 dp，因此将块的编号离散化一下即可。\n```cpp\n// 由于 fa 更新的时候不是 1,2,3,4 这样，而是每块第一个的编号\n// 我们把 fa[i] 离散化，pos 表示是第几个，rea 表示第 i 个的实际 fa\nfor (int i = 1; i <= n; i++)\n{\n    if (find(i) == i)\n    {\n        rea[++rea[0]] = i;\n        pos[i] = rea[0];\n    }\n}\n```\n之后枚举上一个不同的点转移就可以了，方程：\n\n```cpp\nfor (int i = 1; i <= n; i++)\n{\n    if (find(i) != i)\n    {\n        continue;\n    }\n    ++cnt;\n    // 现在只有无限制和要求出现不同了\n    // 我们可以枚举上一个不同的位置\n\n    for (int j = pos[mx[rea[cnt]]]; j < cnt; j++)\n    {\n        (dp[cnt] += dp[j]) %= 998244353;\n    }\n}\n```\n\n把所有 $0$，$1$ 交换不会违反限制，因此答案要乘 $2$。\n\n\n## Codes\n\n一维完整代码。\n\n```cpp\n// Problem: C. Count Binary Strings\n// Contest: Educational Codeforces Round 140 (Rated for Div. 2)\n// URL: https://codeforces.com/contest/1767/problem/C\n// Memory Limit: 512 MB\n// Time Limit: 2000 ms\n//\n// Powered by CP Editor (https://cpeditor.org)\n\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint n, nums[200][200];\nint fa[222];\nvoid init()\n{\n    for (int i = 1; i <= n; i++)\n    {\n        fa[i] = i;\n    }\n}\nint find(int u)\n{\n    if (fa[u] == u)\n    {\n        return fa[u];\n    }\n    else\n    {\n        return fa[u] = find(fa[u]);\n    }\n}\nvoid merge(int u, int v)\n{\n    if (find(u) == find(v))\n    {\n        return;\n    }\n    if (find(u) < find(v))\n    {\n        fa[find(v)] = find(u);\n    }\n    else\n    {\n        fa[find(u)] = find(v);\n    }\n}\nint dp[222];\nint mx[222];\nint rea[222];\nint pos[222];\nsigned main()\n{\n    read(n);\n    init();\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = i; j <= n; j++)\n        {\n            read(nums[i][j]);\n            if (nums[i][j] == 1)\n            {\n                for (int k = i + 1; k <= j; k++)\n                {\n                    merge(i, k);\n                }\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        if (nums[i][i] == 2)\n        {\n            puts(\"0\");\n            return 0;\n        }\n    }\n    // 对于每一个需要找到最晚需要不同的，这样能满足前面的所有条件\n    for (int i = 1; i <= n; i++)\n    {\n        mx[i] = 0;\n    }\n    for (int i = 2; i <= n; i++)\n    {\n        for (int j = i - 1; j; j--)\n        {\n            if (nums[j][i] == 2)\n            {\n                if (find(i) == find(j))\n                {\n                    puts(\"0\");\n                    exit(0);\n                }\n                mx[find(i)] = max(mx[find(i)], find(j));\n                break;\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        mx[i] = max(mx[i], mx[i - 1]);\n    }\n\n    int cnt = 0;\n    dp[0] = 1;\n    for (int i = 1; i <= n; i++)\n    {\n        if (find(i) == i)\n        {\n            rea[++rea[0]] = i;\n            pos[i] = rea[0];\n        }\n    }\n\n    for (int i = 1; i <= n; i++)\n    {\n        if (find(i) != i)\n        {\n            continue;\n        }\n        ++cnt;\n        // 现在只有无限制和要求出现不同了\n        // 我们可以枚举上一个不同的位置\n        // 由于 fa 更新的时候不是 1,2,3,4 这样，而是每块第一个的编号\n        // 我们把 fa[i] 离散化，pos 表示是第几个，rea 表示第 i 个的实际 fa\n        for (int j = pos[mx[rea[cnt]]]; j < cnt; j++)\n        {\n            (dp[cnt] += dp[j]) %= 998244353;\n        }\n    }\n    //   cout << cnt << endl;\n    writeln(2 * dp[cnt] % 998244353);\n    return 0;\n}\n```","source":"_posts/CF1767C Count Binary Strings 题解.md","raw":"---\ntitle: \"CF1767C Count Binary Strings 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF1767C Count Binary Strings 题解\n\n<!-- more -->\n\n\n\n## Foreword\n\n感谢 [@樱雪喵](https://www.luogu.com.cn/user/234074)、[@swiftc](https://www.luogu.com.cn/user/183154) 两位大佬的耐心指导。\n\n## Links \n\n[洛谷](https://www.luogu.com.cn/problem/CF1767C)\n\n[Codeforces](https://codeforces.com/problemset/problem/1767/C)\n\n## Description\n\n有一个长度为 $n$ 的 01 串 $s$（下标从 $1$ 开始）和一些限制 $a_{i,j}(1 \\le i \\le j \\le n)$。\n\n$a_{i,j}$ 的含义如下：\n\n| $a_{i,j}=$ |                      含义                       |\n| :--------: | :---------------------------------------------: |\n|    $0$     |                    没有限制                     |\n|    $1$     | 对于所有的 $i \\le p \\le q \\le j$ 均有 $s_p=s_q$ |\n|    $2$     | 存在 $i \\le p \\le q \\le j$ 使得 $s_p \\neq s_q$  |\n\n求可能的 $s$ 的个数。**答案对 $998\\,244\\,353$ 取模。**\n\n\n对于 $100\\%$ 的数据，$2 \\le n \\le 100$，$0 \\le a_{i,j} \\le 2$。\n\n## Solution\n\n这种计数类问题大概率是组合数学或者 dp，然而这道题限制条件很多，组合数学大概是做不成了，那么考虑 dp。\n\n首先一个很显然的情况是如果 $a_{i,i} = 2$ 那么无解。接下来考虑对 $a_{i,j} = 1$ 的限制，我们把这些需要区间内全相同的合并成一个块，对块内每个位置的限制等价于对整个块的限制，使用并查集维护即可，注意每个块合并的时候都合并到最前面的位置。\n\n```cpp\nint fa[222];\nvoid init()\n{\n    for (int i = 1; i <= n; i++)\n        fa[i] = i;\n}\nint find(int u)\n{\n    if (fa[u] == u)\n        return fa[u];\n    else\n        return fa[u] = find(fa[u]);\n}\nvoid merge(int u, int v)\n{\n    if (find(u) == find(v))\n        return;\n    if (find(u) < find(v))\n        fa[find(v)] = find(u);\n    else\n        fa[find(u)] = find(v);\n}\n```\n主函数中：\n\n```cpp\ninit();\nfor (int i = 1; i <= n; i++)\n{\n    for (int j = i; j <= n; j++)\n    {\n        read(nums[i][j]);\n        if (nums[i][j] == 1)\n        {\n            for (int k = i + 1; k <= j; k++)\n            {\n                merge(i, k);\n            }\n        }\n    }\n}\n```\n\n之后，我们很容易想到，对于每个块 $p$，我们找到对于 $i \\in p$，$a_{i,j} = 2$ 这样的限制中最大的 $j$，只要满足这条限制，在前面的限制也就都满足了，求出 $mx_{i}$ 表示块 $i$ 之前最后一个能满足从 $mx_{i}$ 到 $i$ 与 $i$ 填的数全相同的块。\n\n\nDP 的思路有两种，一种是一维的，另一种是二维的。我开始写的一维，然而没有考虑到一些问题写挂了，尝试了二维通过之后又回到了一维。\n\n这里先从二维 DP 开始讲。\n\n考虑某个位置和前一位是否相同，有：\n\n$$\\begin{cases}\n dp_{i,j} = dp_{i - 1,j} & \\texttt{if } s_{i} = s_{i - 1}\n\\\\\ndp_{i,i} = \\sum_{j = mx_{i}}^{i - 1} dp_{i - 1,j} & \\texttt{if } s_{i} \\neq s_{i - 1}\n\\end{cases}$$\n\n即如果要求和前一位相同，不会有新的贡献，否则累加贡献。\n\n直接判断是否可行并转移即可。\n\n```cpp\ndp[1][1] = 1;\nfor (int i = 2; i <= n; i++)\n{\n    if (find(i) == i)\n    {\n        for (int j = 1; j < i; j++)\n        {\n            (dp[i][i] += dp[i - 1][j]) %= 998244353;\n        }\n    }\n    for (int j = mx[find(i)]; j < i; j++)\n    {\n        (dp[i][j] += dp[i - 1][j]) %= 998244353;\n    }\n}\n\nint res = 0;\nfor (int i = mmx; i <= n; i++)\n{\n    (res += dp[n][i]) %= 998244353;\n}\nwriteln(2 * res % 998244353);\n```\n\n接下来考虑一维 DP 怎么做。\n\n$$\\begin{cases}\n dp_{i,j} = dp_{i - 1,j} & \\texttt{if } s_{i} = s_{i - 1}\n\\\\\ndp_{i,i} = \\sum_{j = mx_{i}}^{i - 1} dp_{i - 1,j} & \\texttt{if } s_{i} \\neq s_{i - 1}\n\\end{cases}$$\n\n上面的方程实际上就是 相同的地方 复制了 前面第一个不同的地方。\n\n定义 $k$ 为 $i$ 之前第一个不同的。有\n$$\ndp_{i,i} = \\sum_{k}\\sum_{j = mx_{i}}^{i - 1} dp_{k,j} \\ \\texttt{  if } s_{i} \\neq s_{i - 1}\n$$\n\n也就是我们每次从 $k$ 转移并且累加一下。\n\n注意到由于 $s_{k} \\neq s_{k - 1}$，我们之前计算 $dp_{k,j'}$ 的时候应该只更新了 $dp_{k,k}$。\n\n因此实际上我们得到的是 $dp_{i,i} = \\sum_{k}dp_{k,k} \\ \\texttt{ if } mx_{i} \\leq k \\leq i - 1$。\n\n优化掉第二维，有 $dp_{i} = \\sum_{k = mx_{i}}^{i - 1}dp_{k} $。\n\n**注意：这里有个问题，假设有按顺序 $A,B,C,D$ 四个块，如果限制 $B,C$ 不能相同，那么显然我们无法从 $A$ 到 $D$ 全部相同，因此我们 $mx$ 还要取一个前缀 $\\operatorname{max}$**。\n\n\n由于我们合并块的编号并不连续，这不利于我们 dp，因此将块的编号离散化一下即可。\n```cpp\n// 由于 fa 更新的时候不是 1,2,3,4 这样，而是每块第一个的编号\n// 我们把 fa[i] 离散化，pos 表示是第几个，rea 表示第 i 个的实际 fa\nfor (int i = 1; i <= n; i++)\n{\n    if (find(i) == i)\n    {\n        rea[++rea[0]] = i;\n        pos[i] = rea[0];\n    }\n}\n```\n之后枚举上一个不同的点转移就可以了，方程：\n\n```cpp\nfor (int i = 1; i <= n; i++)\n{\n    if (find(i) != i)\n    {\n        continue;\n    }\n    ++cnt;\n    // 现在只有无限制和要求出现不同了\n    // 我们可以枚举上一个不同的位置\n\n    for (int j = pos[mx[rea[cnt]]]; j < cnt; j++)\n    {\n        (dp[cnt] += dp[j]) %= 998244353;\n    }\n}\n```\n\n把所有 $0$，$1$ 交换不会违反限制，因此答案要乘 $2$。\n\n\n## Codes\n\n一维完整代码。\n\n```cpp\n// Problem: C. Count Binary Strings\n// Contest: Educational Codeforces Round 140 (Rated for Div. 2)\n// URL: https://codeforces.com/contest/1767/problem/C\n// Memory Limit: 512 MB\n// Time Limit: 2000 ms\n//\n// Powered by CP Editor (https://cpeditor.org)\n\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint n, nums[200][200];\nint fa[222];\nvoid init()\n{\n    for (int i = 1; i <= n; i++)\n    {\n        fa[i] = i;\n    }\n}\nint find(int u)\n{\n    if (fa[u] == u)\n    {\n        return fa[u];\n    }\n    else\n    {\n        return fa[u] = find(fa[u]);\n    }\n}\nvoid merge(int u, int v)\n{\n    if (find(u) == find(v))\n    {\n        return;\n    }\n    if (find(u) < find(v))\n    {\n        fa[find(v)] = find(u);\n    }\n    else\n    {\n        fa[find(u)] = find(v);\n    }\n}\nint dp[222];\nint mx[222];\nint rea[222];\nint pos[222];\nsigned main()\n{\n    read(n);\n    init();\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = i; j <= n; j++)\n        {\n            read(nums[i][j]);\n            if (nums[i][j] == 1)\n            {\n                for (int k = i + 1; k <= j; k++)\n                {\n                    merge(i, k);\n                }\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        if (nums[i][i] == 2)\n        {\n            puts(\"0\");\n            return 0;\n        }\n    }\n    // 对于每一个需要找到最晚需要不同的，这样能满足前面的所有条件\n    for (int i = 1; i <= n; i++)\n    {\n        mx[i] = 0;\n    }\n    for (int i = 2; i <= n; i++)\n    {\n        for (int j = i - 1; j; j--)\n        {\n            if (nums[j][i] == 2)\n            {\n                if (find(i) == find(j))\n                {\n                    puts(\"0\");\n                    exit(0);\n                }\n                mx[find(i)] = max(mx[find(i)], find(j));\n                break;\n            }\n        }\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        mx[i] = max(mx[i], mx[i - 1]);\n    }\n\n    int cnt = 0;\n    dp[0] = 1;\n    for (int i = 1; i <= n; i++)\n    {\n        if (find(i) == i)\n        {\n            rea[++rea[0]] = i;\n            pos[i] = rea[0];\n        }\n    }\n\n    for (int i = 1; i <= n; i++)\n    {\n        if (find(i) != i)\n        {\n            continue;\n        }\n        ++cnt;\n        // 现在只有无限制和要求出现不同了\n        // 我们可以枚举上一个不同的位置\n        // 由于 fa 更新的时候不是 1,2,3,4 这样，而是每块第一个的编号\n        // 我们把 fa[i] 离散化，pos 表示是第几个，rea 表示第 i 个的实际 fa\n        for (int j = pos[mx[rea[cnt]]]; j < cnt; j++)\n        {\n            (dp[cnt] += dp[j]) %= 998244353;\n        }\n    }\n    //   cout << cnt << endl;\n    writeln(2 * dp[cnt] % 998244353);\n    return 0;\n}\n```","slug":"CF1767C Count Binary Strings 题解","published":1,"date":"2023-10-04T14:11:08.247Z","updated":"2023-10-04T14:11:08.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9yu0011osjaa9ee23m2","content":"<h1 id=\"cf1767c-count-binary-strings-题解\">CF1767C Count Binary Strings\r\n题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"foreword\">Foreword</h2>\r\n<p>感谢 <a href=\"https://www.luogu.com.cn/user/234074\"><span\r\nclass=\"citation\" data-cites=\"樱雪喵\">@樱雪喵</span></a>、<a\r\nhref=\"https://www.luogu.com.cn/user/183154\"><span class=\"citation\"\r\ndata-cites=\"swiftc\">@swiftc</span></a> 两位大佬的耐心指导。</p>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1767C\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1767/C\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>有一个长度为 <span class=\"math inline\">\\(n\\)</span> 的 01 串 <span\r\nclass=\"math inline\">\\(s\\)</span>（下标从 <span\r\nclass=\"math inline\">\\(1\\)</span> 开始）和一些限制 <span\r\nclass=\"math inline\">\\(a_{i,j}(1 \\le i \\le j \\le n)\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(a_{i,j}\\)</span> 的含义如下：</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(a_{i,j}=\\)</span></th>\r\n<th style=\"text-align: center;\">含义</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(0\\)</span></td>\r\n<td style=\"text-align: center;\">没有限制</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(1\\)</span></td>\r\n<td style=\"text-align: center;\">对于所有的 <span class=\"math inline\">\\(i\r\n\\le p \\le q \\le j\\)</span> 均有 <span\r\nclass=\"math inline\">\\(s_p=s_q\\)</span></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(2\\)</span></td>\r\n<td style=\"text-align: center;\">存在 <span class=\"math inline\">\\(i \\le p\r\n\\le q \\le j\\)</span> 使得 <span class=\"math inline\">\\(s_p \\neq\r\ns_q\\)</span></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>求可能的 <span class=\"math inline\">\\(s\\)</span>\r\n的个数。<strong>答案对 <span\r\nclass=\"math inline\">\\(998\\,244\\,353\\)</span> 取模。</strong></p>\r\n<p>对于 <span class=\"math inline\">\\(100\\%\\)</span> 的数据，<span\r\nclass=\"math inline\">\\(2 \\le n \\le 100\\)</span>，<span\r\nclass=\"math inline\">\\(0 \\le a_{i,j} \\le 2\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>这种计数类问题大概率是组合数学或者\r\ndp，然而这道题限制条件很多，组合数学大概是做不成了，那么考虑 dp。</p>\r\n<p>首先一个很显然的情况是如果 <span class=\"math inline\">\\(a_{i,i} =\r\n2\\)</span> 那么无解。接下来考虑对 <span class=\"math inline\">\\(a_{i,j} =\r\n1\\)</span>\r\n的限制，我们把这些需要区间内全相同的合并成一个块，对块内每个位置的限制等价于对整个块的限制，使用并查集维护即可，注意每个块合并的时候都合并到最前面的位置。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> fa[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        fa[i] = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fa[u] == u)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa[u];</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa[u] = <span class=\"built_in\">find</span>(fa[u]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(u) == <span class=\"built_in\">find</span>(v))</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(u) &lt; <span class=\"built_in\">find</span>(v))</span><br><span class=\"line\">        fa[<span class=\"built_in\">find</span>(v)] = <span class=\"built_in\">find</span>(u);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        fa[<span class=\"built_in\">find</span>(u)] = <span class=\"built_in\">find</span>(v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>主函数中：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">init</span>();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt;= n; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i][j]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i][j] == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = i + <span class=\"number\">1</span>; k &lt;= j; k++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">merge</span>(i, k);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>之后，我们很容易想到，对于每个块 <span\r\nclass=\"math inline\">\\(p\\)</span>，我们找到对于 <span\r\nclass=\"math inline\">\\(i \\in p\\)</span>，<span\r\nclass=\"math inline\">\\(a_{i,j} = 2\\)</span> 这样的限制中最大的 <span\r\nclass=\"math inline\">\\(j\\)</span>，只要满足这条限制，在前面的限制也就都满足了，求出\r\n<span class=\"math inline\">\\(mx_{i}\\)</span> 表示块 <span\r\nclass=\"math inline\">\\(i\\)</span> 之前最后一个能满足从 <span\r\nclass=\"math inline\">\\(mx_{i}\\)</span> 到 <span\r\nclass=\"math inline\">\\(i\\)</span> 与 <span\r\nclass=\"math inline\">\\(i\\)</span> 填的数全相同的块。</p>\r\n<p>DP\r\n的思路有两种，一种是一维的，另一种是二维的。我开始写的一维，然而没有考虑到一些问题写挂了，尝试了二维通过之后又回到了一维。</p>\r\n<p>这里先从二维 DP 开始讲。</p>\r\n<p>考虑某个位置和前一位是否相同，有：</p>\r\n<p><span class=\"math display\">\\[\\begin{cases}\r\ndp_{i,j} = dp_{i - 1,j} &amp; \\texttt{if } s_{i} = s_{i - 1}\r\n\\\\\r\ndp_{i,i} = \\sum_{j = mx_{i}}^{i - 1} dp_{i - 1,j} &amp; \\texttt{if }\r\ns_{i} \\neq s_{i - 1}\r\n\\end{cases}\\]</span></p>\r\n<p>即如果要求和前一位相同，不会有新的贡献，否则累加贡献。</p>\r\n<p>直接判断是否可行并转移即可。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) == i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; i; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            (dp[i][i] += dp[i - <span class=\"number\">1</span>][j]) %= <span class=\"number\">998244353</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = mx[<span class=\"built_in\">find</span>(i)]; j &lt; i; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        (dp[i][j] += dp[i - <span class=\"number\">1</span>][j]) %= <span class=\"number\">998244353</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = mmx; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    (res += dp[n][i]) %= <span class=\"number\">998244353</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">writeln</span>(<span class=\"number\">2</span> * res % <span class=\"number\">998244353</span>);</span><br></pre></td></tr></table></figure>\r\n<p>接下来考虑一维 DP 怎么做。</p>\r\n<p><span class=\"math display\">\\[\\begin{cases}\r\ndp_{i,j} = dp_{i - 1,j} &amp; \\texttt{if } s_{i} = s_{i - 1}\r\n\\\\\r\ndp_{i,i} = \\sum_{j = mx_{i}}^{i - 1} dp_{i - 1,j} &amp; \\texttt{if }\r\ns_{i} \\neq s_{i - 1}\r\n\\end{cases}\\]</span></p>\r\n<p>上面的方程实际上就是 相同的地方 复制了 前面第一个不同的地方。</p>\r\n<p>定义 <span class=\"math inline\">\\(k\\)</span> 为 <span\r\nclass=\"math inline\">\\(i\\)</span> 之前第一个不同的。有 <span\r\nclass=\"math display\">\\[\r\ndp_{i,i} = \\sum_{k}\\sum_{j = mx_{i}}^{i - 1} dp_{k,j} \\ \\texttt{  if }\r\ns_{i} \\neq s_{i - 1}\r\n\\]</span></p>\r\n<p>也就是我们每次从 <span class=\"math inline\">\\(k\\)</span>\r\n转移并且累加一下。</p>\r\n<p>注意到由于 <span class=\"math inline\">\\(s_{k} \\neq s_{k -\r\n1}\\)</span>，我们之前计算 <span\r\nclass=\"math inline\">\\(dp_{k,j&#39;}\\)</span> 的时候应该只更新了 <span\r\nclass=\"math inline\">\\(dp_{k,k}\\)</span>。</p>\r\n<p>因此实际上我们得到的是 <span class=\"math inline\">\\(dp_{i,i} =\r\n\\sum_{k}dp_{k,k} \\ \\texttt{ if } mx_{i} \\leq k \\leq i - 1\\)</span>。</p>\r\n<p>优化掉第二维，有 $dp_{i} = <em>{k = mx</em>{i}}^{i - 1}dp_{k} $。</p>\r\n<p><strong>注意：这里有个问题，假设有按顺序 <span\r\nclass=\"math inline\">\\(A,B,C,D\\)</span> 四个块，如果限制 <span\r\nclass=\"math inline\">\\(B,C\\)</span> 不能相同，那么显然我们无法从 <span\r\nclass=\"math inline\">\\(A\\)</span> 到 <span\r\nclass=\"math inline\">\\(D\\)</span> 全部相同，因此我们 <span\r\nclass=\"math inline\">\\(mx\\)</span> 还要取一个前缀 <span\r\nclass=\"math inline\">\\(\\operatorname{max}\\)</span></strong>。</p>\r\n<p>由于我们合并块的编号并不连续，这不利于我们\r\ndp，因此将块的编号离散化一下即可。 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 由于 fa 更新的时候不是 1,2,3,4 这样，而是每块第一个的编号</span></span><br><span class=\"line\"><span class=\"comment\">// 我们把 fa[i] 离散化，pos 表示是第几个，rea 表示第 i 个的实际 fa</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) == i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rea[++rea[<span class=\"number\">0</span>]] = i;</span><br><span class=\"line\">        pos[i] = rea[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n之后枚举上一个不同的点转移就可以了，方程：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) != i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ++cnt;</span><br><span class=\"line\">    <span class=\"comment\">// 现在只有无限制和要求出现不同了</span></span><br><span class=\"line\">    <span class=\"comment\">// 我们可以枚举上一个不同的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = pos[mx[rea[cnt]]]; j &lt; cnt; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        (dp[cnt] += dp[j]) %= <span class=\"number\">998244353</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>把所有 <span class=\"math inline\">\\(0\\)</span>，<span\r\nclass=\"math inline\">\\(1\\)</span> 交换不会违反限制，因此答案要乘 <span\r\nclass=\"math inline\">\\(2\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<p>一维完整代码。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Problem: C. Count Binary Strings</span></span><br><span class=\"line\"><span class=\"comment\">// Contest: Educational Codeforces Round 140 (Rated for Div. 2)</span></span><br><span class=\"line\"><span class=\"comment\">// URL: https://codeforces.com/contest/1767/problem/C</span></span><br><span class=\"line\"><span class=\"comment\">// Memory Limit: 512 MB</span></span><br><span class=\"line\"><span class=\"comment\">// Time Limit: 2000 ms</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n, nums[<span class=\"number\">200</span>][<span class=\"number\">200</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> fa[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fa[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fa[u] == u)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa[u];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa[u] = <span class=\"built_in\">find</span>(fa[u]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(u) == <span class=\"built_in\">find</span>(v))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(u) &lt; <span class=\"built_in\">find</span>(v))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fa[<span class=\"built_in\">find</span>(v)] = <span class=\"built_in\">find</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fa[<span class=\"built_in\">find</span>(u)] = <span class=\"built_in\">find</span>(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> dp[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> mx[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> rea[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> pos[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt;= n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(nums[i][j]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i][j] == <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = i + <span class=\"number\">1</span>; k &lt;= j; k++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">merge</span>(i, k);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i][i] == <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 对于每一个需要找到最晚需要不同的，这样能满足前面的所有条件</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mx[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i - <span class=\"number\">1</span>; j; j--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[j][i] == <span class=\"number\">2</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) == <span class=\"built_in\">find</span>(j))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">                    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                mx[<span class=\"built_in\">find</span>(i)] = <span class=\"built_in\">max</span>(mx[<span class=\"built_in\">find</span>(i)], <span class=\"built_in\">find</span>(j));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mx[i] = <span class=\"built_in\">max</span>(mx[i], mx[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) == i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rea[++rea[<span class=\"number\">0</span>]] = i;</span><br><span class=\"line\">            pos[i] = rea[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) != i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ++cnt;</span><br><span class=\"line\">        <span class=\"comment\">// 现在只有无限制和要求出现不同了</span></span><br><span class=\"line\">        <span class=\"comment\">// 我们可以枚举上一个不同的位置</span></span><br><span class=\"line\">        <span class=\"comment\">// 由于 fa 更新的时候不是 1,2,3,4 这样，而是每块第一个的编号</span></span><br><span class=\"line\">        <span class=\"comment\">// 我们把 fa[i] 离散化，pos 表示是第几个，rea 表示第 i 个的实际 fa</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = pos[mx[rea[cnt]]]; j &lt; cnt; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            (dp[cnt] += dp[j]) %= <span class=\"number\">998244353</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//   cout &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(<span class=\"number\">2</span> * dp[cnt] % <span class=\"number\">998244353</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf1767c-count-binary-strings-题解\">CF1767C Count Binary Strings\r\n题解</h1>","more":"<h2 id=\"foreword\">Foreword</h2>\r\n<p>感谢 <a href=\"https://www.luogu.com.cn/user/234074\"><span\r\nclass=\"citation\" data-cites=\"樱雪喵\">@樱雪喵</span></a>、<a\r\nhref=\"https://www.luogu.com.cn/user/183154\"><span class=\"citation\"\r\ndata-cites=\"swiftc\">@swiftc</span></a> 两位大佬的耐心指导。</p>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1767C\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1767/C\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>有一个长度为 <span class=\"math inline\">\\(n\\)</span> 的 01 串 <span\r\nclass=\"math inline\">\\(s\\)</span>（下标从 <span\r\nclass=\"math inline\">\\(1\\)</span> 开始）和一些限制 <span\r\nclass=\"math inline\">\\(a_{i,j}(1 \\le i \\le j \\le n)\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(a_{i,j}\\)</span> 的含义如下：</p>\r\n<table>\r\n<thead>\r\n<tr class=\"header\">\r\n<th style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(a_{i,j}=\\)</span></th>\r\n<th style=\"text-align: center;\">含义</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(0\\)</span></td>\r\n<td style=\"text-align: center;\">没有限制</td>\r\n</tr>\r\n<tr class=\"even\">\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(1\\)</span></td>\r\n<td style=\"text-align: center;\">对于所有的 <span class=\"math inline\">\\(i\r\n\\le p \\le q \\le j\\)</span> 均有 <span\r\nclass=\"math inline\">\\(s_p=s_q\\)</span></td>\r\n</tr>\r\n<tr class=\"odd\">\r\n<td style=\"text-align: center;\"><span\r\nclass=\"math inline\">\\(2\\)</span></td>\r\n<td style=\"text-align: center;\">存在 <span class=\"math inline\">\\(i \\le p\r\n\\le q \\le j\\)</span> 使得 <span class=\"math inline\">\\(s_p \\neq\r\ns_q\\)</span></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>求可能的 <span class=\"math inline\">\\(s\\)</span>\r\n的个数。<strong>答案对 <span\r\nclass=\"math inline\">\\(998\\,244\\,353\\)</span> 取模。</strong></p>\r\n<p>对于 <span class=\"math inline\">\\(100\\%\\)</span> 的数据，<span\r\nclass=\"math inline\">\\(2 \\le n \\le 100\\)</span>，<span\r\nclass=\"math inline\">\\(0 \\le a_{i,j} \\le 2\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>这种计数类问题大概率是组合数学或者\r\ndp，然而这道题限制条件很多，组合数学大概是做不成了，那么考虑 dp。</p>\r\n<p>首先一个很显然的情况是如果 <span class=\"math inline\">\\(a_{i,i} =\r\n2\\)</span> 那么无解。接下来考虑对 <span class=\"math inline\">\\(a_{i,j} =\r\n1\\)</span>\r\n的限制，我们把这些需要区间内全相同的合并成一个块，对块内每个位置的限制等价于对整个块的限制，使用并查集维护即可，注意每个块合并的时候都合并到最前面的位置。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> fa[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        fa[i] = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fa[u] == u)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa[u];</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa[u] = <span class=\"built_in\">find</span>(fa[u]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(u) == <span class=\"built_in\">find</span>(v))</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(u) &lt; <span class=\"built_in\">find</span>(v))</span><br><span class=\"line\">        fa[<span class=\"built_in\">find</span>(v)] = <span class=\"built_in\">find</span>(u);</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        fa[<span class=\"built_in\">find</span>(u)] = <span class=\"built_in\">find</span>(v);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>主函数中：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">init</span>();</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt;= n; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i][j]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i][j] == <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = i + <span class=\"number\">1</span>; k &lt;= j; k++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">merge</span>(i, k);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>之后，我们很容易想到，对于每个块 <span\r\nclass=\"math inline\">\\(p\\)</span>，我们找到对于 <span\r\nclass=\"math inline\">\\(i \\in p\\)</span>，<span\r\nclass=\"math inline\">\\(a_{i,j} = 2\\)</span> 这样的限制中最大的 <span\r\nclass=\"math inline\">\\(j\\)</span>，只要满足这条限制，在前面的限制也就都满足了，求出\r\n<span class=\"math inline\">\\(mx_{i}\\)</span> 表示块 <span\r\nclass=\"math inline\">\\(i\\)</span> 之前最后一个能满足从 <span\r\nclass=\"math inline\">\\(mx_{i}\\)</span> 到 <span\r\nclass=\"math inline\">\\(i\\)</span> 与 <span\r\nclass=\"math inline\">\\(i\\)</span> 填的数全相同的块。</p>\r\n<p>DP\r\n的思路有两种，一种是一维的，另一种是二维的。我开始写的一维，然而没有考虑到一些问题写挂了，尝试了二维通过之后又回到了一维。</p>\r\n<p>这里先从二维 DP 开始讲。</p>\r\n<p>考虑某个位置和前一位是否相同，有：</p>\r\n<p><span class=\"math display\">\\[\\begin{cases}\r\ndp_{i,j} = dp_{i - 1,j} &amp; \\texttt{if } s_{i} = s_{i - 1}\r\n\\\\\r\ndp_{i,i} = \\sum_{j = mx_{i}}^{i - 1} dp_{i - 1,j} &amp; \\texttt{if }\r\ns_{i} \\neq s_{i - 1}\r\n\\end{cases}\\]</span></p>\r\n<p>即如果要求和前一位相同，不会有新的贡献，否则累加贡献。</p>\r\n<p>直接判断是否可行并转移即可。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) == i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; i; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            (dp[i][i] += dp[i - <span class=\"number\">1</span>][j]) %= <span class=\"number\">998244353</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = mx[<span class=\"built_in\">find</span>(i)]; j &lt; i; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        (dp[i][j] += dp[i - <span class=\"number\">1</span>][j]) %= <span class=\"number\">998244353</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = mmx; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    (res += dp[n][i]) %= <span class=\"number\">998244353</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">writeln</span>(<span class=\"number\">2</span> * res % <span class=\"number\">998244353</span>);</span><br></pre></td></tr></table></figure>\r\n<p>接下来考虑一维 DP 怎么做。</p>\r\n<p><span class=\"math display\">\\[\\begin{cases}\r\ndp_{i,j} = dp_{i - 1,j} &amp; \\texttt{if } s_{i} = s_{i - 1}\r\n\\\\\r\ndp_{i,i} = \\sum_{j = mx_{i}}^{i - 1} dp_{i - 1,j} &amp; \\texttt{if }\r\ns_{i} \\neq s_{i - 1}\r\n\\end{cases}\\]</span></p>\r\n<p>上面的方程实际上就是 相同的地方 复制了 前面第一个不同的地方。</p>\r\n<p>定义 <span class=\"math inline\">\\(k\\)</span> 为 <span\r\nclass=\"math inline\">\\(i\\)</span> 之前第一个不同的。有 <span\r\nclass=\"math display\">\\[\r\ndp_{i,i} = \\sum_{k}\\sum_{j = mx_{i}}^{i - 1} dp_{k,j} \\ \\texttt{  if }\r\ns_{i} \\neq s_{i - 1}\r\n\\]</span></p>\r\n<p>也就是我们每次从 <span class=\"math inline\">\\(k\\)</span>\r\n转移并且累加一下。</p>\r\n<p>注意到由于 <span class=\"math inline\">\\(s_{k} \\neq s_{k -\r\n1}\\)</span>，我们之前计算 <span\r\nclass=\"math inline\">\\(dp_{k,j&#39;}\\)</span> 的时候应该只更新了 <span\r\nclass=\"math inline\">\\(dp_{k,k}\\)</span>。</p>\r\n<p>因此实际上我们得到的是 <span class=\"math inline\">\\(dp_{i,i} =\r\n\\sum_{k}dp_{k,k} \\ \\texttt{ if } mx_{i} \\leq k \\leq i - 1\\)</span>。</p>\r\n<p>优化掉第二维，有 $dp_{i} = <em>{k = mx</em>{i}}^{i - 1}dp_{k} $。</p>\r\n<p><strong>注意：这里有个问题，假设有按顺序 <span\r\nclass=\"math inline\">\\(A,B,C,D\\)</span> 四个块，如果限制 <span\r\nclass=\"math inline\">\\(B,C\\)</span> 不能相同，那么显然我们无法从 <span\r\nclass=\"math inline\">\\(A\\)</span> 到 <span\r\nclass=\"math inline\">\\(D\\)</span> 全部相同，因此我们 <span\r\nclass=\"math inline\">\\(mx\\)</span> 还要取一个前缀 <span\r\nclass=\"math inline\">\\(\\operatorname{max}\\)</span></strong>。</p>\r\n<p>由于我们合并块的编号并不连续，这不利于我们\r\ndp，因此将块的编号离散化一下即可。 <figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 由于 fa 更新的时候不是 1,2,3,4 这样，而是每块第一个的编号</span></span><br><span class=\"line\"><span class=\"comment\">// 我们把 fa[i] 离散化，pos 表示是第几个，rea 表示第 i 个的实际 fa</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) == i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        rea[++rea[<span class=\"number\">0</span>]] = i;</span><br><span class=\"line\">        pos[i] = rea[<span class=\"number\">0</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n之后枚举上一个不同的点转移就可以了，方程：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) != i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ++cnt;</span><br><span class=\"line\">    <span class=\"comment\">// 现在只有无限制和要求出现不同了</span></span><br><span class=\"line\">    <span class=\"comment\">// 我们可以枚举上一个不同的位置</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = pos[mx[rea[cnt]]]; j &lt; cnt; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        (dp[cnt] += dp[j]) %= <span class=\"number\">998244353</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>把所有 <span class=\"math inline\">\\(0\\)</span>，<span\r\nclass=\"math inline\">\\(1\\)</span> 交换不会违反限制，因此答案要乘 <span\r\nclass=\"math inline\">\\(2\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<p>一维完整代码。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Problem: C. Count Binary Strings</span></span><br><span class=\"line\"><span class=\"comment\">// Contest: Educational Codeforces Round 140 (Rated for Div. 2)</span></span><br><span class=\"line\"><span class=\"comment\">// URL: https://codeforces.com/contest/1767/problem/C</span></span><br><span class=\"line\"><span class=\"comment\">// Memory Limit: 512 MB</span></span><br><span class=\"line\"><span class=\"comment\">// Time Limit: 2000 ms</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n, nums[<span class=\"number\">200</span>][<span class=\"number\">200</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> fa[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fa[i] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fa[u] == u)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa[u];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fa[u] = <span class=\"built_in\">find</span>(fa[u]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(u) == <span class=\"built_in\">find</span>(v))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(u) &lt; <span class=\"built_in\">find</span>(v))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fa[<span class=\"built_in\">find</span>(v)] = <span class=\"built_in\">find</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        fa[<span class=\"built_in\">find</span>(u)] = <span class=\"built_in\">find</span>(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> dp[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> mx[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> rea[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> pos[<span class=\"number\">222</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i; j &lt;= n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(nums[i][j]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[i][j] == <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = i + <span class=\"number\">1</span>; k &lt;= j; k++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">merge</span>(i, k);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i][i] == <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 对于每一个需要找到最晚需要不同的，这样能满足前面的所有条件</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mx[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i - <span class=\"number\">1</span>; j; j--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums[j][i] == <span class=\"number\">2</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) == <span class=\"built_in\">find</span>(j))</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">                    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                mx[<span class=\"built_in\">find</span>(i)] = <span class=\"built_in\">max</span>(mx[<span class=\"built_in\">find</span>(i)], <span class=\"built_in\">find</span>(j));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mx[i] = <span class=\"built_in\">max</span>(mx[i], mx[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) == i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rea[++rea[<span class=\"number\">0</span>]] = i;</span><br><span class=\"line\">            pos[i] = rea[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">find</span>(i) != i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ++cnt;</span><br><span class=\"line\">        <span class=\"comment\">// 现在只有无限制和要求出现不同了</span></span><br><span class=\"line\">        <span class=\"comment\">// 我们可以枚举上一个不同的位置</span></span><br><span class=\"line\">        <span class=\"comment\">// 由于 fa 更新的时候不是 1,2,3,4 这样，而是每块第一个的编号</span></span><br><span class=\"line\">        <span class=\"comment\">// 我们把 fa[i] 离散化，pos 表示是第几个，rea 表示第 i 个的实际 fa</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = pos[mx[rea[cnt]]]; j &lt; cnt; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            (dp[cnt] += dp[j]) %= <span class=\"number\">998244353</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//   cout &lt;&lt; cnt &lt;&lt; endl;</span></span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(<span class=\"number\">2</span> * dp[cnt] % <span class=\"number\">998244353</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1828B Permutation Swap 题解","mathjax":true,"_content":"\n# CF1828B Permutation Swap 题解\n\n<!-- more -->\n\n\n## Links\n\n[Luogu](https://www.luogu.com.cn/problem/CF1828B)\n\n[Codeforces](https://codeforces.com/problemset/problem/1828/B)\n\n## Description\n\n给你一个长度为 $n$ 的未排序的排列。找到最大的整数 $k$ 满足可以通过只交换**下标差为 $k$** 的元素使排列被从小到大排序。\n\n## Solution\n\n数字 $x$ 的最终位置应下标为 $x$（此处下标从 $1$ 开始）。设数 $x$ 在原排列中位置下标为 $i$，原排列为 $p$，则若经过若干次交换 $x$ 能到达下标为 $x$ 的位置的条件为 $ \\left | x - i \\right |  \\equiv 0 \\pmod k$，即 $k$ 为 $\\left | x - i \\right |$ 的约数。为了使所有的数都能满足该条件，$k$ 应为 $\\gcd_{i = 1}^{n}(|p_{i} - i|)$。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 201010\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T, n, nums[max_n];\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(T);\n    while (T--)\n    {\n        read(n);\n        for (int i = 1, val; i <= n; i++)\n        {\n            read(val);\n            nums[i] = abs(val - i);\n        }\n        int ans = __gcd(nums[1], nums[2]);\n        for (int i = 3; i <= n; i++)\n        {\n            ans = __gcd(ans, nums[i]);\n        }\n        writeln(ans);\n    }\n    return 0;\n}\n```\n","source":"_posts/CF1828B Permutation Swap 题解.md","raw":"---\ntitle: \"CF1828B Permutation Swap 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF1828B Permutation Swap 题解\n\n<!-- more -->\n\n\n## Links\n\n[Luogu](https://www.luogu.com.cn/problem/CF1828B)\n\n[Codeforces](https://codeforces.com/problemset/problem/1828/B)\n\n## Description\n\n给你一个长度为 $n$ 的未排序的排列。找到最大的整数 $k$ 满足可以通过只交换**下标差为 $k$** 的元素使排列被从小到大排序。\n\n## Solution\n\n数字 $x$ 的最终位置应下标为 $x$（此处下标从 $1$ 开始）。设数 $x$ 在原排列中位置下标为 $i$，原排列为 $p$，则若经过若干次交换 $x$ 能到达下标为 $x$ 的位置的条件为 $ \\left | x - i \\right |  \\equiv 0 \\pmod k$，即 $k$ 为 $\\left | x - i \\right |$ 的约数。为了使所有的数都能满足该条件，$k$ 应为 $\\gcd_{i = 1}^{n}(|p_{i} - i|)$。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 201010\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T, n, nums[max_n];\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(T);\n    while (T--)\n    {\n        read(n);\n        for (int i = 1, val; i <= n; i++)\n        {\n            read(val);\n            nums[i] = abs(val - i);\n        }\n        int ans = __gcd(nums[1], nums[2]);\n        for (int i = 3; i <= n; i++)\n        {\n            ans = __gcd(ans, nums[i]);\n        }\n        writeln(ans);\n    }\n    return 0;\n}\n```\n","slug":"CF1828B Permutation Swap 题解","published":1,"date":"2023-10-04T14:11:08.248Z","updated":"2023-10-04T14:11:08.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9yv0013osja6y9i2cv8","content":"<h1 id=\"cf1828b-permutation-swap-题解\">CF1828B Permutation Swap\r\n题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1828B\">Luogu</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1828/B\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给你一个长度为 <span class=\"math inline\">\\(n\\)</span>\r\n的未排序的排列。找到最大的整数 <span class=\"math inline\">\\(k\\)</span>\r\n满足可以通过只交换<strong>下标差为 <span\r\nclass=\"math inline\">\\(k\\)</span></strong>\r\n的元素使排列被从小到大排序。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>数字 <span class=\"math inline\">\\(x\\)</span> 的最终位置应下标为 <span\r\nclass=\"math inline\">\\(x\\)</span>（此处下标从 <span\r\nclass=\"math inline\">\\(1\\)</span> 开始）。设数 <span\r\nclass=\"math inline\">\\(x\\)</span> 在原排列中位置下标为 <span\r\nclass=\"math inline\">\\(i\\)</span>，原排列为 <span\r\nclass=\"math inline\">\\(p\\)</span>，则若经过若干次交换 <span\r\nclass=\"math inline\">\\(x\\)</span> 能到达下标为 <span\r\nclass=\"math inline\">\\(x\\)</span> 的位置的条件为 $ | x - i | k$，即 <span\r\nclass=\"math inline\">\\(k\\)</span> 为 <span class=\"math inline\">\\(\\left |\r\nx - i \\right |\\)</span> 的约数。为了使所有的数都能满足该条件，<span\r\nclass=\"math inline\">\\(k\\)</span> 应为 <span\r\nclass=\"math inline\">\\(\\gcd_{i = 1}^{n}(|p_{i} - i|)\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 201010</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T, n, nums[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>, val; i &lt;= n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(val);</span><br><span class=\"line\">            nums[i] = <span class=\"built_in\">abs</span>(val - i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = __gcd(nums[<span class=\"number\">1</span>], nums[<span class=\"number\">2</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">3</span>; i &lt;= n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans = __gcd(ans, nums[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf1828b-permutation-swap-题解\">CF1828B Permutation Swap\r\n题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1828B\">Luogu</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1828/B\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给你一个长度为 <span class=\"math inline\">\\(n\\)</span>\r\n的未排序的排列。找到最大的整数 <span class=\"math inline\">\\(k\\)</span>\r\n满足可以通过只交换<strong>下标差为 <span\r\nclass=\"math inline\">\\(k\\)</span></strong>\r\n的元素使排列被从小到大排序。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>数字 <span class=\"math inline\">\\(x\\)</span> 的最终位置应下标为 <span\r\nclass=\"math inline\">\\(x\\)</span>（此处下标从 <span\r\nclass=\"math inline\">\\(1\\)</span> 开始）。设数 <span\r\nclass=\"math inline\">\\(x\\)</span> 在原排列中位置下标为 <span\r\nclass=\"math inline\">\\(i\\)</span>，原排列为 <span\r\nclass=\"math inline\">\\(p\\)</span>，则若经过若干次交换 <span\r\nclass=\"math inline\">\\(x\\)</span> 能到达下标为 <span\r\nclass=\"math inline\">\\(x\\)</span> 的位置的条件为 $ | x - i | k$，即 <span\r\nclass=\"math inline\">\\(k\\)</span> 为 <span class=\"math inline\">\\(\\left |\r\nx - i \\right |\\)</span> 的约数。为了使所有的数都能满足该条件，<span\r\nclass=\"math inline\">\\(k\\)</span> 应为 <span\r\nclass=\"math inline\">\\(\\gcd_{i = 1}^{n}(|p_{i} - i|)\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 201010</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T, n, nums[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>, val; i &lt;= n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(val);</span><br><span class=\"line\">            nums[i] = <span class=\"built_in\">abs</span>(val - i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = __gcd(nums[<span class=\"number\">1</span>], nums[<span class=\"number\">2</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">3</span>; i &lt;= n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans = __gcd(ans, nums[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1832B Maximum Sum 题解","mathjax":true,"_content":"\n# CF1832B  Maximum Sum 题解\n\n<!-- more -->\n\n\n## Links\n\n[Luogu](https://www.luogu.com.cn/problem/CF1832B)\n\n[Codeforces](https://codeforces.com/problemset/problem/1832/B)\n\n## Description\n\n给定一个长度为 $n$ 的数列，进行 $k$ 次操作，每次可以选择删除序列中最小的两个数或最大的一个数。求操作后剩余数的和的最大值。\n\n$3 \\leq n \\leq 2 \\times 10^{5}$，$1 \\leq k \\leq 99999$，$2k \\leq n$。\n\n## Solution\n\n观察题目，$n$ 和 $k$ 的范围不大，我们可以直接枚举删了多少次最小值。\n\n先将整个序列从小到大排序，根据取数的性质易知取的是一部分前缀和一部分后缀。记 $sum_{i}$ 为 $i$ 位置的前缀和。这部分可以 $O(n)$ 求得。\n\n接下来，枚举删除最小的两个值的次数，设这个次数为 $x$，则删去后缀的次数为 $k - x$。删去前缀的个数为 $2x$，和为 $sum_{2x}$，删去后缀后剩余数的和为 $sum_{n - (k - x)}$。此时答案为 $sum_{n - (k - x)} - sum_{2x}$。此部分时间复杂度为 $O(n)$。\n\n总时间复杂度为 $O(n)$。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 301010\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T;\nint n, k, nums[max_n], sum[max_n];\nvoid solution()\n{\n    read(n), read(k);\n    int ans = 0;\n    for (int i = 1; i <= n; i++)\n    {\n        read(nums[i]);\n    }\n    sort(nums + 1, nums + n + 1);\n    for (int i = 1; i <= n; i++)\n    {\n        sum[i] = sum[i - 1] + nums[i];\n    }\n    for (int i = 0; i <= k; i++)\n    {\n        ans = max(ans, sum[n - (k - i)] - sum[2 * i]);\n    }\n    writeln(ans);\n}\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(T);\n    while (T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```\n","source":"_posts/CF1832B Maximum Sum 题解.md","raw":"---\ntitle: \"CF1832B Maximum Sum 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF1832B  Maximum Sum 题解\n\n<!-- more -->\n\n\n## Links\n\n[Luogu](https://www.luogu.com.cn/problem/CF1832B)\n\n[Codeforces](https://codeforces.com/problemset/problem/1832/B)\n\n## Description\n\n给定一个长度为 $n$ 的数列，进行 $k$ 次操作，每次可以选择删除序列中最小的两个数或最大的一个数。求操作后剩余数的和的最大值。\n\n$3 \\leq n \\leq 2 \\times 10^{5}$，$1 \\leq k \\leq 99999$，$2k \\leq n$。\n\n## Solution\n\n观察题目，$n$ 和 $k$ 的范围不大，我们可以直接枚举删了多少次最小值。\n\n先将整个序列从小到大排序，根据取数的性质易知取的是一部分前缀和一部分后缀。记 $sum_{i}$ 为 $i$ 位置的前缀和。这部分可以 $O(n)$ 求得。\n\n接下来，枚举删除最小的两个值的次数，设这个次数为 $x$，则删去后缀的次数为 $k - x$。删去前缀的个数为 $2x$，和为 $sum_{2x}$，删去后缀后剩余数的和为 $sum_{n - (k - x)}$。此时答案为 $sum_{n - (k - x)} - sum_{2x}$。此部分时间复杂度为 $O(n)$。\n\n总时间复杂度为 $O(n)$。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 301010\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T;\nint n, k, nums[max_n], sum[max_n];\nvoid solution()\n{\n    read(n), read(k);\n    int ans = 0;\n    for (int i = 1; i <= n; i++)\n    {\n        read(nums[i]);\n    }\n    sort(nums + 1, nums + n + 1);\n    for (int i = 1; i <= n; i++)\n    {\n        sum[i] = sum[i - 1] + nums[i];\n    }\n    for (int i = 0; i <= k; i++)\n    {\n        ans = max(ans, sum[n - (k - i)] - sum[2 * i]);\n    }\n    writeln(ans);\n}\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(T);\n    while (T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```\n","slug":"CF1832B Maximum Sum 题解","published":1,"date":"2023-10-04T14:11:08.249Z","updated":"2023-10-04T14:11:08.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9yw0015osjab5tz78tm","content":"<h1 id=\"cf1832b-maximum-sum-题解\">CF1832B Maximum Sum 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1832B\">Luogu</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1832/B\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定一个长度为 <span class=\"math inline\">\\(n\\)</span> 的数列，进行\r\n<span class=\"math inline\">\\(k\\)</span>\r\n次操作，每次可以选择删除序列中最小的两个数或最大的一个数。求操作后剩余数的和的最大值。</p>\r\n<p><span class=\"math inline\">\\(3 \\leq n \\leq 2 \\times\r\n10^{5}\\)</span>，<span class=\"math inline\">\\(1 \\leq k \\leq\r\n99999\\)</span>，<span class=\"math inline\">\\(2k \\leq n\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>观察题目，<span class=\"math inline\">\\(n\\)</span> 和 <span\r\nclass=\"math inline\">\\(k\\)</span>\r\n的范围不大，我们可以直接枚举删了多少次最小值。</p>\r\n<p>先将整个序列从小到大排序，根据取数的性质易知取的是一部分前缀和一部分后缀。记\r\n<span class=\"math inline\">\\(sum_{i}\\)</span> 为 <span\r\nclass=\"math inline\">\\(i\\)</span> 位置的前缀和。这部分可以 <span\r\nclass=\"math inline\">\\(O(n)\\)</span> 求得。</p>\r\n<p>接下来，枚举删除最小的两个值的次数，设这个次数为 <span\r\nclass=\"math inline\">\\(x\\)</span>，则删去后缀的次数为 <span\r\nclass=\"math inline\">\\(k - x\\)</span>。删去前缀的个数为 <span\r\nclass=\"math inline\">\\(2x\\)</span>，和为 <span\r\nclass=\"math inline\">\\(sum_{2x}\\)</span>，删去后缀后剩余数的和为 <span\r\nclass=\"math inline\">\\(sum_{n - (k - x)}\\)</span>。此时答案为 <span\r\nclass=\"math inline\">\\(sum_{n - (k - x)} -\r\nsum_{2x}\\)</span>。此部分时间复杂度为 <span\r\nclass=\"math inline\">\\(O(n)\\)</span>。</p>\r\n<p>总时间复杂度为 <span class=\"math inline\">\\(O(n)\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 301010</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T;</span><br><span class=\"line\"><span class=\"type\">int</span> n, k, nums[max_n], sum[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n), <span class=\"built_in\">read</span>(k);</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(nums + <span class=\"number\">1</span>, nums + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum[i] = sum[i - <span class=\"number\">1</span>] + nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= k; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans = <span class=\"built_in\">max</span>(ans, sum[n - (k - i)] - sum[<span class=\"number\">2</span> * i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf1832b-maximum-sum-题解\">CF1832B Maximum Sum 题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1832B\">Luogu</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1832/B\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定一个长度为 <span class=\"math inline\">\\(n\\)</span> 的数列，进行\r\n<span class=\"math inline\">\\(k\\)</span>\r\n次操作，每次可以选择删除序列中最小的两个数或最大的一个数。求操作后剩余数的和的最大值。</p>\r\n<p><span class=\"math inline\">\\(3 \\leq n \\leq 2 \\times\r\n10^{5}\\)</span>，<span class=\"math inline\">\\(1 \\leq k \\leq\r\n99999\\)</span>，<span class=\"math inline\">\\(2k \\leq n\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>观察题目，<span class=\"math inline\">\\(n\\)</span> 和 <span\r\nclass=\"math inline\">\\(k\\)</span>\r\n的范围不大，我们可以直接枚举删了多少次最小值。</p>\r\n<p>先将整个序列从小到大排序，根据取数的性质易知取的是一部分前缀和一部分后缀。记\r\n<span class=\"math inline\">\\(sum_{i}\\)</span> 为 <span\r\nclass=\"math inline\">\\(i\\)</span> 位置的前缀和。这部分可以 <span\r\nclass=\"math inline\">\\(O(n)\\)</span> 求得。</p>\r\n<p>接下来，枚举删除最小的两个值的次数，设这个次数为 <span\r\nclass=\"math inline\">\\(x\\)</span>，则删去后缀的次数为 <span\r\nclass=\"math inline\">\\(k - x\\)</span>。删去前缀的个数为 <span\r\nclass=\"math inline\">\\(2x\\)</span>，和为 <span\r\nclass=\"math inline\">\\(sum_{2x}\\)</span>，删去后缀后剩余数的和为 <span\r\nclass=\"math inline\">\\(sum_{n - (k - x)}\\)</span>。此时答案为 <span\r\nclass=\"math inline\">\\(sum_{n - (k - x)} -\r\nsum_{2x}\\)</span>。此部分时间复杂度为 <span\r\nclass=\"math inline\">\\(O(n)\\)</span>。</p>\r\n<p>总时间复杂度为 <span class=\"math inline\">\\(O(n)\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 301010</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T;</span><br><span class=\"line\"><span class=\"type\">int</span> n, k, nums[max_n], sum[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n), <span class=\"built_in\">read</span>(k);</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(nums + <span class=\"number\">1</span>, nums + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum[i] = sum[i - <span class=\"number\">1</span>] + nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= k; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans = <span class=\"built_in\">max</span>(ans, sum[n - (k - i)] - sum[<span class=\"number\">2</span> * i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1833B Restore the Weather 题解","mathjax":true,"_content":"\n# CF1833B Restore the Weather 题解\n\n<!-- more -->\n\n\n## Link\n\n[洛谷](https://www.luogu.com.cn/problem/CF1833B)\n\n[Codefoces](https://codeforces.com/contest/1833/problem/B)\n\n## Description\n\n**多组测试数据。**\n\n给定两个长度为 $n$ 的序列 $a,b$ 以及整数 $d$，重新排列 $b$ 序列使得 $\\forall i \\in [1,n], | a_{i} - b_{i} |  \\leq d$。\n\n数据保证有解。\n\n## Solution\n\n既然数据保证有解，我们可以将两个序列**从小到大排序**，同时记录 $a$ 序列中各数字原来所在的位置。最后记录答案即可。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 110001\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T;\nstruct node\n{\n    int num, id;\n} a[max_n];\nint b[max_n], n, k, ans[max_n];\nvoid solution()\n{\n    read(n), read(k);\n    for (int i = 1; i <= n; i++)\n    {\n        read(a[i].num);\n        a[i].id = i;\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        read(b[i]);\n    }\n    sort(a + 1, a + n + 1, [](node nd1, node nd2)\n         { return nd1.num < nd2.num; });\n    sort(b + 1, b + n + 1);\n    for (int i = 1; i <= n; i++)\n    {\n        ans[a[i].id] = b[i];\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        writesp(ans[i]);\n    }\n    puts(\"\");\n}\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(T);\n    while (T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```\n","source":"_posts/CF1833B Restore the Weather 题解.md","raw":"---\ntitle: \"CF1833B Restore the Weather 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF1833B Restore the Weather 题解\n\n<!-- more -->\n\n\n## Link\n\n[洛谷](https://www.luogu.com.cn/problem/CF1833B)\n\n[Codefoces](https://codeforces.com/contest/1833/problem/B)\n\n## Description\n\n**多组测试数据。**\n\n给定两个长度为 $n$ 的序列 $a,b$ 以及整数 $d$，重新排列 $b$ 序列使得 $\\forall i \\in [1,n], | a_{i} - b_{i} |  \\leq d$。\n\n数据保证有解。\n\n## Solution\n\n既然数据保证有解，我们可以将两个序列**从小到大排序**，同时记录 $a$ 序列中各数字原来所在的位置。最后记录答案即可。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 110001\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T;\nstruct node\n{\n    int num, id;\n} a[max_n];\nint b[max_n], n, k, ans[max_n];\nvoid solution()\n{\n    read(n), read(k);\n    for (int i = 1; i <= n; i++)\n    {\n        read(a[i].num);\n        a[i].id = i;\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        read(b[i]);\n    }\n    sort(a + 1, a + n + 1, [](node nd1, node nd2)\n         { return nd1.num < nd2.num; });\n    sort(b + 1, b + n + 1);\n    for (int i = 1; i <= n; i++)\n    {\n        ans[a[i].id] = b[i];\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        writesp(ans[i]);\n    }\n    puts(\"\");\n}\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(T);\n    while (T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```\n","slug":"CF1833B Restore the Weather 题解","published":1,"date":"2023-10-04T14:11:08.249Z","updated":"2023-10-04T14:11:08.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9yx0017osjaeh964uvn","content":"<h1 id=\"cf1833b-restore-the-weather-题解\">CF1833B Restore the Weather\r\n题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"link\">Link</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1833B\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/contest/1833/problem/B\">Codefoces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p><strong>多组测试数据。</strong></p>\r\n<p>给定两个长度为 <span class=\"math inline\">\\(n\\)</span> 的序列 <span\r\nclass=\"math inline\">\\(a,b\\)</span> 以及整数 <span\r\nclass=\"math inline\">\\(d\\)</span>，重新排列 <span\r\nclass=\"math inline\">\\(b\\)</span> 序列使得 <span\r\nclass=\"math inline\">\\(\\forall i \\in [1,n], | a_{i} - b_{i} | \\leq\r\nd\\)</span>。</p>\r\n<p>数据保证有解。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>既然数据保证有解，我们可以将两个序列<strong>从小到大排序</strong>，同时记录\r\n<span class=\"math inline\">\\(a\\)</span>\r\n序列中各数字原来所在的位置。最后记录答案即可。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 110001</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num, id;</span><br><span class=\"line\">&#125; a[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> b[max_n], n, k, ans[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n), <span class=\"built_in\">read</span>(k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(a[i].num);</span><br><span class=\"line\">        a[i].id = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(b[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>, [](node nd1, node nd2)</span><br><span class=\"line\">         &#123; <span class=\"keyword\">return</span> nd1.num &lt; nd2.num; &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(b + <span class=\"number\">1</span>, b + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans[a[i].id] = b[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">writesp</span>(ans[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf1833b-restore-the-weather-题解\">CF1833B Restore the Weather\r\n题解</h1>","more":"<h2 id=\"link\">Link</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1833B\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/contest/1833/problem/B\">Codefoces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p><strong>多组测试数据。</strong></p>\r\n<p>给定两个长度为 <span class=\"math inline\">\\(n\\)</span> 的序列 <span\r\nclass=\"math inline\">\\(a,b\\)</span> 以及整数 <span\r\nclass=\"math inline\">\\(d\\)</span>，重新排列 <span\r\nclass=\"math inline\">\\(b\\)</span> 序列使得 <span\r\nclass=\"math inline\">\\(\\forall i \\in [1,n], | a_{i} - b_{i} | \\leq\r\nd\\)</span>。</p>\r\n<p>数据保证有解。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>既然数据保证有解，我们可以将两个序列<strong>从小到大排序</strong>，同时记录\r\n<span class=\"math inline\">\\(a\\)</span>\r\n序列中各数字原来所在的位置。最后记录答案即可。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 110001</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> num, id;</span><br><span class=\"line\">&#125; a[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> b[max_n], n, k, ans[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n), <span class=\"built_in\">read</span>(k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(a[i].num);</span><br><span class=\"line\">        a[i].id = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(b[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>, [](node nd1, node nd2)</span><br><span class=\"line\">         &#123; <span class=\"keyword\">return</span> nd1.num &lt; nd2.num; &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(b + <span class=\"number\">1</span>, b + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans[a[i].id] = b[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">writesp</span>(ans[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1852A Ntarsis' Set 题解","mathjax":true,"_content":"\n# CF1852A Ntarsis' Set 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF1852A)\n\n[Codeforces](https://codeforces.com/problemset/problem/1852/A)\n\n## Description\n\n有一个集合，初始状态里面按顺序有数字 $1 \\sim 10^{1000}$。\n\n现在给你一个长度为 $n$ 数组 $a (1\\leq a_i \\leq 10^9 )$，要进行 $k$ 次操作，每次操作将当前集合中第 $a_1$ 小、第 $a_2$ 小、......、第 $a_n$ 小的数同时移除。\n\n请问 $k$ 次操作之后，最小的数是多少。\n\n## Solution\n\n看到这道题的数据范围，第一想法是二分答案。于是需要思考的就是如何判断对于一个数 $p$，所有小于 $p$ 的数是否都会被删除。\n\n由于我们在删除的时候只关心数字是第几小的，因此我们可以在每次删除后对数字进行重新编号。对于一个编号为 $x$ 的数，若删除了 $p$ 个编号小于 $x$ 的数，那么它的编号变为 $x - p$。\n\n由此，我们可以枚举 $k$ 轮，最终只需要检查这个数最后的编号是否大于 $0$ 即可。\n\ncheck 部分的代码单独给出：\n\n```cpp\nbool check(int x)\n{\n    int tim = k;\n    while(tim--)\n    {\n        int p = lower_bound(nums + 1,nums + n + 1,x) - nums;\n        if(p > n || nums[p] > x)\n        {\n            p--;\n        }\n        x -= p;\n    }\n    if(x >= 1)\n    {\n        return 1;\n    }\n    return 0;\n}\n```\n\n对于二分的上下界，显然最小为 $1$，由于删去了 $n \\times k$ 个数，所以答案不会大于 $n \\times k + 1$。注意此题要开 `long long`。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 210101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while(c < '0' || c > '9')\n    {\n        if(c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while(c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return ;\n}\nvoid write_(int x)\n{\n    if(x < 0)\n    {\n        putchar('-');\n\n        x = -x;\n    }\n    if(x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint T,n,k;\nint nums[max_n];\nbool check(int x)\n{\n    int tim = k;\n    while(tim--)\n    {\n        int p = lower_bound(nums + 1,nums + n + 1,x) - nums;\n        if(p > n || nums[p] > x)\n        {\n            p--;\n        }\n        x -= p;\n        if(x <= 0)\n        {\n            return 0;\n        }\n    }\n    return 1;\n}\nvoid solution()\n{\n    read(n),read(k);\n    for(int i = 1;i <= n;i++)\n    {\n        read(nums[i]);\n    }\n    int l = 1,r = n * k + 1,mid,ans = 1; // ans 设置为 1，若 a[1] > 1 不影响\n    while(l <= r)\n    {\n        mid = (l + r) >> 1;\n        if(check(mid)) // 不会被删去\n        {\n            r = mid - 1;\n            ans = mid;\n        }\n        else\n        {\n            l = mid + 1;\n        }\n    }\n    writeln(ans);\n    return ;\n}\nsigned main()\n{\n    read(T);\n    while(T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```","source":"_posts/CF1852A Ntarsis' Set 题解.md","raw":"---\ntitle: \"CF1852A Ntarsis' Set 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF1852A Ntarsis' Set 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF1852A)\n\n[Codeforces](https://codeforces.com/problemset/problem/1852/A)\n\n## Description\n\n有一个集合，初始状态里面按顺序有数字 $1 \\sim 10^{1000}$。\n\n现在给你一个长度为 $n$ 数组 $a (1\\leq a_i \\leq 10^9 )$，要进行 $k$ 次操作，每次操作将当前集合中第 $a_1$ 小、第 $a_2$ 小、......、第 $a_n$ 小的数同时移除。\n\n请问 $k$ 次操作之后，最小的数是多少。\n\n## Solution\n\n看到这道题的数据范围，第一想法是二分答案。于是需要思考的就是如何判断对于一个数 $p$，所有小于 $p$ 的数是否都会被删除。\n\n由于我们在删除的时候只关心数字是第几小的，因此我们可以在每次删除后对数字进行重新编号。对于一个编号为 $x$ 的数，若删除了 $p$ 个编号小于 $x$ 的数，那么它的编号变为 $x - p$。\n\n由此，我们可以枚举 $k$ 轮，最终只需要检查这个数最后的编号是否大于 $0$ 即可。\n\ncheck 部分的代码单独给出：\n\n```cpp\nbool check(int x)\n{\n    int tim = k;\n    while(tim--)\n    {\n        int p = lower_bound(nums + 1,nums + n + 1,x) - nums;\n        if(p > n || nums[p] > x)\n        {\n            p--;\n        }\n        x -= p;\n    }\n    if(x >= 1)\n    {\n        return 1;\n    }\n    return 0;\n}\n```\n\n对于二分的上下界，显然最小为 $1$，由于删去了 $n \\times k$ 个数，所以答案不会大于 $n \\times k + 1$。注意此题要开 `long long`。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 210101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while(c < '0' || c > '9')\n    {\n        if(c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while(c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return ;\n}\nvoid write_(int x)\n{\n    if(x < 0)\n    {\n        putchar('-');\n\n        x = -x;\n    }\n    if(x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint T,n,k;\nint nums[max_n];\nbool check(int x)\n{\n    int tim = k;\n    while(tim--)\n    {\n        int p = lower_bound(nums + 1,nums + n + 1,x) - nums;\n        if(p > n || nums[p] > x)\n        {\n            p--;\n        }\n        x -= p;\n        if(x <= 0)\n        {\n            return 0;\n        }\n    }\n    return 1;\n}\nvoid solution()\n{\n    read(n),read(k);\n    for(int i = 1;i <= n;i++)\n    {\n        read(nums[i]);\n    }\n    int l = 1,r = n * k + 1,mid,ans = 1; // ans 设置为 1，若 a[1] > 1 不影响\n    while(l <= r)\n    {\n        mid = (l + r) >> 1;\n        if(check(mid)) // 不会被删去\n        {\n            r = mid - 1;\n            ans = mid;\n        }\n        else\n        {\n            l = mid + 1;\n        }\n    }\n    writeln(ans);\n    return ;\n}\nsigned main()\n{\n    read(T);\n    while(T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```","slug":"CF1852A Ntarsis' Set 题解","published":1,"date":"2023-10-04T14:11:08.249Z","updated":"2023-10-04T14:11:08.249Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9yx0019osja8971hedl","content":"<h1 id=\"cf1852a-ntarsis-set-题解\">CF1852A Ntarsis' Set 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1852A\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1852/A\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>有一个集合，初始状态里面按顺序有数字 <span class=\"math inline\">\\(1\r\n\\sim 10^{1000}\\)</span>。</p>\r\n<p>现在给你一个长度为 <span class=\"math inline\">\\(n\\)</span> 数组 <span\r\nclass=\"math inline\">\\(a (1\\leq a_i \\leq 10^9 )\\)</span>，要进行 <span\r\nclass=\"math inline\">\\(k\\)</span> 次操作，每次操作将当前集合中第 <span\r\nclass=\"math inline\">\\(a_1\\)</span> 小、第 <span\r\nclass=\"math inline\">\\(a_2\\)</span> 小、......、第 <span\r\nclass=\"math inline\">\\(a_n\\)</span> 小的数同时移除。</p>\r\n<p>请问 <span class=\"math inline\">\\(k\\)</span>\r\n次操作之后，最小的数是多少。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>看到这道题的数据范围，第一想法是二分答案。于是需要思考的就是如何判断对于一个数\r\n<span class=\"math inline\">\\(p\\)</span>，所有小于 <span\r\nclass=\"math inline\">\\(p\\)</span> 的数是否都会被删除。</p>\r\n<p>由于我们在删除的时候只关心数字是第几小的，因此我们可以在每次删除后对数字进行重新编号。对于一个编号为\r\n<span class=\"math inline\">\\(x\\)</span> 的数，若删除了 <span\r\nclass=\"math inline\">\\(p\\)</span> 个编号小于 <span\r\nclass=\"math inline\">\\(x\\)</span> 的数，那么它的编号变为 <span\r\nclass=\"math inline\">\\(x - p\\)</span>。</p>\r\n<p>由此，我们可以枚举 <span class=\"math inline\">\\(k\\)</span>\r\n轮，最终只需要检查这个数最后的编号是否大于 <span\r\nclass=\"math inline\">\\(0\\)</span> 即可。</p>\r\n<p>check 部分的代码单独给出：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> tim = k;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(tim--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> p = <span class=\"built_in\">lower_bound</span>(nums + <span class=\"number\">1</span>,nums + n + <span class=\"number\">1</span>,x) - nums;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p &gt; n || nums[p] &gt; x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        x -= p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &gt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>对于二分的上下界，显然最小为 <span\r\nclass=\"math inline\">\\(1\\)</span>，由于删去了 <span\r\nclass=\"math inline\">\\(n \\times k\\)</span> 个数，所以答案不会大于 <span\r\nclass=\"math inline\">\\(n \\times k + 1\\)</span>。注意此题要开\r\n<code>long long</code>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 210101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,k;</span><br><span class=\"line\"><span class=\"type\">int</span> nums[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> tim = k;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(tim--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> p = <span class=\"built_in\">lower_bound</span>(nums + <span class=\"number\">1</span>,nums + n + <span class=\"number\">1</span>,x) - nums;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p &gt; n || nums[p] &gt; x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        x -= p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n),<span class=\"built_in\">read</span>(k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> l = <span class=\"number\">1</span>,r = n * k + <span class=\"number\">1</span>,mid,ans = <span class=\"number\">1</span>; <span class=\"comment\">// ans 设置为 1，若 a[1] &gt; 1 不影响</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l &lt;= r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(mid)) <span class=\"comment\">// 不会被删去</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            ans = mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf1852a-ntarsis-set-题解\">CF1852A Ntarsis' Set 题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1852A\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1852/A\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>有一个集合，初始状态里面按顺序有数字 <span class=\"math inline\">\\(1\r\n\\sim 10^{1000}\\)</span>。</p>\r\n<p>现在给你一个长度为 <span class=\"math inline\">\\(n\\)</span> 数组 <span\r\nclass=\"math inline\">\\(a (1\\leq a_i \\leq 10^9 )\\)</span>，要进行 <span\r\nclass=\"math inline\">\\(k\\)</span> 次操作，每次操作将当前集合中第 <span\r\nclass=\"math inline\">\\(a_1\\)</span> 小、第 <span\r\nclass=\"math inline\">\\(a_2\\)</span> 小、......、第 <span\r\nclass=\"math inline\">\\(a_n\\)</span> 小的数同时移除。</p>\r\n<p>请问 <span class=\"math inline\">\\(k\\)</span>\r\n次操作之后，最小的数是多少。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>看到这道题的数据范围，第一想法是二分答案。于是需要思考的就是如何判断对于一个数\r\n<span class=\"math inline\">\\(p\\)</span>，所有小于 <span\r\nclass=\"math inline\">\\(p\\)</span> 的数是否都会被删除。</p>\r\n<p>由于我们在删除的时候只关心数字是第几小的，因此我们可以在每次删除后对数字进行重新编号。对于一个编号为\r\n<span class=\"math inline\">\\(x\\)</span> 的数，若删除了 <span\r\nclass=\"math inline\">\\(p\\)</span> 个编号小于 <span\r\nclass=\"math inline\">\\(x\\)</span> 的数，那么它的编号变为 <span\r\nclass=\"math inline\">\\(x - p\\)</span>。</p>\r\n<p>由此，我们可以枚举 <span class=\"math inline\">\\(k\\)</span>\r\n轮，最终只需要检查这个数最后的编号是否大于 <span\r\nclass=\"math inline\">\\(0\\)</span> 即可。</p>\r\n<p>check 部分的代码单独给出：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> tim = k;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(tim--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> p = <span class=\"built_in\">lower_bound</span>(nums + <span class=\"number\">1</span>,nums + n + <span class=\"number\">1</span>,x) - nums;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p &gt; n || nums[p] &gt; x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        x -= p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &gt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>对于二分的上下界，显然最小为 <span\r\nclass=\"math inline\">\\(1\\)</span>，由于删去了 <span\r\nclass=\"math inline\">\\(n \\times k\\)</span> 个数，所以答案不会大于 <span\r\nclass=\"math inline\">\\(n \\times k + 1\\)</span>。注意此题要开\r\n<code>long long</code>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 210101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,k;</span><br><span class=\"line\"><span class=\"type\">int</span> nums[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> tim = k;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(tim--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> p = <span class=\"built_in\">lower_bound</span>(nums + <span class=\"number\">1</span>,nums + n + <span class=\"number\">1</span>,x) - nums;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p &gt; n || nums[p] &gt; x)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            p--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        x -= p;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n),<span class=\"built_in\">read</span>(k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> l = <span class=\"number\">1</span>,r = n * k + <span class=\"number\">1</span>,mid,ans = <span class=\"number\">1</span>; <span class=\"comment\">// ans 设置为 1，若 a[1] &gt; 1 不影响</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l &lt;= r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(mid)) <span class=\"comment\">// 不会被删去</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            ans = mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1852B Imbalanced Arrays 题解","mathjax":true,"_content":"\n# CF1852B Imbalanced Arrays 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF1852B)\n\n[Codeforces](https://codeforces.com/problemset/problem/1852/B)\n\n## Description\n\n对于一个给定的长度为 $n$ 的数组 $A$，定义一个长度为 $n$ 的数组 $B$ 是不平衡的当且仅当以下全部条件满足：\n\n- $-n \\leq B_{i} \\leq n$ 且 $B_{i} \\ne 0$。即每个数在 $[-n,n]$ 内且不为 $0$。\n\n- $\\forall i,j \\in [1,n], B_{i} + B_{j} \\neq 0$。即数组内不存在一对相反数。\n\n- $\\forall i \\in [1,n], \\sum_{j = 1}^{n} [ \\left (B_{i} + B_{j} \\right) > 0] = A_{i}$。即对于任意的 $i$，数组中与 $B_{i}$ 和大于 $0$ 的数的个数恰好为 $A_{i}$。**注意：这里需要计算本身。也即 $i$ 与 $j$ 可以相等。**\n\n请构造长度为 $n$ 的不平衡序列。\n\n多组测试数据。\n\n## Solution\n\n手模了一下数据。发现**绝对值最大的数**很有意义。假设这个数下标为 $k$，继续研究可以发现，若这个数大于 $0$，则它与所有数相加都大于 $0$，此时 $a_{k}$ 为 $n$，否则它与所有数相加都小于 $0$，此时 $a_{k}$ 为 $0$。由于绝对值最大的数要么是正数，要么是负数（题目中说了没有 $0$），因此以上两个必定满足一个，否则无解。\n\n按照上面的思路，我们只能求出一个数，如何才能把这个思路延续下去呢，我们发现可以不考虑这个数，将序列的长度减 $1$，若绝对值最大的数为正数，我们还需要将 $a$ 数组的每个数减 $1$ 来排除这个数的贡献。\n\n于是每个数就都可以根据序列能剩余数的数量确定。\n\n如果上面没看懂就来看一下实现吧，首先方便找最大数和 $0$，将 $a$ 从大到小排序，注意要记录原来的位置。\n\n```cpp\nread(n);\nfor(int i = 1;i <= n;i++)\n{\n    read(nums[i].first);\n    nums[i].second = i;\n}\nsort(nums + 1,nums + n + 1);\nreverse(nums + 1,nums + n + 1);\n```\n\n接下来开始枚举。用 `det` 记录整个序列被减去的值。\n\n判断两种无解的情况，并计算当前数的答案。由于每次都会减少一个数，因此数组中的数绝对值互不相同，满足了第一个条件。\n\n```cpp\nint tail = n,det = 0;\nfor(int i = 1;i <= tail;i++)\n{\n    if(nums[i].first - det == tail - i + 1 && nums[tail].first - det <= 0)\n    {\n        puts(\"NO\");\n        return ;\n    }\n    if(nums[i].first - det != tail - i + 1 && nums[tail].first - det != 0)\n    {\n        puts(\"NO\");\n        return ;\n    }\n    if(nums[i].first - det == tail - i + 1)\n    {\n        ans[nums[i].second] = tail - i + 1;\n        ++det;\n    }\n    else\n    {\n        ans[nums[tail].second] = -(tail - i + 1);\n        --tail;\n        --i;\n    }\n}\n```\n\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 520011\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while(c < '0' || c > '9')\n    {\n        if(c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while(c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return ;\n}\nvoid write_(int x)\n{\n    if(x < 0)\n    {\n        putchar('-');\n\n        x = -x;\n    }\n    if(x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint T;\nint n;\npair<int,int> nums[max_n];\nint ans[max_n];\nvoid solution()\n{\n    read(n);\n    for(int i = 1;i <= n;i++)\n    {\n        read(nums[i].first);\n        nums[i].second = i;\n    }\n    sort(nums + 1,nums + n + 1);\n    reverse(nums + 1,nums + n + 1);\n    int tail = n,det = 0;\n    for(int i = 1;i <= tail;i++)\n    {\n        if(nums[i].first - det == tail - i + 1 && nums[tail].first - det <= 0)\n        {\n            puts(\"NO\");\n            return ;\n        }\n        if(nums[i].first - det != tail - i + 1 && nums[tail].first - det != 0)\n        {\n            puts(\"NO\");\n            return ;\n        }\n        if(nums[i].first - det == tail - i + 1)\n        {\n            ans[nums[i].second] = tail - i + 1;\n            ++det;\n        }\n        else\n        {\n            ans[nums[tail].second] = -(tail - i + 1);\n            --tail;\n            --i;\n        }\n    }\n    puts(\"YES\");\n    for(int i = 1;i <= n;i++)\n    {\n        writesp(ans[i]);\n    }\n    puts(\"\");\n}\nsigned main()\n{\n    read(T);\n    while(T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```","source":"_posts/CF1852B Imbalanced Arrays 题解.md","raw":"---\ntitle: \"CF1852B Imbalanced Arrays 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF1852B Imbalanced Arrays 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF1852B)\n\n[Codeforces](https://codeforces.com/problemset/problem/1852/B)\n\n## Description\n\n对于一个给定的长度为 $n$ 的数组 $A$，定义一个长度为 $n$ 的数组 $B$ 是不平衡的当且仅当以下全部条件满足：\n\n- $-n \\leq B_{i} \\leq n$ 且 $B_{i} \\ne 0$。即每个数在 $[-n,n]$ 内且不为 $0$。\n\n- $\\forall i,j \\in [1,n], B_{i} + B_{j} \\neq 0$。即数组内不存在一对相反数。\n\n- $\\forall i \\in [1,n], \\sum_{j = 1}^{n} [ \\left (B_{i} + B_{j} \\right) > 0] = A_{i}$。即对于任意的 $i$，数组中与 $B_{i}$ 和大于 $0$ 的数的个数恰好为 $A_{i}$。**注意：这里需要计算本身。也即 $i$ 与 $j$ 可以相等。**\n\n请构造长度为 $n$ 的不平衡序列。\n\n多组测试数据。\n\n## Solution\n\n手模了一下数据。发现**绝对值最大的数**很有意义。假设这个数下标为 $k$，继续研究可以发现，若这个数大于 $0$，则它与所有数相加都大于 $0$，此时 $a_{k}$ 为 $n$，否则它与所有数相加都小于 $0$，此时 $a_{k}$ 为 $0$。由于绝对值最大的数要么是正数，要么是负数（题目中说了没有 $0$），因此以上两个必定满足一个，否则无解。\n\n按照上面的思路，我们只能求出一个数，如何才能把这个思路延续下去呢，我们发现可以不考虑这个数，将序列的长度减 $1$，若绝对值最大的数为正数，我们还需要将 $a$ 数组的每个数减 $1$ 来排除这个数的贡献。\n\n于是每个数就都可以根据序列能剩余数的数量确定。\n\n如果上面没看懂就来看一下实现吧，首先方便找最大数和 $0$，将 $a$ 从大到小排序，注意要记录原来的位置。\n\n```cpp\nread(n);\nfor(int i = 1;i <= n;i++)\n{\n    read(nums[i].first);\n    nums[i].second = i;\n}\nsort(nums + 1,nums + n + 1);\nreverse(nums + 1,nums + n + 1);\n```\n\n接下来开始枚举。用 `det` 记录整个序列被减去的值。\n\n判断两种无解的情况，并计算当前数的答案。由于每次都会减少一个数，因此数组中的数绝对值互不相同，满足了第一个条件。\n\n```cpp\nint tail = n,det = 0;\nfor(int i = 1;i <= tail;i++)\n{\n    if(nums[i].first - det == tail - i + 1 && nums[tail].first - det <= 0)\n    {\n        puts(\"NO\");\n        return ;\n    }\n    if(nums[i].first - det != tail - i + 1 && nums[tail].first - det != 0)\n    {\n        puts(\"NO\");\n        return ;\n    }\n    if(nums[i].first - det == tail - i + 1)\n    {\n        ans[nums[i].second] = tail - i + 1;\n        ++det;\n    }\n    else\n    {\n        ans[nums[tail].second] = -(tail - i + 1);\n        --tail;\n        --i;\n    }\n}\n```\n\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 520011\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while(c < '0' || c > '9')\n    {\n        if(c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while(c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return ;\n}\nvoid write_(int x)\n{\n    if(x < 0)\n    {\n        putchar('-');\n\n        x = -x;\n    }\n    if(x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint T;\nint n;\npair<int,int> nums[max_n];\nint ans[max_n];\nvoid solution()\n{\n    read(n);\n    for(int i = 1;i <= n;i++)\n    {\n        read(nums[i].first);\n        nums[i].second = i;\n    }\n    sort(nums + 1,nums + n + 1);\n    reverse(nums + 1,nums + n + 1);\n    int tail = n,det = 0;\n    for(int i = 1;i <= tail;i++)\n    {\n        if(nums[i].first - det == tail - i + 1 && nums[tail].first - det <= 0)\n        {\n            puts(\"NO\");\n            return ;\n        }\n        if(nums[i].first - det != tail - i + 1 && nums[tail].first - det != 0)\n        {\n            puts(\"NO\");\n            return ;\n        }\n        if(nums[i].first - det == tail - i + 1)\n        {\n            ans[nums[i].second] = tail - i + 1;\n            ++det;\n        }\n        else\n        {\n            ans[nums[tail].second] = -(tail - i + 1);\n            --tail;\n            --i;\n        }\n    }\n    puts(\"YES\");\n    for(int i = 1;i <= n;i++)\n    {\n        writesp(ans[i]);\n    }\n    puts(\"\");\n}\nsigned main()\n{\n    read(T);\n    while(T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```","slug":"CF1852B Imbalanced Arrays 题解","published":1,"date":"2023-10-04T14:11:08.250Z","updated":"2023-10-04T14:11:08.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9yy001bosja7dg3e0w2","content":"<h1 id=\"cf1852b-imbalanced-arrays-题解\">CF1852B Imbalanced Arrays\r\n题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1852B\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1852/B\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>对于一个给定的长度为 <span class=\"math inline\">\\(n\\)</span> 的数组\r\n<span class=\"math inline\">\\(A\\)</span>，定义一个长度为 <span\r\nclass=\"math inline\">\\(n\\)</span> 的数组 <span\r\nclass=\"math inline\">\\(B\\)</span>\r\n是不平衡的当且仅当以下全部条件满足：</p>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(-n \\leq B_{i} \\leq n\\)</span> 且\r\n<span class=\"math inline\">\\(B_{i} \\ne 0\\)</span>。即每个数在 <span\r\nclass=\"math inline\">\\([-n,n]\\)</span> 内且不为 <span\r\nclass=\"math inline\">\\(0\\)</span>。</p></li>\r\n<li><p><span class=\"math inline\">\\(\\forall i,j \\in [1,n], B_{i} + B_{j}\r\n\\neq 0\\)</span>。即数组内不存在一对相反数。</p></li>\r\n<li><p><span class=\"math inline\">\\(\\forall i \\in [1,n], \\sum_{j = 1}^{n}\r\n[ \\left (B_{i} + B_{j} \\right) &gt; 0] = A_{i}\\)</span>。即对于任意的\r\n<span class=\"math inline\">\\(i\\)</span>，数组中与 <span\r\nclass=\"math inline\">\\(B_{i}\\)</span> 和大于 <span\r\nclass=\"math inline\">\\(0\\)</span> 的数的个数恰好为 <span\r\nclass=\"math inline\">\\(A_{i}\\)</span>。<strong>注意：这里需要计算本身。也即\r\n<span class=\"math inline\">\\(i\\)</span> 与 <span\r\nclass=\"math inline\">\\(j\\)</span> 可以相等。</strong></p></li>\r\n</ul>\r\n<p>请构造长度为 <span class=\"math inline\">\\(n\\)</span>\r\n的不平衡序列。</p>\r\n<p>多组测试数据。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>手模了一下数据。发现<strong>绝对值最大的数</strong>很有意义。假设这个数下标为\r\n<span class=\"math inline\">\\(k\\)</span>，继续研究可以发现，若这个数大于\r\n<span class=\"math inline\">\\(0\\)</span>，则它与所有数相加都大于 <span\r\nclass=\"math inline\">\\(0\\)</span>，此时 <span\r\nclass=\"math inline\">\\(a_{k}\\)</span> 为 <span\r\nclass=\"math inline\">\\(n\\)</span>，否则它与所有数相加都小于 <span\r\nclass=\"math inline\">\\(0\\)</span>，此时 <span\r\nclass=\"math inline\">\\(a_{k}\\)</span> 为 <span\r\nclass=\"math inline\">\\(0\\)</span>。由于绝对值最大的数要么是正数，要么是负数（题目中说了没有\r\n<span\r\nclass=\"math inline\">\\(0\\)</span>），因此以上两个必定满足一个，否则无解。</p>\r\n<p>按照上面的思路，我们只能求出一个数，如何才能把这个思路延续下去呢，我们发现可以不考虑这个数，将序列的长度减\r\n<span\r\nclass=\"math inline\">\\(1\\)</span>，若绝对值最大的数为正数，我们还需要将\r\n<span class=\"math inline\">\\(a\\)</span> 数组的每个数减 <span\r\nclass=\"math inline\">\\(1\\)</span> 来排除这个数的贡献。</p>\r\n<p>于是每个数就都可以根据序列能剩余数的数量确定。</p>\r\n<p>如果上面没看懂就来看一下实现吧，首先方便找最大数和 <span\r\nclass=\"math inline\">\\(0\\)</span>，将 <span\r\nclass=\"math inline\">\\(a\\)</span>\r\n从大到小排序，注意要记录原来的位置。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">read</span>(n);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(nums[i].first);</span><br><span class=\"line\">    nums[i].second = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">sort</span>(nums + <span class=\"number\">1</span>,nums + n + <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">reverse</span>(nums + <span class=\"number\">1</span>,nums + n + <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\r\n<p>接下来开始枚举。用 <code>det</code> 记录整个序列被减去的值。</p>\r\n<p>判断两种无解的情况，并计算当前数的答案。由于每次都会减少一个数，因此数组中的数绝对值互不相同，满足了第一个条件。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> tail = n,det = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= tail;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums[i].first - det == tail - i + <span class=\"number\">1</span> &amp;&amp; nums[tail].first - det &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;NO&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums[i].first - det != tail - i + <span class=\"number\">1</span> &amp;&amp; nums[tail].first - det != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;NO&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums[i].first - det == tail - i + <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans[nums[i].second] = tail - i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        ++det;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans[nums[tail].second] = -(tail - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        --tail;</span><br><span class=\"line\">        --i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 520011</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\">pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; nums[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> ans[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i].first);</span><br><span class=\"line\">        nums[i].second = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(nums + <span class=\"number\">1</span>,nums + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(nums + <span class=\"number\">1</span>,nums + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> tail = n,det = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= tail;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i].first - det == tail - i + <span class=\"number\">1</span> &amp;&amp; nums[tail].first - det &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;NO&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i].first - det != tail - i + <span class=\"number\">1</span> &amp;&amp; nums[tail].first - det != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;NO&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i].first - det == tail - i + <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans[nums[i].second] = tail - i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            ++det;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans[nums[tail].second] = -(tail - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            --tail;</span><br><span class=\"line\">            --i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;YES&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">writesp</span>(ans[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf1852b-imbalanced-arrays-题解\">CF1852B Imbalanced Arrays\r\n题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1852B\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1852/B\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>对于一个给定的长度为 <span class=\"math inline\">\\(n\\)</span> 的数组\r\n<span class=\"math inline\">\\(A\\)</span>，定义一个长度为 <span\r\nclass=\"math inline\">\\(n\\)</span> 的数组 <span\r\nclass=\"math inline\">\\(B\\)</span>\r\n是不平衡的当且仅当以下全部条件满足：</p>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(-n \\leq B_{i} \\leq n\\)</span> 且\r\n<span class=\"math inline\">\\(B_{i} \\ne 0\\)</span>。即每个数在 <span\r\nclass=\"math inline\">\\([-n,n]\\)</span> 内且不为 <span\r\nclass=\"math inline\">\\(0\\)</span>。</p></li>\r\n<li><p><span class=\"math inline\">\\(\\forall i,j \\in [1,n], B_{i} + B_{j}\r\n\\neq 0\\)</span>。即数组内不存在一对相反数。</p></li>\r\n<li><p><span class=\"math inline\">\\(\\forall i \\in [1,n], \\sum_{j = 1}^{n}\r\n[ \\left (B_{i} + B_{j} \\right) &gt; 0] = A_{i}\\)</span>。即对于任意的\r\n<span class=\"math inline\">\\(i\\)</span>，数组中与 <span\r\nclass=\"math inline\">\\(B_{i}\\)</span> 和大于 <span\r\nclass=\"math inline\">\\(0\\)</span> 的数的个数恰好为 <span\r\nclass=\"math inline\">\\(A_{i}\\)</span>。<strong>注意：这里需要计算本身。也即\r\n<span class=\"math inline\">\\(i\\)</span> 与 <span\r\nclass=\"math inline\">\\(j\\)</span> 可以相等。</strong></p></li>\r\n</ul>\r\n<p>请构造长度为 <span class=\"math inline\">\\(n\\)</span>\r\n的不平衡序列。</p>\r\n<p>多组测试数据。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>手模了一下数据。发现<strong>绝对值最大的数</strong>很有意义。假设这个数下标为\r\n<span class=\"math inline\">\\(k\\)</span>，继续研究可以发现，若这个数大于\r\n<span class=\"math inline\">\\(0\\)</span>，则它与所有数相加都大于 <span\r\nclass=\"math inline\">\\(0\\)</span>，此时 <span\r\nclass=\"math inline\">\\(a_{k}\\)</span> 为 <span\r\nclass=\"math inline\">\\(n\\)</span>，否则它与所有数相加都小于 <span\r\nclass=\"math inline\">\\(0\\)</span>，此时 <span\r\nclass=\"math inline\">\\(a_{k}\\)</span> 为 <span\r\nclass=\"math inline\">\\(0\\)</span>。由于绝对值最大的数要么是正数，要么是负数（题目中说了没有\r\n<span\r\nclass=\"math inline\">\\(0\\)</span>），因此以上两个必定满足一个，否则无解。</p>\r\n<p>按照上面的思路，我们只能求出一个数，如何才能把这个思路延续下去呢，我们发现可以不考虑这个数，将序列的长度减\r\n<span\r\nclass=\"math inline\">\\(1\\)</span>，若绝对值最大的数为正数，我们还需要将\r\n<span class=\"math inline\">\\(a\\)</span> 数组的每个数减 <span\r\nclass=\"math inline\">\\(1\\)</span> 来排除这个数的贡献。</p>\r\n<p>于是每个数就都可以根据序列能剩余数的数量确定。</p>\r\n<p>如果上面没看懂就来看一下实现吧，首先方便找最大数和 <span\r\nclass=\"math inline\">\\(0\\)</span>，将 <span\r\nclass=\"math inline\">\\(a\\)</span>\r\n从大到小排序，注意要记录原来的位置。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">read</span>(n);</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(nums[i].first);</span><br><span class=\"line\">    nums[i].second = i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">sort</span>(nums + <span class=\"number\">1</span>,nums + n + <span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">reverse</span>(nums + <span class=\"number\">1</span>,nums + n + <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\r\n<p>接下来开始枚举。用 <code>det</code> 记录整个序列被减去的值。</p>\r\n<p>判断两种无解的情况，并计算当前数的答案。由于每次都会减少一个数，因此数组中的数绝对值互不相同，满足了第一个条件。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> tail = n,det = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= tail;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums[i].first - det == tail - i + <span class=\"number\">1</span> &amp;&amp; nums[tail].first - det &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;NO&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums[i].first - det != tail - i + <span class=\"number\">1</span> &amp;&amp; nums[tail].first - det != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;NO&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nums[i].first - det == tail - i + <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans[nums[i].second] = tail - i + <span class=\"number\">1</span>;</span><br><span class=\"line\">        ++det;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans[nums[tail].second] = -(tail - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        --tail;</span><br><span class=\"line\">        --i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 520011</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\">pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt; nums[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> ans[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i].first);</span><br><span class=\"line\">        nums[i].second = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(nums + <span class=\"number\">1</span>,nums + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">reverse</span>(nums + <span class=\"number\">1</span>,nums + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> tail = n,det = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= tail;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i].first - det == tail - i + <span class=\"number\">1</span> &amp;&amp; nums[tail].first - det &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;NO&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i].first - det != tail - i + <span class=\"number\">1</span> &amp;&amp; nums[tail].first - det != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;NO&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(nums[i].first - det == tail - i + <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans[nums[i].second] = tail - i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            ++det;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans[nums[tail].second] = -(tail - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            --tail;</span><br><span class=\"line\">            --i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;YES&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">writesp</span>(ans[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1854B Earn or Unlock 题解","mathjax":true,"_content":"\n# CF1854B Earn or Unlock 题解\n\n<!-- more -->\n\n\n## Link\n\n[洛谷](https://www.luogu.com.cn/problem/CF1854B)\n\n[Codeforce](https://codeforces.com/problemset/problem/1854/B)\n\n## Description\n\n有一长度为 $n$ 的一副牌，每张牌上都有一个数字，设第 $i$ 张牌上的数字为 $a_i$。初始时，你手里只有第一张牌。对于每一张牌，你有两种选择：\n\n- 如果剩余的牌数量 $< a_i$，则将牌摸完，否则继续往下摸 $a_i$ 张牌。摸牌完成后，这张牌会被丢弃。\n\n- 获得 $a_i$ 的分数，并丢弃这张牌。\n\n当你手里没有牌时结束，求你能获得的最大分数。\n\n对于所有数据，保证 $1 \\le n \\le 10 ^ 5$，$0 \\le a_i \\le n$。\n\n## Hint\n\n### Hint $1$\n\n我们会以什么顺序使用已经解锁的牌？\n\n> 使用牌的顺序没有影响，因此我们可以假定从上向下依次使用牌。\n\n### Hint $2$\n\n假设我们一共翻开了**恰好** $k$ 张牌（包括第一张），最终的答案是什么？\n\n> 可以发现，当用一张牌 $i$ 用来解锁之后的牌时，对答案的贡献为 $0$，对翻开牌数量的贡献为 $a_{i}$。否则对答案贡献为 $a_{i}$，对翻开牌数量的贡献为 $0$。因此每张牌的贡献都为 $a_{i}$，因此有 $ans + k - 1 = \\sum_{i = 1}^{k} a_{i}$。左侧减一的原因是第一张牌是一开始就翻开了。\n\n### Hint $3$\n\n如何确定能否恰好翻开 $k$ 张牌？\n\n> 使用 dp，每张牌可以由之前的转移过来。\n\n\n## Solution\n\n根据上面的提示，我们使用 dp 判断能否恰好取 $k$ 张牌，当 $dp_{i} = 1$ 时，$ans = \\max \\left ( ans,\\left( \\sum_{j = 1}^{i} a_{j} \\right) - i + 1 \\right)$。后面的部分可以使用前缀和 $O(1)$ 求出。\n\n根据题目，初始状态 $dp_{1} = 1$，那么如何进行状态转移呢？假设有一张编号为 $i$ 的卡牌，并且存在一种恰好解锁 $j$ 张卡牌的方式，那么就存在一种恰好解锁 $j + a_{i}$ 张卡牌的方式。于是反过来就有转移：\n\n$$dp_{j} = dp_{j}\\ | \\ dp_{j - a_{i}}$$\n\n每次转移之后要把这个转移方程时间复杂度为 $O \\left ( n^{2}\\right )$，无法通过。\n\n由于转移只有或操作，并且 $dp$ 是 `bool` 类型的，我们可以考虑用 `bitset` 优化。具体的，我们将 $dp_{i}$ 转化为 `bitset` 中的第 $i$ 位。于是有新的转移方程写法：`dp = dp | (dp << a[i])`。时间复杂度 $O \\left ( \\frac{ n^{2} }{\\omega} \\right )$，可以通过，为了避免转移的时候使用到没解锁的牌，我们转移后记录下 $dp_{i}$ 并将 $dp_{i} = 0$。\n\n另外，根据题目中所给的信息，可能会出现选择卡牌的数值大于剩余卡牌数量，这时我们在后面开一些虚拟卡牌，权值为 $0$ 即可，根据题目条件，我们只需要开出 $n$ 张虚拟卡牌就足够了。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 210101\nvoid read(int &p)\n{\n    p = 0;\n    char c = getchar();\n    int k = 1;\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nbitset<max_n> dp;\nbool dp2[max_n];\nint T, n, nums[max_n];\nvoid solution()\n{\n    read(n);\n    dp[1] = 1;\n    for (int i = 1; i <= n; i++)\n    {\n        read(nums[i]);\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        dp = (dp | (dp << nums[i]));\n        dp2[i] = dp[i];\n        dp[i] = 0;\n    }\n    for (int i = n + 1; i <= 2 * n; i++)\n    {\n        dp2[i] = dp[i];\n    }\n    int ans = 0, sum = 0;\n    for (int i = 1; i <= n; i++)\n    {\n        sum += nums[i];\n        if (dp2[i])\n        {\n            ans = max(ans, sum - i + 1);\n        }\n    }\n    for (int i = n + 1; i <= 2 * n; i++)\n    {\n        if (dp2[i])\n        {\n            ans = max(ans, sum - i + 1);\n        }\n    }\n    writeln(ans);\n}\nsigned main()\n{\n    T = 1;\n    while (T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```","source":"_posts/CF1854B Earn or Unlock 题解.md","raw":"---\ntitle: \"CF1854B Earn or Unlock 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF1854B Earn or Unlock 题解\n\n<!-- more -->\n\n\n## Link\n\n[洛谷](https://www.luogu.com.cn/problem/CF1854B)\n\n[Codeforce](https://codeforces.com/problemset/problem/1854/B)\n\n## Description\n\n有一长度为 $n$ 的一副牌，每张牌上都有一个数字，设第 $i$ 张牌上的数字为 $a_i$。初始时，你手里只有第一张牌。对于每一张牌，你有两种选择：\n\n- 如果剩余的牌数量 $< a_i$，则将牌摸完，否则继续往下摸 $a_i$ 张牌。摸牌完成后，这张牌会被丢弃。\n\n- 获得 $a_i$ 的分数，并丢弃这张牌。\n\n当你手里没有牌时结束，求你能获得的最大分数。\n\n对于所有数据，保证 $1 \\le n \\le 10 ^ 5$，$0 \\le a_i \\le n$。\n\n## Hint\n\n### Hint $1$\n\n我们会以什么顺序使用已经解锁的牌？\n\n> 使用牌的顺序没有影响，因此我们可以假定从上向下依次使用牌。\n\n### Hint $2$\n\n假设我们一共翻开了**恰好** $k$ 张牌（包括第一张），最终的答案是什么？\n\n> 可以发现，当用一张牌 $i$ 用来解锁之后的牌时，对答案的贡献为 $0$，对翻开牌数量的贡献为 $a_{i}$。否则对答案贡献为 $a_{i}$，对翻开牌数量的贡献为 $0$。因此每张牌的贡献都为 $a_{i}$，因此有 $ans + k - 1 = \\sum_{i = 1}^{k} a_{i}$。左侧减一的原因是第一张牌是一开始就翻开了。\n\n### Hint $3$\n\n如何确定能否恰好翻开 $k$ 张牌？\n\n> 使用 dp，每张牌可以由之前的转移过来。\n\n\n## Solution\n\n根据上面的提示，我们使用 dp 判断能否恰好取 $k$ 张牌，当 $dp_{i} = 1$ 时，$ans = \\max \\left ( ans,\\left( \\sum_{j = 1}^{i} a_{j} \\right) - i + 1 \\right)$。后面的部分可以使用前缀和 $O(1)$ 求出。\n\n根据题目，初始状态 $dp_{1} = 1$，那么如何进行状态转移呢？假设有一张编号为 $i$ 的卡牌，并且存在一种恰好解锁 $j$ 张卡牌的方式，那么就存在一种恰好解锁 $j + a_{i}$ 张卡牌的方式。于是反过来就有转移：\n\n$$dp_{j} = dp_{j}\\ | \\ dp_{j - a_{i}}$$\n\n每次转移之后要把这个转移方程时间复杂度为 $O \\left ( n^{2}\\right )$，无法通过。\n\n由于转移只有或操作，并且 $dp$ 是 `bool` 类型的，我们可以考虑用 `bitset` 优化。具体的，我们将 $dp_{i}$ 转化为 `bitset` 中的第 $i$ 位。于是有新的转移方程写法：`dp = dp | (dp << a[i])`。时间复杂度 $O \\left ( \\frac{ n^{2} }{\\omega} \\right )$，可以通过，为了避免转移的时候使用到没解锁的牌，我们转移后记录下 $dp_{i}$ 并将 $dp_{i} = 0$。\n\n另外，根据题目中所给的信息，可能会出现选择卡牌的数值大于剩余卡牌数量，这时我们在后面开一些虚拟卡牌，权值为 $0$ 即可，根据题目条件，我们只需要开出 $n$ 张虚拟卡牌就足够了。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 210101\nvoid read(int &p)\n{\n    p = 0;\n    char c = getchar();\n    int k = 1;\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nbitset<max_n> dp;\nbool dp2[max_n];\nint T, n, nums[max_n];\nvoid solution()\n{\n    read(n);\n    dp[1] = 1;\n    for (int i = 1; i <= n; i++)\n    {\n        read(nums[i]);\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        dp = (dp | (dp << nums[i]));\n        dp2[i] = dp[i];\n        dp[i] = 0;\n    }\n    for (int i = n + 1; i <= 2 * n; i++)\n    {\n        dp2[i] = dp[i];\n    }\n    int ans = 0, sum = 0;\n    for (int i = 1; i <= n; i++)\n    {\n        sum += nums[i];\n        if (dp2[i])\n        {\n            ans = max(ans, sum - i + 1);\n        }\n    }\n    for (int i = n + 1; i <= 2 * n; i++)\n    {\n        if (dp2[i])\n        {\n            ans = max(ans, sum - i + 1);\n        }\n    }\n    writeln(ans);\n}\nsigned main()\n{\n    T = 1;\n    while (T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```","slug":"CF1854B Earn or Unlock 题解","published":1,"date":"2023-10-04T14:11:08.250Z","updated":"2023-10-04T14:11:08.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9yz001dosja7rem1ood","content":"<h1 id=\"cf1854b-earn-or-unlock-题解\">CF1854B Earn or Unlock 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"link\">Link</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1854B\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1854/B\">Codeforce</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>有一长度为 <span class=\"math inline\">\\(n\\)</span>\r\n的一副牌，每张牌上都有一个数字，设第 <span\r\nclass=\"math inline\">\\(i\\)</span> 张牌上的数字为 <span\r\nclass=\"math inline\">\\(a_i\\)</span>。初始时，你手里只有第一张牌。对于每一张牌，你有两种选择：</p>\r\n<ul>\r\n<li><p>如果剩余的牌数量 <span class=\"math inline\">\\(&lt;\r\na_i\\)</span>，则将牌摸完，否则继续往下摸 <span\r\nclass=\"math inline\">\\(a_i\\)</span>\r\n张牌。摸牌完成后，这张牌会被丢弃。</p></li>\r\n<li><p>获得 <span class=\"math inline\">\\(a_i\\)</span>\r\n的分数，并丢弃这张牌。</p></li>\r\n</ul>\r\n<p>当你手里没有牌时结束，求你能获得的最大分数。</p>\r\n<p>对于所有数据，保证 <span class=\"math inline\">\\(1 \\le n \\le 10 ^\r\n5\\)</span>，<span class=\"math inline\">\\(0 \\le a_i \\le n\\)</span>。</p>\r\n<h2 id=\"hint\">Hint</h2>\r\n<h3 id=\"hint-1\">Hint <span class=\"math inline\">\\(1\\)</span></h3>\r\n<p>我们会以什么顺序使用已经解锁的牌？</p>\r\n<blockquote>\r\n<p>使用牌的顺序没有影响，因此我们可以假定从上向下依次使用牌。</p>\r\n</blockquote>\r\n<h3 id=\"hint-2\">Hint <span class=\"math inline\">\\(2\\)</span></h3>\r\n<p>假设我们一共翻开了<strong>恰好</strong> <span\r\nclass=\"math inline\">\\(k\\)</span>\r\n张牌（包括第一张），最终的答案是什么？</p>\r\n<blockquote>\r\n<p>可以发现，当用一张牌 <span class=\"math inline\">\\(i\\)</span>\r\n用来解锁之后的牌时，对答案的贡献为 <span\r\nclass=\"math inline\">\\(0\\)</span>，对翻开牌数量的贡献为 <span\r\nclass=\"math inline\">\\(a_{i}\\)</span>。否则对答案贡献为 <span\r\nclass=\"math inline\">\\(a_{i}\\)</span>，对翻开牌数量的贡献为 <span\r\nclass=\"math inline\">\\(0\\)</span>。因此每张牌的贡献都为 <span\r\nclass=\"math inline\">\\(a_{i}\\)</span>，因此有 <span\r\nclass=\"math inline\">\\(ans + k - 1 = \\sum_{i = 1}^{k}\r\na_{i}\\)</span>。左侧减一的原因是第一张牌是一开始就翻开了。</p>\r\n</blockquote>\r\n<h3 id=\"hint-3\">Hint <span class=\"math inline\">\\(3\\)</span></h3>\r\n<p>如何确定能否恰好翻开 <span class=\"math inline\">\\(k\\)</span>\r\n张牌？</p>\r\n<blockquote>\r\n<p>使用 dp，每张牌可以由之前的转移过来。</p>\r\n</blockquote>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>根据上面的提示，我们使用 dp 判断能否恰好取 <span\r\nclass=\"math inline\">\\(k\\)</span> 张牌，当 <span\r\nclass=\"math inline\">\\(dp_{i} = 1\\)</span> 时，<span\r\nclass=\"math inline\">\\(ans = \\max \\left ( ans,\\left( \\sum_{j = 1}^{i}\r\na_{j} \\right) - i + 1 \\right)\\)</span>。后面的部分可以使用前缀和 <span\r\nclass=\"math inline\">\\(O(1)\\)</span> 求出。</p>\r\n<p>根据题目，初始状态 <span class=\"math inline\">\\(dp_{1} =\r\n1\\)</span>，那么如何进行状态转移呢？假设有一张编号为 <span\r\nclass=\"math inline\">\\(i\\)</span> 的卡牌，并且存在一种恰好解锁 <span\r\nclass=\"math inline\">\\(j\\)</span> 张卡牌的方式，那么就存在一种恰好解锁\r\n<span class=\"math inline\">\\(j + a_{i}\\)</span>\r\n张卡牌的方式。于是反过来就有转移：</p>\r\n<p><span class=\"math display\">\\[dp_{j} = dp_{j}\\ | \\ dp_{j -\r\na_{i}}\\]</span></p>\r\n<p>每次转移之后要把这个转移方程时间复杂度为 <span\r\nclass=\"math inline\">\\(O \\left ( n^{2}\\right )\\)</span>，无法通过。</p>\r\n<p>由于转移只有或操作，并且 <span class=\"math inline\">\\(dp\\)</span> 是\r\n<code>bool</code> 类型的，我们可以考虑用 <code>bitset</code>\r\n优化。具体的，我们将 <span class=\"math inline\">\\(dp_{i}\\)</span> 转化为\r\n<code>bitset</code> 中的第 <span class=\"math inline\">\\(i\\)</span>\r\n位。于是有新的转移方程写法：<code>dp = dp | (dp &lt;&lt; a[i])</code>。时间复杂度\r\n<span class=\"math inline\">\\(O \\left ( \\frac{ n^{2} }{\\omega} \\right\r\n)\\)</span>，可以通过，为了避免转移的时候使用到没解锁的牌，我们转移后记录下\r\n<span class=\"math inline\">\\(dp_{i}\\)</span> 并将 <span\r\nclass=\"math inline\">\\(dp_{i} = 0\\)</span>。</p>\r\n<p>另外，根据题目中所给的信息，可能会出现选择卡牌的数值大于剩余卡牌数量，这时我们在后面开一些虚拟卡牌，权值为\r\n<span class=\"math inline\">\\(0\\)</span>\r\n即可，根据题目条件，我们只需要开出 <span\r\nclass=\"math inline\">\\(n\\)</span> 张虚拟卡牌就足够了。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 210101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bitset&lt;max_n&gt; dp;</span><br><span class=\"line\"><span class=\"type\">bool</span> dp2[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> T, n, nums[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dp = (dp | (dp &lt;&lt; nums[i]));</span><br><span class=\"line\">        dp2[i] = dp[i];</span><br><span class=\"line\">        dp[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n + <span class=\"number\">1</span>; i &lt;= <span class=\"number\">2</span> * n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dp2[i] = dp[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum += nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dp2[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, sum - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n + <span class=\"number\">1</span>; i &lt;= <span class=\"number\">2</span> * n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dp2[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, sum - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf1854b-earn-or-unlock-题解\">CF1854B Earn or Unlock 题解</h1>","more":"<h2 id=\"link\">Link</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1854B\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1854/B\">Codeforce</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>有一长度为 <span class=\"math inline\">\\(n\\)</span>\r\n的一副牌，每张牌上都有一个数字，设第 <span\r\nclass=\"math inline\">\\(i\\)</span> 张牌上的数字为 <span\r\nclass=\"math inline\">\\(a_i\\)</span>。初始时，你手里只有第一张牌。对于每一张牌，你有两种选择：</p>\r\n<ul>\r\n<li><p>如果剩余的牌数量 <span class=\"math inline\">\\(&lt;\r\na_i\\)</span>，则将牌摸完，否则继续往下摸 <span\r\nclass=\"math inline\">\\(a_i\\)</span>\r\n张牌。摸牌完成后，这张牌会被丢弃。</p></li>\r\n<li><p>获得 <span class=\"math inline\">\\(a_i\\)</span>\r\n的分数，并丢弃这张牌。</p></li>\r\n</ul>\r\n<p>当你手里没有牌时结束，求你能获得的最大分数。</p>\r\n<p>对于所有数据，保证 <span class=\"math inline\">\\(1 \\le n \\le 10 ^\r\n5\\)</span>，<span class=\"math inline\">\\(0 \\le a_i \\le n\\)</span>。</p>\r\n<h2 id=\"hint\">Hint</h2>\r\n<h3 id=\"hint-1\">Hint <span class=\"math inline\">\\(1\\)</span></h3>\r\n<p>我们会以什么顺序使用已经解锁的牌？</p>\r\n<blockquote>\r\n<p>使用牌的顺序没有影响，因此我们可以假定从上向下依次使用牌。</p>\r\n</blockquote>\r\n<h3 id=\"hint-2\">Hint <span class=\"math inline\">\\(2\\)</span></h3>\r\n<p>假设我们一共翻开了<strong>恰好</strong> <span\r\nclass=\"math inline\">\\(k\\)</span>\r\n张牌（包括第一张），最终的答案是什么？</p>\r\n<blockquote>\r\n<p>可以发现，当用一张牌 <span class=\"math inline\">\\(i\\)</span>\r\n用来解锁之后的牌时，对答案的贡献为 <span\r\nclass=\"math inline\">\\(0\\)</span>，对翻开牌数量的贡献为 <span\r\nclass=\"math inline\">\\(a_{i}\\)</span>。否则对答案贡献为 <span\r\nclass=\"math inline\">\\(a_{i}\\)</span>，对翻开牌数量的贡献为 <span\r\nclass=\"math inline\">\\(0\\)</span>。因此每张牌的贡献都为 <span\r\nclass=\"math inline\">\\(a_{i}\\)</span>，因此有 <span\r\nclass=\"math inline\">\\(ans + k - 1 = \\sum_{i = 1}^{k}\r\na_{i}\\)</span>。左侧减一的原因是第一张牌是一开始就翻开了。</p>\r\n</blockquote>\r\n<h3 id=\"hint-3\">Hint <span class=\"math inline\">\\(3\\)</span></h3>\r\n<p>如何确定能否恰好翻开 <span class=\"math inline\">\\(k\\)</span>\r\n张牌？</p>\r\n<blockquote>\r\n<p>使用 dp，每张牌可以由之前的转移过来。</p>\r\n</blockquote>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>根据上面的提示，我们使用 dp 判断能否恰好取 <span\r\nclass=\"math inline\">\\(k\\)</span> 张牌，当 <span\r\nclass=\"math inline\">\\(dp_{i} = 1\\)</span> 时，<span\r\nclass=\"math inline\">\\(ans = \\max \\left ( ans,\\left( \\sum_{j = 1}^{i}\r\na_{j} \\right) - i + 1 \\right)\\)</span>。后面的部分可以使用前缀和 <span\r\nclass=\"math inline\">\\(O(1)\\)</span> 求出。</p>\r\n<p>根据题目，初始状态 <span class=\"math inline\">\\(dp_{1} =\r\n1\\)</span>，那么如何进行状态转移呢？假设有一张编号为 <span\r\nclass=\"math inline\">\\(i\\)</span> 的卡牌，并且存在一种恰好解锁 <span\r\nclass=\"math inline\">\\(j\\)</span> 张卡牌的方式，那么就存在一种恰好解锁\r\n<span class=\"math inline\">\\(j + a_{i}\\)</span>\r\n张卡牌的方式。于是反过来就有转移：</p>\r\n<p><span class=\"math display\">\\[dp_{j} = dp_{j}\\ | \\ dp_{j -\r\na_{i}}\\]</span></p>\r\n<p>每次转移之后要把这个转移方程时间复杂度为 <span\r\nclass=\"math inline\">\\(O \\left ( n^{2}\\right )\\)</span>，无法通过。</p>\r\n<p>由于转移只有或操作，并且 <span class=\"math inline\">\\(dp\\)</span> 是\r\n<code>bool</code> 类型的，我们可以考虑用 <code>bitset</code>\r\n优化。具体的，我们将 <span class=\"math inline\">\\(dp_{i}\\)</span> 转化为\r\n<code>bitset</code> 中的第 <span class=\"math inline\">\\(i\\)</span>\r\n位。于是有新的转移方程写法：<code>dp = dp | (dp &lt;&lt; a[i])</code>。时间复杂度\r\n<span class=\"math inline\">\\(O \\left ( \\frac{ n^{2} }{\\omega} \\right\r\n)\\)</span>，可以通过，为了避免转移的时候使用到没解锁的牌，我们转移后记录下\r\n<span class=\"math inline\">\\(dp_{i}\\)</span> 并将 <span\r\nclass=\"math inline\">\\(dp_{i} = 0\\)</span>。</p>\r\n<p>另外，根据题目中所给的信息，可能会出现选择卡牌的数值大于剩余卡牌数量，这时我们在后面开一些虚拟卡牌，权值为\r\n<span class=\"math inline\">\\(0\\)</span>\r\n即可，根据题目条件，我们只需要开出 <span\r\nclass=\"math inline\">\\(n\\)</span> 张虚拟卡牌就足够了。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 210101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">bitset&lt;max_n&gt; dp;</span><br><span class=\"line\"><span class=\"type\">bool</span> dp2[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> T, n, nums[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dp = (dp | (dp &lt;&lt; nums[i]));</span><br><span class=\"line\">        dp2[i] = dp[i];</span><br><span class=\"line\">        dp[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n + <span class=\"number\">1</span>; i &lt;= <span class=\"number\">2</span> * n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dp2[i] = dp[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum += nums[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dp2[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, sum - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n + <span class=\"number\">1</span>; i &lt;= <span class=\"number\">2</span> * n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (dp2[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, sum - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    T = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1854D Michael and Hotel 题解","mathjax":true,"_content":"\n# CF1854D Michael and Hotel 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF1854D)\n\n[Codeforces](https://codeforces.com/problemset/problem/1854/D)\n\n## Description\n\n这是一个交互题。\n\n有一个有 $n$ 个点的内向基环树森林，zlsim 位于 $1$ 号节点，请你通过以下操作求出哪些节点（包括 $1$）可以通过从这两点开始沿边行走若干步汇至一点。\n\n- 给出两个参数 $u,k$ 和点集 $S$，询问是否能够通过从 $u$ 出发走 $k$ 步达到任意 $S$ 中的节点。\n\n你最多可以询问 $2000$ 次。\n\n## Solution\n\n一个很显然的题意转化是我们要找到的是节点 $1$ 所在的连通块。这个连通块一定是一颗内向基环树，因此我们可以很容易的找到一个环上的点。具体的方法如下：\n\n- 将剩余点分等为两部分。\n  \n- 询问从 $1$ 出发，行进 $n$ 次之后是否能到达第一部分，若能到达，保留第一部分，若不能，保留第二部分。\n  \n- 重复上述步骤，只剩一个点时停止。\n\n每次减半，因此我们只需要 $ \\left \\lceil \\log_{2}500  \\right \\rceil = 9$ 次操作就能找到一个点。\n\n接下来我们不断按照上面的方式询问从上一个找到的在环上的点开始行进一次能到达的点，就能找到所有环上的点。假设环上有 $k$ 个点，我们需要 $9\\times k$ 次操作，这样不能满足题目条件。\n\n考虑如何加快找点的速度，我们可以进行以下操作：\n\n- 设已经找到的在连通块内的点集为 $S$，剩余点集为 $V$。\n  \n- $\\forall i \\in V$，询问从 $i$ 开始行进 $|S|$ 步能否到达 $S$，若能，将其加入 $S$。\n  \n- 如果这次新找到的点数量小于 $|S|$，结束查找。\n\n这样我们就能找到环上的点，但也会找到一些在该连通块内不属于环上的点，这对我们接下来的操作没有影响。\n\n现在环内所有点已经确定，我们可以用 $n - |S|$ 次询问确定剩余的点，具体的，对于每个不在 $S$ 中的点 $u$，询问从 $u$ 开始行进 $n$ 步能否到达 $S$，若能到达一定在该连通块内，否则不在该连通块内。\n\n假设我们通过二分找到 $p$ 个环上的点，需要的询问数如下：\n\n1. 二分：$9 \\times p$。\n\n2. 倍增找点：令 $p_{1} = p, \\forall i > 1,p_{i} = 2 p_{i - 1}$，则第 $i$ 次需要 $n - p_{i}$ 个询问，当 $p_{i} \\ge n$ 时结束（假设这时 $i = x$）。\n\n3. 最后需要 $n - p_{x}$ 次询问确定剩余点。\n\n当 $p$ 取 $63$ 时满足题意。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 511\n\nint n;\nint tot = 0;\nint ls = 1;\nbool check(int tim,int l,int r)\n{\n    cout<<\"? \"<<ls<<\" \"<<tim<<\" \"<<r - l + 1<<\" \";\n    for(int i = l;i <= r;i++)\n    {\n        cout<<i<<\" \";\n    }\n    cout<<endl;\n    int op;\n    cin>>op;\n    return op;\n}\nset<int> nodes;\nbool vis[max_n];\nsigned main()\n{\n    ios::sync_with_stdio(0);\n\tcin.tie(0), cout.tie(0);\n    cin>>n;\n    int l = 1,r = n;\n    ls = 1;\n    while(l < r)\n    {\n        int mid = (l + r) >> 1;\n        if(check(1000,l,mid))\n        {\n            r = mid;\n        }\n        else\n        {\n            l = mid + 1;\n        }\n    }\n    nodes.insert(l);\n    vis[l] = 1;\n    ls = l;\n    for(int i = 1;i <= 62;i++)\n    {\n        l = 1,r = n;\n        while(l < r)\n        {\n            int mid = (l + r) >> 1;\n            if(check(1,l,mid))\n            {\n                r = mid;\n            }\n            else\n            {\n                l = mid + 1;\n            }\n        }\n        if(vis[l])\n        {\n            break;\n        }\n        vis[l] = 1;\n        nodes.insert(l);\n        ls = l;\n    }    \n    if(nodes.size() == 63)\n    {\n        int sz = nodes.size(); \n        while(true)\n        {\n            tot = 0;\n            for(int i = 1;i <= n;i++)\n            {\n                if(!vis[i])\n                {\n                    cout<<\"? \"<<i<<\" \"<<sz<<\" \"<<nodes.size();\n                    for(auto node:nodes)\n                    {\n                        cout<<\" \"<<node;\n                    }\n                    cout<<endl;\n                    int op;\n                    cin>>op;\n                    if(op)\n                    {\n                        vis[i] = 1;\n                        nodes.insert(i);\n                    }\n                }\n            }\n            sz *= 2;\n            if(sz > nodes.size())\n            {\n                break;\n            }\n        }\n    }\n    \n    for(int i = 1;i <= n;i++)\n    {\n        if(!vis[i])\n        {\n            cout<<\"? \"<<i<<\" \"<<1110<<\" \"<<nodes.size();\n            for(auto node:nodes)\n            {\n                cout<<\" \"<<node;\n            }\n            cout<<endl;\n            int op;\n            cin>>op;\n            if(op == 1)\n            {\n                nodes.insert(i);\n            }\n        }\n    }\n    cout<<\"! \"<<nodes.size()<<\" \";\n    for(auto node:nodes)\n    {\n        cout<<node<<\" \";\n    }\n    cout<<endl;\n    return 0;\n}\n```","source":"_posts/CF1854D Michael and Hotel 题解.md","raw":"---\ntitle: \"CF1854D Michael and Hotel 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF1854D Michael and Hotel 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF1854D)\n\n[Codeforces](https://codeforces.com/problemset/problem/1854/D)\n\n## Description\n\n这是一个交互题。\n\n有一个有 $n$ 个点的内向基环树森林，zlsim 位于 $1$ 号节点，请你通过以下操作求出哪些节点（包括 $1$）可以通过从这两点开始沿边行走若干步汇至一点。\n\n- 给出两个参数 $u,k$ 和点集 $S$，询问是否能够通过从 $u$ 出发走 $k$ 步达到任意 $S$ 中的节点。\n\n你最多可以询问 $2000$ 次。\n\n## Solution\n\n一个很显然的题意转化是我们要找到的是节点 $1$ 所在的连通块。这个连通块一定是一颗内向基环树，因此我们可以很容易的找到一个环上的点。具体的方法如下：\n\n- 将剩余点分等为两部分。\n  \n- 询问从 $1$ 出发，行进 $n$ 次之后是否能到达第一部分，若能到达，保留第一部分，若不能，保留第二部分。\n  \n- 重复上述步骤，只剩一个点时停止。\n\n每次减半，因此我们只需要 $ \\left \\lceil \\log_{2}500  \\right \\rceil = 9$ 次操作就能找到一个点。\n\n接下来我们不断按照上面的方式询问从上一个找到的在环上的点开始行进一次能到达的点，就能找到所有环上的点。假设环上有 $k$ 个点，我们需要 $9\\times k$ 次操作，这样不能满足题目条件。\n\n考虑如何加快找点的速度，我们可以进行以下操作：\n\n- 设已经找到的在连通块内的点集为 $S$，剩余点集为 $V$。\n  \n- $\\forall i \\in V$，询问从 $i$ 开始行进 $|S|$ 步能否到达 $S$，若能，将其加入 $S$。\n  \n- 如果这次新找到的点数量小于 $|S|$，结束查找。\n\n这样我们就能找到环上的点，但也会找到一些在该连通块内不属于环上的点，这对我们接下来的操作没有影响。\n\n现在环内所有点已经确定，我们可以用 $n - |S|$ 次询问确定剩余的点，具体的，对于每个不在 $S$ 中的点 $u$，询问从 $u$ 开始行进 $n$ 步能否到达 $S$，若能到达一定在该连通块内，否则不在该连通块内。\n\n假设我们通过二分找到 $p$ 个环上的点，需要的询问数如下：\n\n1. 二分：$9 \\times p$。\n\n2. 倍增找点：令 $p_{1} = p, \\forall i > 1,p_{i} = 2 p_{i - 1}$，则第 $i$ 次需要 $n - p_{i}$ 个询问，当 $p_{i} \\ge n$ 时结束（假设这时 $i = x$）。\n\n3. 最后需要 $n - p_{x}$ 次询问确定剩余点。\n\n当 $p$ 取 $63$ 时满足题意。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 511\n\nint n;\nint tot = 0;\nint ls = 1;\nbool check(int tim,int l,int r)\n{\n    cout<<\"? \"<<ls<<\" \"<<tim<<\" \"<<r - l + 1<<\" \";\n    for(int i = l;i <= r;i++)\n    {\n        cout<<i<<\" \";\n    }\n    cout<<endl;\n    int op;\n    cin>>op;\n    return op;\n}\nset<int> nodes;\nbool vis[max_n];\nsigned main()\n{\n    ios::sync_with_stdio(0);\n\tcin.tie(0), cout.tie(0);\n    cin>>n;\n    int l = 1,r = n;\n    ls = 1;\n    while(l < r)\n    {\n        int mid = (l + r) >> 1;\n        if(check(1000,l,mid))\n        {\n            r = mid;\n        }\n        else\n        {\n            l = mid + 1;\n        }\n    }\n    nodes.insert(l);\n    vis[l] = 1;\n    ls = l;\n    for(int i = 1;i <= 62;i++)\n    {\n        l = 1,r = n;\n        while(l < r)\n        {\n            int mid = (l + r) >> 1;\n            if(check(1,l,mid))\n            {\n                r = mid;\n            }\n            else\n            {\n                l = mid + 1;\n            }\n        }\n        if(vis[l])\n        {\n            break;\n        }\n        vis[l] = 1;\n        nodes.insert(l);\n        ls = l;\n    }    \n    if(nodes.size() == 63)\n    {\n        int sz = nodes.size(); \n        while(true)\n        {\n            tot = 0;\n            for(int i = 1;i <= n;i++)\n            {\n                if(!vis[i])\n                {\n                    cout<<\"? \"<<i<<\" \"<<sz<<\" \"<<nodes.size();\n                    for(auto node:nodes)\n                    {\n                        cout<<\" \"<<node;\n                    }\n                    cout<<endl;\n                    int op;\n                    cin>>op;\n                    if(op)\n                    {\n                        vis[i] = 1;\n                        nodes.insert(i);\n                    }\n                }\n            }\n            sz *= 2;\n            if(sz > nodes.size())\n            {\n                break;\n            }\n        }\n    }\n    \n    for(int i = 1;i <= n;i++)\n    {\n        if(!vis[i])\n        {\n            cout<<\"? \"<<i<<\" \"<<1110<<\" \"<<nodes.size();\n            for(auto node:nodes)\n            {\n                cout<<\" \"<<node;\n            }\n            cout<<endl;\n            int op;\n            cin>>op;\n            if(op == 1)\n            {\n                nodes.insert(i);\n            }\n        }\n    }\n    cout<<\"! \"<<nodes.size()<<\" \";\n    for(auto node:nodes)\n    {\n        cout<<node<<\" \";\n    }\n    cout<<endl;\n    return 0;\n}\n```","slug":"CF1854D Michael and Hotel 题解","published":1,"date":"2023-10-04T14:11:08.251Z","updated":"2023-10-04T14:11:08.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9z0001fosja3hcna2mg","content":"<h1 id=\"cf1854d-michael-and-hotel-题解\">CF1854D Michael and Hotel\r\n题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1854D\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1854/D\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>这是一个交互题。</p>\r\n<p>有一个有 <span class=\"math inline\">\\(n\\)</span>\r\n个点的内向基环树森林，zlsim 位于 <span class=\"math inline\">\\(1\\)</span>\r\n号节点，请你通过以下操作求出哪些节点（包括 <span\r\nclass=\"math inline\">\\(1\\)</span>）可以通过从这两点开始沿边行走若干步汇至一点。</p>\r\n<ul>\r\n<li>给出两个参数 <span class=\"math inline\">\\(u,k\\)</span> 和点集 <span\r\nclass=\"math inline\">\\(S\\)</span>，询问是否能够通过从 <span\r\nclass=\"math inline\">\\(u\\)</span> 出发走 <span\r\nclass=\"math inline\">\\(k\\)</span> 步达到任意 <span\r\nclass=\"math inline\">\\(S\\)</span> 中的节点。</li>\r\n</ul>\r\n<p>你最多可以询问 <span class=\"math inline\">\\(2000\\)</span> 次。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>一个很显然的题意转化是我们要找到的是节点 <span\r\nclass=\"math inline\">\\(1\\)</span>\r\n所在的连通块。这个连通块一定是一颗内向基环树，因此我们可以很容易的找到一个环上的点。具体的方法如下：</p>\r\n<ul>\r\n<li><p>将剩余点分等为两部分。</p></li>\r\n<li><p>询问从 <span class=\"math inline\">\\(1\\)</span> 出发，行进 <span\r\nclass=\"math inline\">\\(n\\)</span>\r\n次之后是否能到达第一部分，若能到达，保留第一部分，若不能，保留第二部分。</p></li>\r\n<li><p>重复上述步骤，只剩一个点时停止。</p></li>\r\n</ul>\r\n<p>每次减半，因此我们只需要 $ _{2}500 = 9$ 次操作就能找到一个点。</p>\r\n<p>接下来我们不断按照上面的方式询问从上一个找到的在环上的点开始行进一次能到达的点，就能找到所有环上的点。假设环上有\r\n<span class=\"math inline\">\\(k\\)</span> 个点，我们需要 <span\r\nclass=\"math inline\">\\(9\\times k\\)</span>\r\n次操作，这样不能满足题目条件。</p>\r\n<p>考虑如何加快找点的速度，我们可以进行以下操作：</p>\r\n<ul>\r\n<li><p>设已经找到的在连通块内的点集为 <span\r\nclass=\"math inline\">\\(S\\)</span>，剩余点集为 <span\r\nclass=\"math inline\">\\(V\\)</span>。</p></li>\r\n<li><p><span class=\"math inline\">\\(\\forall i \\in V\\)</span>，询问从\r\n<span class=\"math inline\">\\(i\\)</span> 开始行进 <span\r\nclass=\"math inline\">\\(|S|\\)</span> 步能否到达 <span\r\nclass=\"math inline\">\\(S\\)</span>，若能，将其加入 <span\r\nclass=\"math inline\">\\(S\\)</span>。</p></li>\r\n<li><p>如果这次新找到的点数量小于 <span\r\nclass=\"math inline\">\\(|S|\\)</span>，结束查找。</p></li>\r\n</ul>\r\n<p>这样我们就能找到环上的点，但也会找到一些在该连通块内不属于环上的点，这对我们接下来的操作没有影响。</p>\r\n<p>现在环内所有点已经确定，我们可以用 <span class=\"math inline\">\\(n -\r\n|S|\\)</span> 次询问确定剩余的点，具体的，对于每个不在 <span\r\nclass=\"math inline\">\\(S\\)</span> 中的点 <span\r\nclass=\"math inline\">\\(u\\)</span>，询问从 <span\r\nclass=\"math inline\">\\(u\\)</span> 开始行进 <span\r\nclass=\"math inline\">\\(n\\)</span> 步能否到达 <span\r\nclass=\"math inline\">\\(S\\)</span>，若能到达一定在该连通块内，否则不在该连通块内。</p>\r\n<p>假设我们通过二分找到 <span class=\"math inline\">\\(p\\)</span>\r\n个环上的点，需要的询问数如下：</p>\r\n<ol type=\"1\">\r\n<li><p>二分：<span class=\"math inline\">\\(9 \\times p\\)</span>。</p></li>\r\n<li><p>倍增找点：令 <span class=\"math inline\">\\(p_{1} = p, \\forall i\r\n&gt; 1,p_{i} = 2 p_{i - 1}\\)</span>，则第 <span\r\nclass=\"math inline\">\\(i\\)</span> 次需要 <span class=\"math inline\">\\(n -\r\np_{i}\\)</span> 个询问，当 <span class=\"math inline\">\\(p_{i} \\ge\r\nn\\)</span> 时结束（假设这时 <span class=\"math inline\">\\(i =\r\nx\\)</span>）。</p></li>\r\n<li><p>最后需要 <span class=\"math inline\">\\(n - p_{x}\\)</span>\r\n次询问确定剩余点。</p></li>\r\n</ol>\r\n<p>当 <span class=\"math inline\">\\(p\\)</span> 取 <span\r\nclass=\"math inline\">\\(63\\)</span> 时满足题意。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 511</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> ls = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> tim,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;? &quot;</span>&lt;&lt;ls&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;tim&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;r - l + <span class=\"number\">1</span>&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = l;i &lt;= r;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout&lt;&lt;i&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"type\">int</span> op;</span><br><span class=\"line\">    cin&gt;&gt;op;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> op;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">set&lt;<span class=\"type\">int</span>&gt; nodes;</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tcin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"type\">int</span> l = <span class=\"number\">1</span>,r = n;</span><br><span class=\"line\">    ls = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l &lt; r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(<span class=\"number\">1000</span>,l,mid))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            r = mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nodes.<span class=\"built_in\">insert</span>(l);</span><br><span class=\"line\">    vis[l] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    ls = l;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= <span class=\"number\">62</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        l = <span class=\"number\">1</span>,r = n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l &lt; r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(<span class=\"number\">1</span>,l,mid))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                r = mid;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[l])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vis[l] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        nodes.<span class=\"built_in\">insert</span>(l);</span><br><span class=\"line\">        ls = l;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nodes.<span class=\"built_in\">size</span>() == <span class=\"number\">63</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> sz = nodes.<span class=\"built_in\">size</span>(); </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!vis[i])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    cout&lt;&lt;<span class=\"string\">&quot;? &quot;</span>&lt;&lt;i&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;sz&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;nodes.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> node:nodes)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        cout&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;node;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    cout&lt;&lt;endl;</span><br><span class=\"line\">                    <span class=\"type\">int</span> op;</span><br><span class=\"line\">                    cin&gt;&gt;op;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(op)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        vis[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        nodes.<span class=\"built_in\">insert</span>(i);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sz *= <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sz &gt; nodes.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;? &quot;</span>&lt;&lt;i&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;<span class=\"number\">1110</span>&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;nodes.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> node:nodes)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cout&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;node;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cout&lt;&lt;endl;</span><br><span class=\"line\">            <span class=\"type\">int</span> op;</span><br><span class=\"line\">            cin&gt;&gt;op;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(op == <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                nodes.<span class=\"built_in\">insert</span>(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;! &quot;</span>&lt;&lt;nodes.<span class=\"built_in\">size</span>()&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> node:nodes)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout&lt;&lt;node&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf1854d-michael-and-hotel-题解\">CF1854D Michael and Hotel\r\n题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1854D\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1854/D\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>这是一个交互题。</p>\r\n<p>有一个有 <span class=\"math inline\">\\(n\\)</span>\r\n个点的内向基环树森林，zlsim 位于 <span class=\"math inline\">\\(1\\)</span>\r\n号节点，请你通过以下操作求出哪些节点（包括 <span\r\nclass=\"math inline\">\\(1\\)</span>）可以通过从这两点开始沿边行走若干步汇至一点。</p>\r\n<ul>\r\n<li>给出两个参数 <span class=\"math inline\">\\(u,k\\)</span> 和点集 <span\r\nclass=\"math inline\">\\(S\\)</span>，询问是否能够通过从 <span\r\nclass=\"math inline\">\\(u\\)</span> 出发走 <span\r\nclass=\"math inline\">\\(k\\)</span> 步达到任意 <span\r\nclass=\"math inline\">\\(S\\)</span> 中的节点。</li>\r\n</ul>\r\n<p>你最多可以询问 <span class=\"math inline\">\\(2000\\)</span> 次。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>一个很显然的题意转化是我们要找到的是节点 <span\r\nclass=\"math inline\">\\(1\\)</span>\r\n所在的连通块。这个连通块一定是一颗内向基环树，因此我们可以很容易的找到一个环上的点。具体的方法如下：</p>\r\n<ul>\r\n<li><p>将剩余点分等为两部分。</p></li>\r\n<li><p>询问从 <span class=\"math inline\">\\(1\\)</span> 出发，行进 <span\r\nclass=\"math inline\">\\(n\\)</span>\r\n次之后是否能到达第一部分，若能到达，保留第一部分，若不能，保留第二部分。</p></li>\r\n<li><p>重复上述步骤，只剩一个点时停止。</p></li>\r\n</ul>\r\n<p>每次减半，因此我们只需要 $ _{2}500 = 9$ 次操作就能找到一个点。</p>\r\n<p>接下来我们不断按照上面的方式询问从上一个找到的在环上的点开始行进一次能到达的点，就能找到所有环上的点。假设环上有\r\n<span class=\"math inline\">\\(k\\)</span> 个点，我们需要 <span\r\nclass=\"math inline\">\\(9\\times k\\)</span>\r\n次操作，这样不能满足题目条件。</p>\r\n<p>考虑如何加快找点的速度，我们可以进行以下操作：</p>\r\n<ul>\r\n<li><p>设已经找到的在连通块内的点集为 <span\r\nclass=\"math inline\">\\(S\\)</span>，剩余点集为 <span\r\nclass=\"math inline\">\\(V\\)</span>。</p></li>\r\n<li><p><span class=\"math inline\">\\(\\forall i \\in V\\)</span>，询问从\r\n<span class=\"math inline\">\\(i\\)</span> 开始行进 <span\r\nclass=\"math inline\">\\(|S|\\)</span> 步能否到达 <span\r\nclass=\"math inline\">\\(S\\)</span>，若能，将其加入 <span\r\nclass=\"math inline\">\\(S\\)</span>。</p></li>\r\n<li><p>如果这次新找到的点数量小于 <span\r\nclass=\"math inline\">\\(|S|\\)</span>，结束查找。</p></li>\r\n</ul>\r\n<p>这样我们就能找到环上的点，但也会找到一些在该连通块内不属于环上的点，这对我们接下来的操作没有影响。</p>\r\n<p>现在环内所有点已经确定，我们可以用 <span class=\"math inline\">\\(n -\r\n|S|\\)</span> 次询问确定剩余的点，具体的，对于每个不在 <span\r\nclass=\"math inline\">\\(S\\)</span> 中的点 <span\r\nclass=\"math inline\">\\(u\\)</span>，询问从 <span\r\nclass=\"math inline\">\\(u\\)</span> 开始行进 <span\r\nclass=\"math inline\">\\(n\\)</span> 步能否到达 <span\r\nclass=\"math inline\">\\(S\\)</span>，若能到达一定在该连通块内，否则不在该连通块内。</p>\r\n<p>假设我们通过二分找到 <span class=\"math inline\">\\(p\\)</span>\r\n个环上的点，需要的询问数如下：</p>\r\n<ol type=\"1\">\r\n<li><p>二分：<span class=\"math inline\">\\(9 \\times p\\)</span>。</p></li>\r\n<li><p>倍增找点：令 <span class=\"math inline\">\\(p_{1} = p, \\forall i\r\n&gt; 1,p_{i} = 2 p_{i - 1}\\)</span>，则第 <span\r\nclass=\"math inline\">\\(i\\)</span> 次需要 <span class=\"math inline\">\\(n -\r\np_{i}\\)</span> 个询问，当 <span class=\"math inline\">\\(p_{i} \\ge\r\nn\\)</span> 时结束（假设这时 <span class=\"math inline\">\\(i =\r\nx\\)</span>）。</p></li>\r\n<li><p>最后需要 <span class=\"math inline\">\\(n - p_{x}\\)</span>\r\n次询问确定剩余点。</p></li>\r\n</ol>\r\n<p>当 <span class=\"math inline\">\\(p\\)</span> 取 <span\r\nclass=\"math inline\">\\(63\\)</span> 时满足题意。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 511</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> ls = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> tim,<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;? &quot;</span>&lt;&lt;ls&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;tim&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;r - l + <span class=\"number\">1</span>&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = l;i &lt;= r;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout&lt;&lt;i&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"type\">int</span> op;</span><br><span class=\"line\">    cin&gt;&gt;op;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> op;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">set&lt;<span class=\"type\">int</span>&gt; nodes;</span><br><span class=\"line\"><span class=\"type\">bool</span> vis[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tcin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>), cout.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"type\">int</span> l = <span class=\"number\">1</span>,r = n;</span><br><span class=\"line\">    ls = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(l &lt; r)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(<span class=\"number\">1000</span>,l,mid))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            r = mid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nodes.<span class=\"built_in\">insert</span>(l);</span><br><span class=\"line\">    vis[l] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    ls = l;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= <span class=\"number\">62</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        l = <span class=\"number\">1</span>,r = n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l &lt; r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid = (l + r) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(<span class=\"number\">1</span>,l,mid))</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                r = mid;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vis[l])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vis[l] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        nodes.<span class=\"built_in\">insert</span>(l);</span><br><span class=\"line\">        ls = l;</span><br><span class=\"line\">    &#125;    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nodes.<span class=\"built_in\">size</span>() == <span class=\"number\">63</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> sz = nodes.<span class=\"built_in\">size</span>(); </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!vis[i])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    cout&lt;&lt;<span class=\"string\">&quot;? &quot;</span>&lt;&lt;i&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;sz&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;nodes.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">                    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> node:nodes)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        cout&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;node;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    cout&lt;&lt;endl;</span><br><span class=\"line\">                    <span class=\"type\">int</span> op;</span><br><span class=\"line\">                    cin&gt;&gt;op;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(op)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        vis[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                        nodes.<span class=\"built_in\">insert</span>(i);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sz *= <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sz &gt; nodes.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;? &quot;</span>&lt;&lt;i&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;<span class=\"number\">1110</span>&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;nodes.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> node:nodes)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cout&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;node;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cout&lt;&lt;endl;</span><br><span class=\"line\">            <span class=\"type\">int</span> op;</span><br><span class=\"line\">            cin&gt;&gt;op;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(op == <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                nodes.<span class=\"built_in\">insert</span>(i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;! &quot;</span>&lt;&lt;nodes.<span class=\"built_in\">size</span>()&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> node:nodes)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout&lt;&lt;node&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1855B Longest Divisors Interval 题解","mathjax":true,"_content":"\n# CF1855B Longest Divisors Interval 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF1855B)\n\n[Codeforces](https://codeforces.com/problemset/problem/1855/B)\n\n## Description\n\n给出一个正整数 $n$，求出一个区间 $[l,r]$ 使得区间内的每一个整数都是 $n$ 的因数且该区间的大小最大。输出这个区间的大小。\n\n多测。数据范围：$1 \\leq n \\leq 10^{18}, 1 \\leq t \\leq 10^4$。\n\n\n## Solution\n\n这道题的主要难点在于找到一个性质：对于任意一个数 $n$，另 $x$ 是使得 $n \\bmod x \\ne 0$ 的最小的正整数，则答案为 $x - 1$。\n\n引理一： 对于任意区间 $[L,R]$ 有 $\\forall i \\in [1,R - L + 1]$，$\\exists j \\in [L,R]$ 满足 $j$ 是 $i$ 的倍数。\n\n证明可以考虑 $[L,R]$ 内所有数对 $i$ 取模，由于余数在 $0 \\sim i- 1$ 内递增循环，周期为 $i$，且 $i \\leq R - L + 1$，因此一定存在一个余数为 $0$ 的。\n\n引理二：若区间 $[L,R]$ 满足题目条件，则区间 $[1,R - L + 1]$ 满足题目条件。\n\n根据引理一：\n\n$$\\forall i \\in [1,R - L + 1] , \\exists j \\in [L,R], j \\bmod n = 0$$\n\n同时因为区间 $[L,R]$ 满足条件，有：\n\n$$\\forall j \\in [L,R],n \\bmod j = 0$$\n\n结合上述两条以及取模的性质，易得：\n\n$$\\forall i \\in [1,R - L + 1],n \\bmod i = 0$$\n\n因此区间 $[1,R - L + 1]$ 满足条件。\n\n所以我们只需要考虑左端点为 $1$ 的区间即可找到答案。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint T;\nint n;\nvoid solution()\n{\n    read(n);\n    for (int i = 1; i <= n; i++)\n    {\n        if (n % i)\n        {\n            writeln(i - 1);\n            return;\n        }\n    }\n    writeln(n);\n}\nsigned main()\n{\n    read(T);\n    while (T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```","source":"_posts/CF1855B Longest Divisors Interval 题解.md","raw":"---\ntitle: \"CF1855B Longest Divisors Interval 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF1855B Longest Divisors Interval 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF1855B)\n\n[Codeforces](https://codeforces.com/problemset/problem/1855/B)\n\n## Description\n\n给出一个正整数 $n$，求出一个区间 $[l,r]$ 使得区间内的每一个整数都是 $n$ 的因数且该区间的大小最大。输出这个区间的大小。\n\n多测。数据范围：$1 \\leq n \\leq 10^{18}, 1 \\leq t \\leq 10^4$。\n\n\n## Solution\n\n这道题的主要难点在于找到一个性质：对于任意一个数 $n$，另 $x$ 是使得 $n \\bmod x \\ne 0$ 的最小的正整数，则答案为 $x - 1$。\n\n引理一： 对于任意区间 $[L,R]$ 有 $\\forall i \\in [1,R - L + 1]$，$\\exists j \\in [L,R]$ 满足 $j$ 是 $i$ 的倍数。\n\n证明可以考虑 $[L,R]$ 内所有数对 $i$ 取模，由于余数在 $0 \\sim i- 1$ 内递增循环，周期为 $i$，且 $i \\leq R - L + 1$，因此一定存在一个余数为 $0$ 的。\n\n引理二：若区间 $[L,R]$ 满足题目条件，则区间 $[1,R - L + 1]$ 满足题目条件。\n\n根据引理一：\n\n$$\\forall i \\in [1,R - L + 1] , \\exists j \\in [L,R], j \\bmod n = 0$$\n\n同时因为区间 $[L,R]$ 满足条件，有：\n\n$$\\forall j \\in [L,R],n \\bmod j = 0$$\n\n结合上述两条以及取模的性质，易得：\n\n$$\\forall i \\in [1,R - L + 1],n \\bmod i = 0$$\n\n因此区间 $[1,R - L + 1]$ 满足条件。\n\n所以我们只需要考虑左端点为 $1$ 的区间即可找到答案。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint T;\nint n;\nvoid solution()\n{\n    read(n);\n    for (int i = 1; i <= n; i++)\n    {\n        if (n % i)\n        {\n            writeln(i - 1);\n            return;\n        }\n    }\n    writeln(n);\n}\nsigned main()\n{\n    read(T);\n    while (T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```","slug":"CF1855B Longest Divisors Interval 题解","published":1,"date":"2023-10-04T14:11:08.251Z","updated":"2023-10-04T14:11:08.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9z1001hosjab39bai37","content":"<h1 id=\"cf1855b-longest-divisors-interval-题解\">CF1855B Longest Divisors\r\nInterval 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1855B\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1855/B\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给出一个正整数 <span class=\"math inline\">\\(n\\)</span>，求出一个区间\r\n<span class=\"math inline\">\\([l,r]\\)</span> 使得区间内的每一个整数都是\r\n<span class=\"math inline\">\\(n\\)</span>\r\n的因数且该区间的大小最大。输出这个区间的大小。</p>\r\n<p>多测。数据范围：<span class=\"math inline\">\\(1 \\leq n \\leq 10^{18}, 1\r\n\\leq t \\leq 10^4\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>这道题的主要难点在于找到一个性质：对于任意一个数 <span\r\nclass=\"math inline\">\\(n\\)</span>，另 <span\r\nclass=\"math inline\">\\(x\\)</span> 是使得 <span class=\"math inline\">\\(n\r\n\\bmod x \\ne 0\\)</span> 的最小的正整数，则答案为 <span\r\nclass=\"math inline\">\\(x - 1\\)</span>。</p>\r\n<p>引理一： 对于任意区间 <span class=\"math inline\">\\([L,R]\\)</span> 有\r\n<span class=\"math inline\">\\(\\forall i \\in [1,R - L + 1]\\)</span>，<span\r\nclass=\"math inline\">\\(\\exists j \\in [L,R]\\)</span> 满足 <span\r\nclass=\"math inline\">\\(j\\)</span> 是 <span\r\nclass=\"math inline\">\\(i\\)</span> 的倍数。</p>\r\n<p>证明可以考虑 <span class=\"math inline\">\\([L,R]\\)</span> 内所有数对\r\n<span class=\"math inline\">\\(i\\)</span> 取模，由于余数在 <span\r\nclass=\"math inline\">\\(0 \\sim i- 1\\)</span> 内递增循环，周期为 <span\r\nclass=\"math inline\">\\(i\\)</span>，且 <span class=\"math inline\">\\(i \\leq\r\nR - L + 1\\)</span>，因此一定存在一个余数为 <span\r\nclass=\"math inline\">\\(0\\)</span> 的。</p>\r\n<p>引理二：若区间 <span class=\"math inline\">\\([L,R]\\)</span>\r\n满足题目条件，则区间 <span class=\"math inline\">\\([1,R - L + 1]\\)</span>\r\n满足题目条件。</p>\r\n<p>根据引理一：</p>\r\n<p><span class=\"math display\">\\[\\forall i \\in [1,R - L + 1] , \\exists j\r\n\\in [L,R], j \\bmod n = 0\\]</span></p>\r\n<p>同时因为区间 <span class=\"math inline\">\\([L,R]\\)</span>\r\n满足条件，有：</p>\r\n<p><span class=\"math display\">\\[\\forall j \\in [L,R],n \\bmod j =\r\n0\\]</span></p>\r\n<p>结合上述两条以及取模的性质，易得：</p>\r\n<p><span class=\"math display\">\\[\\forall i \\in [1,R - L + 1],n \\bmod i =\r\n0\\]</span></p>\r\n<p>因此区间 <span class=\"math inline\">\\([1,R - L + 1]\\)</span>\r\n满足条件。</p>\r\n<p>所以我们只需要考虑左端点为 <span class=\"math inline\">\\(1\\)</span>\r\n的区间即可找到答案。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n % i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">writeln</span>(i - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf1855b-longest-divisors-interval-题解\">CF1855B Longest Divisors\r\nInterval 题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1855B\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1855/B\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给出一个正整数 <span class=\"math inline\">\\(n\\)</span>，求出一个区间\r\n<span class=\"math inline\">\\([l,r]\\)</span> 使得区间内的每一个整数都是\r\n<span class=\"math inline\">\\(n\\)</span>\r\n的因数且该区间的大小最大。输出这个区间的大小。</p>\r\n<p>多测。数据范围：<span class=\"math inline\">\\(1 \\leq n \\leq 10^{18}, 1\r\n\\leq t \\leq 10^4\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>这道题的主要难点在于找到一个性质：对于任意一个数 <span\r\nclass=\"math inline\">\\(n\\)</span>，另 <span\r\nclass=\"math inline\">\\(x\\)</span> 是使得 <span class=\"math inline\">\\(n\r\n\\bmod x \\ne 0\\)</span> 的最小的正整数，则答案为 <span\r\nclass=\"math inline\">\\(x - 1\\)</span>。</p>\r\n<p>引理一： 对于任意区间 <span class=\"math inline\">\\([L,R]\\)</span> 有\r\n<span class=\"math inline\">\\(\\forall i \\in [1,R - L + 1]\\)</span>，<span\r\nclass=\"math inline\">\\(\\exists j \\in [L,R]\\)</span> 满足 <span\r\nclass=\"math inline\">\\(j\\)</span> 是 <span\r\nclass=\"math inline\">\\(i\\)</span> 的倍数。</p>\r\n<p>证明可以考虑 <span class=\"math inline\">\\([L,R]\\)</span> 内所有数对\r\n<span class=\"math inline\">\\(i\\)</span> 取模，由于余数在 <span\r\nclass=\"math inline\">\\(0 \\sim i- 1\\)</span> 内递增循环，周期为 <span\r\nclass=\"math inline\">\\(i\\)</span>，且 <span class=\"math inline\">\\(i \\leq\r\nR - L + 1\\)</span>，因此一定存在一个余数为 <span\r\nclass=\"math inline\">\\(0\\)</span> 的。</p>\r\n<p>引理二：若区间 <span class=\"math inline\">\\([L,R]\\)</span>\r\n满足题目条件，则区间 <span class=\"math inline\">\\([1,R - L + 1]\\)</span>\r\n满足题目条件。</p>\r\n<p>根据引理一：</p>\r\n<p><span class=\"math display\">\\[\\forall i \\in [1,R - L + 1] , \\exists j\r\n\\in [L,R], j \\bmod n = 0\\]</span></p>\r\n<p>同时因为区间 <span class=\"math inline\">\\([L,R]\\)</span>\r\n满足条件，有：</p>\r\n<p><span class=\"math display\">\\[\\forall j \\in [L,R],n \\bmod j =\r\n0\\]</span></p>\r\n<p>结合上述两条以及取模的性质，易得：</p>\r\n<p><span class=\"math display\">\\[\\forall i \\in [1,R - L + 1],n \\bmod i =\r\n0\\]</span></p>\r\n<p>因此区间 <span class=\"math inline\">\\([1,R - L + 1]\\)</span>\r\n满足条件。</p>\r\n<p>所以我们只需要考虑左端点为 <span class=\"math inline\">\\(1\\)</span>\r\n的区间即可找到答案。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n % i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">writeln</span>(i - <span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1856E PermuTree 题解","mathjax":true,"_content":"\n# CF1856E PermuTree 题解\n\n<!-- more -->\n\n该题解同时包括 E1 和 E2 的解法。\n\n## Links\n\n[洛谷 E1](https://www.luogu.com.cn/problem/CF1856E1) [洛谷 E2](https://www.luogu.com.cn/problem/CF1856E2)\n\n[Codeforces E1](https://codeforces.com/problemset/problem/1856/E1) [Codeforces E2](https://codeforces.com/problemset/problem/1856/E2)\n\n## Description\n\n给定一棵以 $1$ 为根的有根树，你需要给出一个 $1$ 到 $n$ 的排列 $a$，最大化二元组 $(u,v)$ 的数量，满足 $a_u < a_{\\rm\n{lca(a_u,a_v)}} < a_v$，输出这个最大值。\n\n## Solution\n\n### Solution of easy version\n\n考虑什么时候会造成贡献，显然对于一个节点，将以它儿子为根的所有子树分为两部分，一部分权值大于该点权值，另一部分权值小于该点权值，贡献为这两部分大小乘积。\n\n因此我们的需要做的就是尽可能平均的将子树平分。是一个简单的 $O(n^2)$ 01 背包，不在赘述。\n\n### Solution of hard version\n\n这个背包问题并没有 $O(n \\log n)$ 的做法，那么我们只能进行二进制优化了，然而复杂度是 $O(n \\sqrt n)$ 的，于是我们用 `bitset` 将复杂度变为 $O(\\dfrac{n \\sqrt n}{\\omega})$。\n\n需要注意的是如果对于所有数据都开一个很大的 `bitset` 仍然会 TLE。只能动态确定大小，但 `bitset` 不支持这么做。有两种解决方案。\n\n- 按照 [@ღꦿ࿐](https://www.luogu.com.cn/user/161697) 大佬的方式，手动倍增写出各个大小的 `bitset`，然后手动判断用哪个。\n\n- 使用 C++ 模板的语法，倍增实现。大概长这个样子：\n\n```cpp\ntemplate<int len = 1>void sol(int y)\n{\n    if(len <= siz[y])\n    {\n        return sol<min(len*2,(long long)max_n)>(y);\n    }\n    bitset<len> bst;\n    // other work\n}\n```\n\n为了方便我用了第二个方法，并且成功抢到了最优解。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define max_n 1001010\n#define max(AA,BB) ((AA>BB)?(AA):(BB))\n#define min(AA,BB) ((AA<BB)?(AA):(BB))\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(long long x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(long long x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(long long x)\n{\n    write_(x);\n    putchar('\\n');\n}\nstruct node\n{\n    int to,nxt;\n}edge[max_n];\nint head[max_n],tot;\nvoid add(int u,int v)\n{\n    edge[++tot].to = v;\n    edge[tot].nxt = head[u];\n    head[u] = tot;\n}\nint son[max_n],siz[max_n],fa[max_n];\nint n;\nlong long res,ans;\nvector<int> wp,ap;\nint cnt[max_n];\ntemplate<int len = 1>void sol(int y)\n{\n    if(len <= siz[y])\n    {\n        return sol<min(len*2,(long long)max_n)>(y);\n    }\n    bitset<len> bst;\n    bst = 0;\n    res = 0;\n    bst[0] = 1;\n    for(int v:wp)\n    {\n        bst |= bst << v;\n    }\n    for(int i = 0;i <= (siz[y] - 1)/2;i++)\n    {\n        if(bst[i])\n        {\n            res = max(res,(long long)i * (long long)(siz[y] - i - 1));\n        }\n    }\n}\nvoid solve(int u)\n{\n    for(int p:ap)\n    {\n        cnt[p] = 0;\n    }\n    ap.clear();\n    for(int i = head[u];i;i = edge[i].nxt)\n    {\n        int v = edge[i].to;\n        cnt[siz[v]]++;\n        ap.push_back(siz[v]);\n    }\n    sort(ap.begin(),ap.end());\n    ap.erase(unique(ap.begin(),ap.end()),ap.end());\n    wp.clear();\n    for(int v:ap)\n    {\n        int c = 1,nw = cnt[v];\n        while(nw)\n        {\n            wp.push_back(min(nw,c)*v);\n            nw -= min(nw,c);\n            c<<=1;\n        }\n    }\n    sol(u);\n    return;\n}\nvoid dfs(int u)\n{\n    // find the max_size subtree\n    for(int i = head[u];i;i = edge[i].nxt)\n    {\n        int v = edge[i].to;\n        if(siz[v] > siz[son[u]])\n        {\n            son[u] = v;\n        }\n    }\n    // if the max_size subtree has more than half of the node on subtree_u\n    if((siz[son[u]] << 1LL) >= (siz[u] - 1))\n    {\n        // then the ans is size[son[u]] * num_of_other_subtree\n        ans += (long long)siz[son[u]] * (long long)(siz[u] - siz[son[u]] - 1);\n    }\n    else\n    {\n        solve(u);\n        ans += res;\n    }\n    for(int i = head[u];i;i = edge[i].nxt)\n    {\n        int v = edge[i].to;\n        dfs(v);\n    }\n}\nsigned main()\n{\n    read(n);\n    for(int i = 2;i <= n;i++)\n    {\n        read(fa[i]);\n        add(fa[i],i);\n    }\n    for(int i = n;i;i--)\n    {\n        siz[i]++;\n        siz[fa[i]] += siz[i];\n    }\n    siz[0] = 0;\n    dfs(1);\n    writeln(ans);\n    return 0;\n}\n```","source":"_posts/CF1856E PermuTree 题解.md","raw":"---\ntitle: \"CF1856E PermuTree 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF1856E PermuTree 题解\n\n<!-- more -->\n\n该题解同时包括 E1 和 E2 的解法。\n\n## Links\n\n[洛谷 E1](https://www.luogu.com.cn/problem/CF1856E1) [洛谷 E2](https://www.luogu.com.cn/problem/CF1856E2)\n\n[Codeforces E1](https://codeforces.com/problemset/problem/1856/E1) [Codeforces E2](https://codeforces.com/problemset/problem/1856/E2)\n\n## Description\n\n给定一棵以 $1$ 为根的有根树，你需要给出一个 $1$ 到 $n$ 的排列 $a$，最大化二元组 $(u,v)$ 的数量，满足 $a_u < a_{\\rm\n{lca(a_u,a_v)}} < a_v$，输出这个最大值。\n\n## Solution\n\n### Solution of easy version\n\n考虑什么时候会造成贡献，显然对于一个节点，将以它儿子为根的所有子树分为两部分，一部分权值大于该点权值，另一部分权值小于该点权值，贡献为这两部分大小乘积。\n\n因此我们的需要做的就是尽可能平均的将子树平分。是一个简单的 $O(n^2)$ 01 背包，不在赘述。\n\n### Solution of hard version\n\n这个背包问题并没有 $O(n \\log n)$ 的做法，那么我们只能进行二进制优化了，然而复杂度是 $O(n \\sqrt n)$ 的，于是我们用 `bitset` 将复杂度变为 $O(\\dfrac{n \\sqrt n}{\\omega})$。\n\n需要注意的是如果对于所有数据都开一个很大的 `bitset` 仍然会 TLE。只能动态确定大小，但 `bitset` 不支持这么做。有两种解决方案。\n\n- 按照 [@ღꦿ࿐](https://www.luogu.com.cn/user/161697) 大佬的方式，手动倍增写出各个大小的 `bitset`，然后手动判断用哪个。\n\n- 使用 C++ 模板的语法，倍增实现。大概长这个样子：\n\n```cpp\ntemplate<int len = 1>void sol(int y)\n{\n    if(len <= siz[y])\n    {\n        return sol<min(len*2,(long long)max_n)>(y);\n    }\n    bitset<len> bst;\n    // other work\n}\n```\n\n为了方便我用了第二个方法，并且成功抢到了最优解。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define max_n 1001010\n#define max(AA,BB) ((AA>BB)?(AA):(BB))\n#define min(AA,BB) ((AA<BB)?(AA):(BB))\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(long long x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(long long x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(long long x)\n{\n    write_(x);\n    putchar('\\n');\n}\nstruct node\n{\n    int to,nxt;\n}edge[max_n];\nint head[max_n],tot;\nvoid add(int u,int v)\n{\n    edge[++tot].to = v;\n    edge[tot].nxt = head[u];\n    head[u] = tot;\n}\nint son[max_n],siz[max_n],fa[max_n];\nint n;\nlong long res,ans;\nvector<int> wp,ap;\nint cnt[max_n];\ntemplate<int len = 1>void sol(int y)\n{\n    if(len <= siz[y])\n    {\n        return sol<min(len*2,(long long)max_n)>(y);\n    }\n    bitset<len> bst;\n    bst = 0;\n    res = 0;\n    bst[0] = 1;\n    for(int v:wp)\n    {\n        bst |= bst << v;\n    }\n    for(int i = 0;i <= (siz[y] - 1)/2;i++)\n    {\n        if(bst[i])\n        {\n            res = max(res,(long long)i * (long long)(siz[y] - i - 1));\n        }\n    }\n}\nvoid solve(int u)\n{\n    for(int p:ap)\n    {\n        cnt[p] = 0;\n    }\n    ap.clear();\n    for(int i = head[u];i;i = edge[i].nxt)\n    {\n        int v = edge[i].to;\n        cnt[siz[v]]++;\n        ap.push_back(siz[v]);\n    }\n    sort(ap.begin(),ap.end());\n    ap.erase(unique(ap.begin(),ap.end()),ap.end());\n    wp.clear();\n    for(int v:ap)\n    {\n        int c = 1,nw = cnt[v];\n        while(nw)\n        {\n            wp.push_back(min(nw,c)*v);\n            nw -= min(nw,c);\n            c<<=1;\n        }\n    }\n    sol(u);\n    return;\n}\nvoid dfs(int u)\n{\n    // find the max_size subtree\n    for(int i = head[u];i;i = edge[i].nxt)\n    {\n        int v = edge[i].to;\n        if(siz[v] > siz[son[u]])\n        {\n            son[u] = v;\n        }\n    }\n    // if the max_size subtree has more than half of the node on subtree_u\n    if((siz[son[u]] << 1LL) >= (siz[u] - 1))\n    {\n        // then the ans is size[son[u]] * num_of_other_subtree\n        ans += (long long)siz[son[u]] * (long long)(siz[u] - siz[son[u]] - 1);\n    }\n    else\n    {\n        solve(u);\n        ans += res;\n    }\n    for(int i = head[u];i;i = edge[i].nxt)\n    {\n        int v = edge[i].to;\n        dfs(v);\n    }\n}\nsigned main()\n{\n    read(n);\n    for(int i = 2;i <= n;i++)\n    {\n        read(fa[i]);\n        add(fa[i],i);\n    }\n    for(int i = n;i;i--)\n    {\n        siz[i]++;\n        siz[fa[i]] += siz[i];\n    }\n    siz[0] = 0;\n    dfs(1);\n    writeln(ans);\n    return 0;\n}\n```","slug":"CF1856E PermuTree 题解","published":1,"date":"2023-10-04T14:11:08.251Z","updated":"2023-10-04T14:11:08.251Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9z3001josja9tjb0gzt","content":"<h1 id=\"cf1856e-permutree-题解\">CF1856E PermuTree 题解</h1>\r\n<span id=\"more\"></span>\r\n<p>该题解同时包括 E1 和 E2 的解法。</p>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1856E1\">洛谷 E1</a> <a\r\nhref=\"https://www.luogu.com.cn/problem/CF1856E2\">洛谷 E2</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1856/E1\">Codeforces\r\nE1</a> <a\r\nhref=\"https://codeforces.com/problemset/problem/1856/E2\">Codeforces\r\nE2</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定一棵以 <span class=\"math inline\">\\(1\\)</span>\r\n为根的有根树，你需要给出一个 <span class=\"math inline\">\\(1\\)</span> 到\r\n<span class=\"math inline\">\\(n\\)</span> 的排列 <span\r\nclass=\"math inline\">\\(a\\)</span>，最大化二元组 <span\r\nclass=\"math inline\">\\((u,v)\\)</span> 的数量，满足 <span\r\nclass=\"math inline\">\\(a_u &lt; a_{\\rm {lca(a_u,a_v)}} &lt;\r\na_v\\)</span>，输出这个最大值。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<h3 id=\"solution-of-easy-version\">Solution of easy version</h3>\r\n<p>考虑什么时候会造成贡献，显然对于一个节点，将以它儿子为根的所有子树分为两部分，一部分权值大于该点权值，另一部分权值小于该点权值，贡献为这两部分大小乘积。</p>\r\n<p>因此我们的需要做的就是尽可能平均的将子树平分。是一个简单的 <span\r\nclass=\"math inline\">\\(O(n^2)\\)</span> 01 背包，不在赘述。</p>\r\n<h3 id=\"solution-of-hard-version\">Solution of hard version</h3>\r\n<p>这个背包问题并没有 <span class=\"math inline\">\\(O(n \\log n)\\)</span>\r\n的做法，那么我们只能进行二进制优化了，然而复杂度是 <span\r\nclass=\"math inline\">\\(O(n \\sqrt n)\\)</span> 的，于是我们用\r\n<code>bitset</code> 将复杂度变为 <span class=\"math inline\">\\(O(\\dfrac{n\r\n\\sqrt n}{\\omega})\\)</span>。</p>\r\n<p>需要注意的是如果对于所有数据都开一个很大的 <code>bitset</code> 仍然会\r\nTLE。只能动态确定大小，但 <code>bitset</code>\r\n不支持这么做。有两种解决方案。</p>\r\n<ul>\r\n<li><p>按照 <a href=\"https://www.luogu.com.cn/user/161697\"><span\r\nclass=\"citation\" data-cites=\"ღ\">@ღ</span>ꦿ࿐</a>\r\n大佬的方式，手动倍增写出各个大小的\r\n<code>bitset</code>，然后手动判断用哪个。</p></li>\r\n<li><p>使用 C++ 模板的语法，倍增实现。大概长这个样子：</p></li>\r\n</ul>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"type\">int</span> len = <span class=\"number\">1</span>&gt;<span class=\"type\">void</span> <span class=\"built_in\">sol</span>(<span class=\"type\">int</span> y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len &lt;= siz[y])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sol</span>&lt;<span class=\"built_in\">min</span>(len*<span class=\"number\">2</span>,(<span class=\"type\">long</span> <span class=\"type\">long</span>)max_n)&gt;(y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bitset&lt;len&gt; bst;</span><br><span class=\"line\">    <span class=\"comment\">// other work</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>为了方便我用了第二个方法，并且成功抢到了最优解。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 1001010</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max(AA,BB) ((AA&gt;BB)?(AA):(BB))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> min(AA,BB) ((AA&lt;BB)?(AA):(BB))</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> to,nxt;</span><br><span class=\"line\">&#125;edge[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> head[max_n],tot;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edge[++tot].to = v;</span><br><span class=\"line\">    edge[tot].nxt = head[u];</span><br><span class=\"line\">    head[u] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> son[max_n],siz[max_n],fa[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> res,ans;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; wp,ap;</span><br><span class=\"line\"><span class=\"type\">int</span> cnt[max_n];</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"type\">int</span> len = <span class=\"number\">1</span>&gt;<span class=\"type\">void</span> <span class=\"built_in\">sol</span>(<span class=\"type\">int</span> y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len &lt;= siz[y])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sol</span>&lt;<span class=\"built_in\">min</span>(len*<span class=\"number\">2</span>,(<span class=\"type\">long</span> <span class=\"type\">long</span>)max_n)&gt;(y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bitset&lt;len&gt; bst;</span><br><span class=\"line\">    bst = <span class=\"number\">0</span>;</span><br><span class=\"line\">    res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    bst[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> v:wp)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        bst |= bst &lt;&lt; v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt;= (siz[y] - <span class=\"number\">1</span>)/<span class=\"number\">2</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(bst[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res = <span class=\"built_in\">max</span>(res,(<span class=\"type\">long</span> <span class=\"type\">long</span>)i * (<span class=\"type\">long</span> <span class=\"type\">long</span>)(siz[y] - i - <span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> p:ap)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cnt[p] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ap.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = head[u];i;i = edge[i].nxt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = edge[i].to;</span><br><span class=\"line\">        cnt[siz[v]]++;</span><br><span class=\"line\">        ap.<span class=\"built_in\">push_back</span>(siz[v]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(ap.<span class=\"built_in\">begin</span>(),ap.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    ap.<span class=\"built_in\">erase</span>(<span class=\"built_in\">unique</span>(ap.<span class=\"built_in\">begin</span>(),ap.<span class=\"built_in\">end</span>()),ap.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    wp.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> v:ap)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> c = <span class=\"number\">1</span>,nw = cnt[v];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(nw)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            wp.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">min</span>(nw,c)*v);</span><br><span class=\"line\">            nw -= <span class=\"built_in\">min</span>(nw,c);</span><br><span class=\"line\">            c&lt;&lt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sol</span>(u);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// find the max_size subtree</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = head[u];i;i = edge[i].nxt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(siz[v] &gt; siz[son[u]])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            son[u] = v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// if the max_size subtree has more than half of the node on subtree_u</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>((siz[son[u]] &lt;&lt; <span class=\"number\">1LL</span>) &gt;= (siz[u] - <span class=\"number\">1</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// then the ans is size[son[u]] * num_of_other_subtree</span></span><br><span class=\"line\">        ans += (<span class=\"type\">long</span> <span class=\"type\">long</span>)siz[son[u]] * (<span class=\"type\">long</span> <span class=\"type\">long</span>)(siz[u] - siz[son[u]] - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>(u);</span><br><span class=\"line\">        ans += res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = head[u];i;i = edge[i].nxt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = edge[i].to;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(fa[i]);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(fa[i],i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n;i;i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        siz[i]++;</span><br><span class=\"line\">        siz[fa[i]] += siz[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    siz[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf1856e-permutree-题解\">CF1856E PermuTree 题解</h1>","more":"<p>该题解同时包括 E1 和 E2 的解法。</p>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1856E1\">洛谷 E1</a> <a\r\nhref=\"https://www.luogu.com.cn/problem/CF1856E2\">洛谷 E2</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1856/E1\">Codeforces\r\nE1</a> <a\r\nhref=\"https://codeforces.com/problemset/problem/1856/E2\">Codeforces\r\nE2</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定一棵以 <span class=\"math inline\">\\(1\\)</span>\r\n为根的有根树，你需要给出一个 <span class=\"math inline\">\\(1\\)</span> 到\r\n<span class=\"math inline\">\\(n\\)</span> 的排列 <span\r\nclass=\"math inline\">\\(a\\)</span>，最大化二元组 <span\r\nclass=\"math inline\">\\((u,v)\\)</span> 的数量，满足 <span\r\nclass=\"math inline\">\\(a_u &lt; a_{\\rm {lca(a_u,a_v)}} &lt;\r\na_v\\)</span>，输出这个最大值。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<h3 id=\"solution-of-easy-version\">Solution of easy version</h3>\r\n<p>考虑什么时候会造成贡献，显然对于一个节点，将以它儿子为根的所有子树分为两部分，一部分权值大于该点权值，另一部分权值小于该点权值，贡献为这两部分大小乘积。</p>\r\n<p>因此我们的需要做的就是尽可能平均的将子树平分。是一个简单的 <span\r\nclass=\"math inline\">\\(O(n^2)\\)</span> 01 背包，不在赘述。</p>\r\n<h3 id=\"solution-of-hard-version\">Solution of hard version</h3>\r\n<p>这个背包问题并没有 <span class=\"math inline\">\\(O(n \\log n)\\)</span>\r\n的做法，那么我们只能进行二进制优化了，然而复杂度是 <span\r\nclass=\"math inline\">\\(O(n \\sqrt n)\\)</span> 的，于是我们用\r\n<code>bitset</code> 将复杂度变为 <span class=\"math inline\">\\(O(\\dfrac{n\r\n\\sqrt n}{\\omega})\\)</span>。</p>\r\n<p>需要注意的是如果对于所有数据都开一个很大的 <code>bitset</code> 仍然会\r\nTLE。只能动态确定大小，但 <code>bitset</code>\r\n不支持这么做。有两种解决方案。</p>\r\n<ul>\r\n<li><p>按照 <a href=\"https://www.luogu.com.cn/user/161697\"><span\r\nclass=\"citation\" data-cites=\"ღ\">@ღ</span>ꦿ࿐</a>\r\n大佬的方式，手动倍增写出各个大小的\r\n<code>bitset</code>，然后手动判断用哪个。</p></li>\r\n<li><p>使用 C++ 模板的语法，倍增实现。大概长这个样子：</p></li>\r\n</ul>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"type\">int</span> len = <span class=\"number\">1</span>&gt;<span class=\"type\">void</span> <span class=\"built_in\">sol</span>(<span class=\"type\">int</span> y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len &lt;= siz[y])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sol</span>&lt;<span class=\"built_in\">min</span>(len*<span class=\"number\">2</span>,(<span class=\"type\">long</span> <span class=\"type\">long</span>)max_n)&gt;(y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bitset&lt;len&gt; bst;</span><br><span class=\"line\">    <span class=\"comment\">// other work</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>为了方便我用了第二个方法，并且成功抢到了最优解。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 1001010</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max(AA,BB) ((AA&gt;BB)?(AA):(BB))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> min(AA,BB) ((AA&lt;BB)?(AA):(BB))</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> to,nxt;</span><br><span class=\"line\">&#125;edge[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> head[max_n],tot;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edge[++tot].to = v;</span><br><span class=\"line\">    edge[tot].nxt = head[u];</span><br><span class=\"line\">    head[u] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> son[max_n],siz[max_n],fa[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> res,ans;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; wp,ap;</span><br><span class=\"line\"><span class=\"type\">int</span> cnt[max_n];</span><br><span class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"type\">int</span> len = <span class=\"number\">1</span>&gt;<span class=\"type\">void</span> <span class=\"built_in\">sol</span>(<span class=\"type\">int</span> y)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len &lt;= siz[y])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sol</span>&lt;<span class=\"built_in\">min</span>(len*<span class=\"number\">2</span>,(<span class=\"type\">long</span> <span class=\"type\">long</span>)max_n)&gt;(y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bitset&lt;len&gt; bst;</span><br><span class=\"line\">    bst = <span class=\"number\">0</span>;</span><br><span class=\"line\">    res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    bst[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> v:wp)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        bst |= bst &lt;&lt; v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt;= (siz[y] - <span class=\"number\">1</span>)/<span class=\"number\">2</span>;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(bst[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res = <span class=\"built_in\">max</span>(res,(<span class=\"type\">long</span> <span class=\"type\">long</span>)i * (<span class=\"type\">long</span> <span class=\"type\">long</span>)(siz[y] - i - <span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> p:ap)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cnt[p] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ap.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = head[u];i;i = edge[i].nxt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = edge[i].to;</span><br><span class=\"line\">        cnt[siz[v]]++;</span><br><span class=\"line\">        ap.<span class=\"built_in\">push_back</span>(siz[v]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(ap.<span class=\"built_in\">begin</span>(),ap.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    ap.<span class=\"built_in\">erase</span>(<span class=\"built_in\">unique</span>(ap.<span class=\"built_in\">begin</span>(),ap.<span class=\"built_in\">end</span>()),ap.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    wp.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> v:ap)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> c = <span class=\"number\">1</span>,nw = cnt[v];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(nw)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            wp.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">min</span>(nw,c)*v);</span><br><span class=\"line\">            nw -= <span class=\"built_in\">min</span>(nw,c);</span><br><span class=\"line\">            c&lt;&lt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sol</span>(u);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// find the max_size subtree</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = head[u];i;i = edge[i].nxt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(siz[v] &gt; siz[son[u]])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            son[u] = v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// if the max_size subtree has more than half of the node on subtree_u</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>((siz[son[u]] &lt;&lt; <span class=\"number\">1LL</span>) &gt;= (siz[u] - <span class=\"number\">1</span>))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// then the ans is size[son[u]] * num_of_other_subtree</span></span><br><span class=\"line\">        ans += (<span class=\"type\">long</span> <span class=\"type\">long</span>)siz[son[u]] * (<span class=\"type\">long</span> <span class=\"type\">long</span>)(siz[u] - siz[son[u]] - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solve</span>(u);</span><br><span class=\"line\">        ans += res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = head[u];i;i = edge[i].nxt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = edge[i].to;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(fa[i]);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(fa[i],i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n;i;i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        siz[i]++;</span><br><span class=\"line\">        siz[fa[i]] += siz[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    siz[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1863B Split Sort 题解","mathjax":true,"_content":"\n# CF1863B Split Sort 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF1863B)\n\n[Codeforces](https://codeforces.com/problemset/problem/1863/B)\n\n## Description\n\n给定一个 $1 \\sim n$ 的排列 $q$，你可以多次进行以下操作：\n\n- 新建一个初始为空的序列 $q$；\n- 选择一个整数 $x$（$2 \\leq x \\leq n$）；\n- 按照在 $p$ 中出现的顺序将所有小于 $x$ 的数添加到序列 $q$ 末尾。\n- 按照在 $p$ 中出现的顺序将所有大于等于 $x$ 的数添加到序列 $q$ 末尾。\n- 用序列 $q$ 替代排列 $p$。\n\n你需要找到使 $\\forall i \\in [1,n]$，$p_{i} = i$ 的最小操作次数。\n\n本题有多组测试数据，$1 \\leq T \\leq 10^{3}$，$1 \\leq n,\\sum n \\leq 10^{5}$。\n\n## Solution\n\n比较简单的题，一个很显然的结论，设 $pos_{i}$ 是 $i$ 在原序列出现的的位置，如果 $pos_{i} > pos_{i - 1}$ 那么我们必须选择 $i$ 进行一次操作。只有这样能改变 $i$ 与 $i - 1$ 的相对顺序，而选择其他位置不会改变其相对顺序。因此我们有唯一的操作方案，对于每个 $pos_{i - 1} > pos_{i}$ 的 $i$ 操作一次。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T,n,ans;\nint nums[100001],pos[100001];\nvoid solution()\n{\n    ans = 0;\n    read(n);\n    for(int i = 1;i <= n;i++)\n    {\n        read(nums[i]);\n        pos[nums[i]] = i;\n    }\n    for(int i = 1;i < n;i++)\n    {\n        if(pos[i] > pos[i + 1])\n        {\n            ++ans;\n        }\n    }\n    writeln(ans);\n    return ;\n}\nsigned main()\n{\n   // freopen(\"1.in\",\"r\",stdin);\n    read(T);\n    while(T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```","source":"_posts/CF1863B Split Sort 题解.md","raw":"---\ntitle: \"CF1863B Split Sort 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF1863B Split Sort 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF1863B)\n\n[Codeforces](https://codeforces.com/problemset/problem/1863/B)\n\n## Description\n\n给定一个 $1 \\sim n$ 的排列 $q$，你可以多次进行以下操作：\n\n- 新建一个初始为空的序列 $q$；\n- 选择一个整数 $x$（$2 \\leq x \\leq n$）；\n- 按照在 $p$ 中出现的顺序将所有小于 $x$ 的数添加到序列 $q$ 末尾。\n- 按照在 $p$ 中出现的顺序将所有大于等于 $x$ 的数添加到序列 $q$ 末尾。\n- 用序列 $q$ 替代排列 $p$。\n\n你需要找到使 $\\forall i \\in [1,n]$，$p_{i} = i$ 的最小操作次数。\n\n本题有多组测试数据，$1 \\leq T \\leq 10^{3}$，$1 \\leq n,\\sum n \\leq 10^{5}$。\n\n## Solution\n\n比较简单的题，一个很显然的结论，设 $pos_{i}$ 是 $i$ 在原序列出现的的位置，如果 $pos_{i} > pos_{i - 1}$ 那么我们必须选择 $i$ 进行一次操作。只有这样能改变 $i$ 与 $i - 1$ 的相对顺序，而选择其他位置不会改变其相对顺序。因此我们有唯一的操作方案，对于每个 $pos_{i - 1} > pos_{i}$ 的 $i$ 操作一次。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T,n,ans;\nint nums[100001],pos[100001];\nvoid solution()\n{\n    ans = 0;\n    read(n);\n    for(int i = 1;i <= n;i++)\n    {\n        read(nums[i]);\n        pos[nums[i]] = i;\n    }\n    for(int i = 1;i < n;i++)\n    {\n        if(pos[i] > pos[i + 1])\n        {\n            ++ans;\n        }\n    }\n    writeln(ans);\n    return ;\n}\nsigned main()\n{\n   // freopen(\"1.in\",\"r\",stdin);\n    read(T);\n    while(T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```","slug":"CF1863B Split Sort 题解","published":1,"date":"2023-10-04T14:11:08.252Z","updated":"2023-10-04T14:11:08.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9z4001losja17p451vc","content":"<h1 id=\"cf1863b-split-sort-题解\">CF1863B Split Sort 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1863B\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1863/B\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定一个 <span class=\"math inline\">\\(1 \\sim n\\)</span> 的排列 <span\r\nclass=\"math inline\">\\(q\\)</span>，你可以多次进行以下操作：</p>\r\n<ul>\r\n<li>新建一个初始为空的序列 <span class=\"math inline\">\\(q\\)</span>；</li>\r\n<li>选择一个整数 <span class=\"math inline\">\\(x\\)</span>（<span\r\nclass=\"math inline\">\\(2 \\leq x \\leq n\\)</span>）；</li>\r\n<li>按照在 <span class=\"math inline\">\\(p\\)</span> 中出现的顺序将所有小于\r\n<span class=\"math inline\">\\(x\\)</span> 的数添加到序列 <span\r\nclass=\"math inline\">\\(q\\)</span> 末尾。</li>\r\n<li>按照在 <span class=\"math inline\">\\(p\\)</span>\r\n中出现的顺序将所有大于等于 <span class=\"math inline\">\\(x\\)</span>\r\n的数添加到序列 <span class=\"math inline\">\\(q\\)</span> 末尾。</li>\r\n<li>用序列 <span class=\"math inline\">\\(q\\)</span> 替代排列 <span\r\nclass=\"math inline\">\\(p\\)</span>。</li>\r\n</ul>\r\n<p>你需要找到使 <span class=\"math inline\">\\(\\forall i \\in\r\n[1,n]\\)</span>，<span class=\"math inline\">\\(p_{i} = i\\)</span>\r\n的最小操作次数。</p>\r\n<p>本题有多组测试数据，<span class=\"math inline\">\\(1 \\leq T \\leq\r\n10^{3}\\)</span>，<span class=\"math inline\">\\(1 \\leq n,\\sum n \\leq\r\n10^{5}\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>比较简单的题，一个很显然的结论，设 <span\r\nclass=\"math inline\">\\(pos_{i}\\)</span> 是 <span\r\nclass=\"math inline\">\\(i\\)</span> 在原序列出现的的位置，如果 <span\r\nclass=\"math inline\">\\(pos_{i} &gt; pos_{i - 1}\\)</span> 那么我们必须选择\r\n<span class=\"math inline\">\\(i\\)</span> 进行一次操作。只有这样能改变\r\n<span class=\"math inline\">\\(i\\)</span> 与 <span class=\"math inline\">\\(i\r\n- 1\\)</span>\r\n的相对顺序，而选择其他位置不会改变其相对顺序。因此我们有唯一的操作方案，对于每个\r\n<span class=\"math inline\">\\(pos_{i - 1} &gt; pos_{i}\\)</span> 的 <span\r\nclass=\"math inline\">\\(i\\)</span> 操作一次。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,ans;</span><br><span class=\"line\"><span class=\"type\">int</span> nums[<span class=\"number\">100001</span>],pos[<span class=\"number\">100001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">        pos[nums[i]] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos[i] &gt; pos[i + <span class=\"number\">1</span>])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++ans;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// freopen(&quot;1.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf1863b-split-sort-题解\">CF1863B Split Sort 题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1863B\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1863/B\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定一个 <span class=\"math inline\">\\(1 \\sim n\\)</span> 的排列 <span\r\nclass=\"math inline\">\\(q\\)</span>，你可以多次进行以下操作：</p>\r\n<ul>\r\n<li>新建一个初始为空的序列 <span class=\"math inline\">\\(q\\)</span>；</li>\r\n<li>选择一个整数 <span class=\"math inline\">\\(x\\)</span>（<span\r\nclass=\"math inline\">\\(2 \\leq x \\leq n\\)</span>）；</li>\r\n<li>按照在 <span class=\"math inline\">\\(p\\)</span> 中出现的顺序将所有小于\r\n<span class=\"math inline\">\\(x\\)</span> 的数添加到序列 <span\r\nclass=\"math inline\">\\(q\\)</span> 末尾。</li>\r\n<li>按照在 <span class=\"math inline\">\\(p\\)</span>\r\n中出现的顺序将所有大于等于 <span class=\"math inline\">\\(x\\)</span>\r\n的数添加到序列 <span class=\"math inline\">\\(q\\)</span> 末尾。</li>\r\n<li>用序列 <span class=\"math inline\">\\(q\\)</span> 替代排列 <span\r\nclass=\"math inline\">\\(p\\)</span>。</li>\r\n</ul>\r\n<p>你需要找到使 <span class=\"math inline\">\\(\\forall i \\in\r\n[1,n]\\)</span>，<span class=\"math inline\">\\(p_{i} = i\\)</span>\r\n的最小操作次数。</p>\r\n<p>本题有多组测试数据，<span class=\"math inline\">\\(1 \\leq T \\leq\r\n10^{3}\\)</span>，<span class=\"math inline\">\\(1 \\leq n,\\sum n \\leq\r\n10^{5}\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>比较简单的题，一个很显然的结论，设 <span\r\nclass=\"math inline\">\\(pos_{i}\\)</span> 是 <span\r\nclass=\"math inline\">\\(i\\)</span> 在原序列出现的的位置，如果 <span\r\nclass=\"math inline\">\\(pos_{i} &gt; pos_{i - 1}\\)</span> 那么我们必须选择\r\n<span class=\"math inline\">\\(i\\)</span> 进行一次操作。只有这样能改变\r\n<span class=\"math inline\">\\(i\\)</span> 与 <span class=\"math inline\">\\(i\r\n- 1\\)</span>\r\n的相对顺序，而选择其他位置不会改变其相对顺序。因此我们有唯一的操作方案，对于每个\r\n<span class=\"math inline\">\\(pos_{i - 1} &gt; pos_{i}\\)</span> 的 <span\r\nclass=\"math inline\">\\(i\\)</span> 操作一次。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,ans;</span><br><span class=\"line\"><span class=\"type\">int</span> nums[<span class=\"number\">100001</span>],pos[<span class=\"number\">100001</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">        pos[nums[i]] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt; n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos[i] &gt; pos[i + <span class=\"number\">1</span>])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++ans;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// freopen(&quot;1.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1863C MEX Repetition 题解","mathjax":true,"_content":"\n# CF1863C MEX Repetition 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF1863C)\n\n[Codeforces](https://codeforces.com/problemset/problem/1863/C)\n\n## Description\n\n给你一个长度为 $n$ 的序列 $a$，满足 $\\forall i \\in [1,n]$，$0 \\leq a_{i} \\leq n$ 且序列中的数互不相同。\n\n定义一次操作为：\n\n- 按照 $i$ 从 $1$ 到 $n$ 的顺序，$a_{i} \\gets \\operatorname{MEX}(a_{1} \\ldots a_{n})$。\n\n注意：一次操作中的每一步改变 **不是** 同时进行的，即每一步求 $\\operatorname{MEX}$ 的序列 $a$ 都在上一步被改变。\n\n你需要求出经过 $k$ 次操作之后的序列 $a$。\n\n本题有多组测试数据，$1 \\leq T,n,\\sum n \\leq 10^5$，$1 \\leq k \\leq 10^{9}$。\n\n## Solution\n\n看到题目，让我们先来模拟一下。\n\n$$\\begin{array}{c}\n\\left \\{1,2,3,4,5 \\right\\} \\\\\n\\left \\{0,1,2,3,4 \\right\\} \\\\\n\\left \\{5,0,1,2,3 \\right\\} \\\\\n\\left \\{4,5,0,1,2 \\right\\} \\\\\n\\left \\{3,4,5,0,1 \\right\\} \\\\\n\\left \\{2,3,4,5,0 \\right\\} \\\\\n\\left \\{1,2,3,4,5 \\right\\} \\\\\n\\end{array}$$\n\n很容易知道，我们在替换时，第一个数总是在上次没出现的数。然后没出现的数就变成了刚才被替换掉的数。假设经过第 $i$ 次替换的序列中第 $j$ 个数是 $a_{i,j}$，那么有 $a_{i,1} = a_{i-2,n}$，$\\forall j \\in [2,n]$，$a_{i,j} = a_{i - 1,j - 1}$。\n\n虽然我们推出了规律，但这玩意是 $O(nk)$ 的，炸裂 TLE。\n\n但我们可以尝试找一找规律，如果看上面的看不出来就看看下面这个吧。\n\n$$\n\\begin{array}{c}\n\\left \\{1,2,3,4,5,(0) \\right\\} \\\\\n\\left \\{0,1,2,3,4,(5) \\right\\} \\\\\n\\left \\{5,0,1,2,3,(4) \\right\\} \\\\\n\\left \\{4,5,0,1,2,(3) \\right\\} \\\\\n\\left \\{3,4,5,0,1,(2) \\right\\} \\\\\n\\left \\{2,3,4,5,0,(1) \\right\\} \\\\\n\\left \\{1,2,3,4,5,(0) \\right\\} \n\\end{array}\n$$\n\n发现什么了嘛，其实每次的只是相当于上一次平移了一下，因为当前没有的就是刚被替换掉的。\n\n于是我们只需要找到起始的数字就可以了。由于每次移动一个，初始的位置就是 $(1 - k) \\bmod (n + 1)$。负数取模请自行处理。\n\n答案从起始位置输出 $n$ 个就可以了。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 310101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T,n,k;\nint nums[max_n],vis[max_n];\nvoid solution()\n{\n    read(n),read(k);\n    for(int i = 1;i <= n;i++)\n    {\n        read(nums[i]);\n        vis[nums[i]] = 1;\n    }\n    for(int i = 0;i <= n;i++)\n    {\n        if(!vis[i])\n        {\n            nums[0] = i;\n            break;\n        }\n    }\n    int beg = (n + 2 - (k % (n + 1))) % ( n + 1);\n  //  cout<<\"@\"<<beg<<endl;\n    for(int i = 1;i <= n;i++,beg++)\n    {\n        writesp(nums[beg % (n + 1)]);\n    }\n    puts(\"\");\n    for(int i = 0;i <= n;i++)\n    {\n        vis[i] = 0;\n    }\n}\nsigned main()\n{\n   // freopen(\"1.in\",\"r\",stdin);\n    read(T);\n    while(T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```","source":"_posts/CF1863C MEX Repetition 题解.md","raw":"---\ntitle: \"CF1863C MEX Repetition 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF1863C MEX Repetition 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF1863C)\n\n[Codeforces](https://codeforces.com/problemset/problem/1863/C)\n\n## Description\n\n给你一个长度为 $n$ 的序列 $a$，满足 $\\forall i \\in [1,n]$，$0 \\leq a_{i} \\leq n$ 且序列中的数互不相同。\n\n定义一次操作为：\n\n- 按照 $i$ 从 $1$ 到 $n$ 的顺序，$a_{i} \\gets \\operatorname{MEX}(a_{1} \\ldots a_{n})$。\n\n注意：一次操作中的每一步改变 **不是** 同时进行的，即每一步求 $\\operatorname{MEX}$ 的序列 $a$ 都在上一步被改变。\n\n你需要求出经过 $k$ 次操作之后的序列 $a$。\n\n本题有多组测试数据，$1 \\leq T,n,\\sum n \\leq 10^5$，$1 \\leq k \\leq 10^{9}$。\n\n## Solution\n\n看到题目，让我们先来模拟一下。\n\n$$\\begin{array}{c}\n\\left \\{1,2,3,4,5 \\right\\} \\\\\n\\left \\{0,1,2,3,4 \\right\\} \\\\\n\\left \\{5,0,1,2,3 \\right\\} \\\\\n\\left \\{4,5,0,1,2 \\right\\} \\\\\n\\left \\{3,4,5,0,1 \\right\\} \\\\\n\\left \\{2,3,4,5,0 \\right\\} \\\\\n\\left \\{1,2,3,4,5 \\right\\} \\\\\n\\end{array}$$\n\n很容易知道，我们在替换时，第一个数总是在上次没出现的数。然后没出现的数就变成了刚才被替换掉的数。假设经过第 $i$ 次替换的序列中第 $j$ 个数是 $a_{i,j}$，那么有 $a_{i,1} = a_{i-2,n}$，$\\forall j \\in [2,n]$，$a_{i,j} = a_{i - 1,j - 1}$。\n\n虽然我们推出了规律，但这玩意是 $O(nk)$ 的，炸裂 TLE。\n\n但我们可以尝试找一找规律，如果看上面的看不出来就看看下面这个吧。\n\n$$\n\\begin{array}{c}\n\\left \\{1,2,3,4,5,(0) \\right\\} \\\\\n\\left \\{0,1,2,3,4,(5) \\right\\} \\\\\n\\left \\{5,0,1,2,3,(4) \\right\\} \\\\\n\\left \\{4,5,0,1,2,(3) \\right\\} \\\\\n\\left \\{3,4,5,0,1,(2) \\right\\} \\\\\n\\left \\{2,3,4,5,0,(1) \\right\\} \\\\\n\\left \\{1,2,3,4,5,(0) \\right\\} \n\\end{array}\n$$\n\n发现什么了嘛，其实每次的只是相当于上一次平移了一下，因为当前没有的就是刚被替换掉的。\n\n于是我们只需要找到起始的数字就可以了。由于每次移动一个，初始的位置就是 $(1 - k) \\bmod (n + 1)$。负数取模请自行处理。\n\n答案从起始位置输出 $n$ 个就可以了。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 310101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T,n,k;\nint nums[max_n],vis[max_n];\nvoid solution()\n{\n    read(n),read(k);\n    for(int i = 1;i <= n;i++)\n    {\n        read(nums[i]);\n        vis[nums[i]] = 1;\n    }\n    for(int i = 0;i <= n;i++)\n    {\n        if(!vis[i])\n        {\n            nums[0] = i;\n            break;\n        }\n    }\n    int beg = (n + 2 - (k % (n + 1))) % ( n + 1);\n  //  cout<<\"@\"<<beg<<endl;\n    for(int i = 1;i <= n;i++,beg++)\n    {\n        writesp(nums[beg % (n + 1)]);\n    }\n    puts(\"\");\n    for(int i = 0;i <= n;i++)\n    {\n        vis[i] = 0;\n    }\n}\nsigned main()\n{\n   // freopen(\"1.in\",\"r\",stdin);\n    read(T);\n    while(T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```","slug":"CF1863C MEX Repetition 题解","published":1,"date":"2023-10-04T14:11:08.252Z","updated":"2023-10-04T14:11:08.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9z5001nosjagouncve8","content":"<h1 id=\"cf1863c-mex-repetition-题解\">CF1863C MEX Repetition 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1863C\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1863/C\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给你一个长度为 <span class=\"math inline\">\\(n\\)</span> 的序列 <span\r\nclass=\"math inline\">\\(a\\)</span>，满足 <span\r\nclass=\"math inline\">\\(\\forall i \\in [1,n]\\)</span>，<span\r\nclass=\"math inline\">\\(0 \\leq a_{i} \\leq n\\)</span>\r\n且序列中的数互不相同。</p>\r\n<p>定义一次操作为：</p>\r\n<ul>\r\n<li>按照 <span class=\"math inline\">\\(i\\)</span> 从 <span\r\nclass=\"math inline\">\\(1\\)</span> 到 <span\r\nclass=\"math inline\">\\(n\\)</span> 的顺序，<span\r\nclass=\"math inline\">\\(a_{i} \\gets \\operatorname{MEX}(a_{1} \\ldots\r\na_{n})\\)</span>。</li>\r\n</ul>\r\n<p>注意：一次操作中的每一步改变 <strong>不是</strong>\r\n同时进行的，即每一步求 <span\r\nclass=\"math inline\">\\(\\operatorname{MEX}\\)</span> 的序列 <span\r\nclass=\"math inline\">\\(a\\)</span> 都在上一步被改变。</p>\r\n<p>你需要求出经过 <span class=\"math inline\">\\(k\\)</span>\r\n次操作之后的序列 <span class=\"math inline\">\\(a\\)</span>。</p>\r\n<p>本题有多组测试数据，<span class=\"math inline\">\\(1 \\leq T,n,\\sum n\r\n\\leq 10^5\\)</span>，<span class=\"math inline\">\\(1 \\leq k \\leq\r\n10^{9}\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>看到题目，让我们先来模拟一下。</p>\r\n<p><span class=\"math display\">\\[\\begin{array}{c}\r\n\\left \\{1,2,3,4,5 \\right\\} \\\\\r\n\\left \\{0,1,2,3,4 \\right\\} \\\\\r\n\\left \\{5,0,1,2,3 \\right\\} \\\\\r\n\\left \\{4,5,0,1,2 \\right\\} \\\\\r\n\\left \\{3,4,5,0,1 \\right\\} \\\\\r\n\\left \\{2,3,4,5,0 \\right\\} \\\\\r\n\\left \\{1,2,3,4,5 \\right\\} \\\\\r\n\\end{array}\\]</span></p>\r\n<p>很容易知道，我们在替换时，第一个数总是在上次没出现的数。然后没出现的数就变成了刚才被替换掉的数。假设经过第\r\n<span class=\"math inline\">\\(i\\)</span> 次替换的序列中第 <span\r\nclass=\"math inline\">\\(j\\)</span> 个数是 <span\r\nclass=\"math inline\">\\(a_{i,j}\\)</span>，那么有 <span\r\nclass=\"math inline\">\\(a_{i,1} = a_{i-2,n}\\)</span>，<span\r\nclass=\"math inline\">\\(\\forall j \\in [2,n]\\)</span>，<span\r\nclass=\"math inline\">\\(a_{i,j} = a_{i - 1,j - 1}\\)</span>。</p>\r\n<p>虽然我们推出了规律，但这玩意是 <span\r\nclass=\"math inline\">\\(O(nk)\\)</span> 的，炸裂 TLE。</p>\r\n<p>但我们可以尝试找一找规律，如果看上面的看不出来就看看下面这个吧。</p>\r\n<p><span class=\"math display\">\\[\r\n\\begin{array}{c}\r\n\\left \\{1,2,3,4,5,(0) \\right\\} \\\\\r\n\\left \\{0,1,2,3,4,(5) \\right\\} \\\\\r\n\\left \\{5,0,1,2,3,(4) \\right\\} \\\\\r\n\\left \\{4,5,0,1,2,(3) \\right\\} \\\\\r\n\\left \\{3,4,5,0,1,(2) \\right\\} \\\\\r\n\\left \\{2,3,4,5,0,(1) \\right\\} \\\\\r\n\\left \\{1,2,3,4,5,(0) \\right\\}\r\n\\end{array}\r\n\\]</span></p>\r\n<p>发现什么了嘛，其实每次的只是相当于上一次平移了一下，因为当前没有的就是刚被替换掉的。</p>\r\n<p>于是我们只需要找到起始的数字就可以了。由于每次移动一个，初始的位置就是\r\n<span class=\"math inline\">\\((1 - k) \\bmod (n +\r\n1)\\)</span>。负数取模请自行处理。</p>\r\n<p>答案从起始位置输出 <span class=\"math inline\">\\(n\\)</span>\r\n个就可以了。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 310101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,k;</span><br><span class=\"line\"><span class=\"type\">int</span> nums[max_n],vis[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n),<span class=\"built_in\">read</span>(k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">        vis[nums[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            nums[<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> beg = (n + <span class=\"number\">2</span> - (k % (n + <span class=\"number\">1</span>))) % ( n + <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"comment\">//  cout&lt;&lt;&quot;@&quot;&lt;&lt;beg&lt;&lt;endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++,beg++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">writesp</span>(nums[beg % (n + <span class=\"number\">1</span>)]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        vis[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// freopen(&quot;1.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf1863c-mex-repetition-题解\">CF1863C MEX Repetition 题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1863C\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1863/C\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给你一个长度为 <span class=\"math inline\">\\(n\\)</span> 的序列 <span\r\nclass=\"math inline\">\\(a\\)</span>，满足 <span\r\nclass=\"math inline\">\\(\\forall i \\in [1,n]\\)</span>，<span\r\nclass=\"math inline\">\\(0 \\leq a_{i} \\leq n\\)</span>\r\n且序列中的数互不相同。</p>\r\n<p>定义一次操作为：</p>\r\n<ul>\r\n<li>按照 <span class=\"math inline\">\\(i\\)</span> 从 <span\r\nclass=\"math inline\">\\(1\\)</span> 到 <span\r\nclass=\"math inline\">\\(n\\)</span> 的顺序，<span\r\nclass=\"math inline\">\\(a_{i} \\gets \\operatorname{MEX}(a_{1} \\ldots\r\na_{n})\\)</span>。</li>\r\n</ul>\r\n<p>注意：一次操作中的每一步改变 <strong>不是</strong>\r\n同时进行的，即每一步求 <span\r\nclass=\"math inline\">\\(\\operatorname{MEX}\\)</span> 的序列 <span\r\nclass=\"math inline\">\\(a\\)</span> 都在上一步被改变。</p>\r\n<p>你需要求出经过 <span class=\"math inline\">\\(k\\)</span>\r\n次操作之后的序列 <span class=\"math inline\">\\(a\\)</span>。</p>\r\n<p>本题有多组测试数据，<span class=\"math inline\">\\(1 \\leq T,n,\\sum n\r\n\\leq 10^5\\)</span>，<span class=\"math inline\">\\(1 \\leq k \\leq\r\n10^{9}\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>看到题目，让我们先来模拟一下。</p>\r\n<p><span class=\"math display\">\\[\\begin{array}{c}\r\n\\left \\{1,2,3,4,5 \\right\\} \\\\\r\n\\left \\{0,1,2,3,4 \\right\\} \\\\\r\n\\left \\{5,0,1,2,3 \\right\\} \\\\\r\n\\left \\{4,5,0,1,2 \\right\\} \\\\\r\n\\left \\{3,4,5,0,1 \\right\\} \\\\\r\n\\left \\{2,3,4,5,0 \\right\\} \\\\\r\n\\left \\{1,2,3,4,5 \\right\\} \\\\\r\n\\end{array}\\]</span></p>\r\n<p>很容易知道，我们在替换时，第一个数总是在上次没出现的数。然后没出现的数就变成了刚才被替换掉的数。假设经过第\r\n<span class=\"math inline\">\\(i\\)</span> 次替换的序列中第 <span\r\nclass=\"math inline\">\\(j\\)</span> 个数是 <span\r\nclass=\"math inline\">\\(a_{i,j}\\)</span>，那么有 <span\r\nclass=\"math inline\">\\(a_{i,1} = a_{i-2,n}\\)</span>，<span\r\nclass=\"math inline\">\\(\\forall j \\in [2,n]\\)</span>，<span\r\nclass=\"math inline\">\\(a_{i,j} = a_{i - 1,j - 1}\\)</span>。</p>\r\n<p>虽然我们推出了规律，但这玩意是 <span\r\nclass=\"math inline\">\\(O(nk)\\)</span> 的，炸裂 TLE。</p>\r\n<p>但我们可以尝试找一找规律，如果看上面的看不出来就看看下面这个吧。</p>\r\n<p><span class=\"math display\">\\[\r\n\\begin{array}{c}\r\n\\left \\{1,2,3,4,5,(0) \\right\\} \\\\\r\n\\left \\{0,1,2,3,4,(5) \\right\\} \\\\\r\n\\left \\{5,0,1,2,3,(4) \\right\\} \\\\\r\n\\left \\{4,5,0,1,2,(3) \\right\\} \\\\\r\n\\left \\{3,4,5,0,1,(2) \\right\\} \\\\\r\n\\left \\{2,3,4,5,0,(1) \\right\\} \\\\\r\n\\left \\{1,2,3,4,5,(0) \\right\\}\r\n\\end{array}\r\n\\]</span></p>\r\n<p>发现什么了嘛，其实每次的只是相当于上一次平移了一下，因为当前没有的就是刚被替换掉的。</p>\r\n<p>于是我们只需要找到起始的数字就可以了。由于每次移动一个，初始的位置就是\r\n<span class=\"math inline\">\\((1 - k) \\bmod (n +\r\n1)\\)</span>。负数取模请自行处理。</p>\r\n<p>答案从起始位置输出 <span class=\"math inline\">\\(n\\)</span>\r\n个就可以了。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 310101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,k;</span><br><span class=\"line\"><span class=\"type\">int</span> nums[max_n],vis[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n),<span class=\"built_in\">read</span>(k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">        vis[nums[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!vis[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            nums[<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> beg = (n + <span class=\"number\">2</span> - (k % (n + <span class=\"number\">1</span>))) % ( n + <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"comment\">//  cout&lt;&lt;&quot;@&quot;&lt;&lt;beg&lt;&lt;endl;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++,beg++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">writesp</span>(nums[beg % (n + <span class=\"number\">1</span>)]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        vis[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// freopen(&quot;1.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1863D Two-Colored Dominoes 题解","mathjax":true,"_content":"\n# CF1863D Two-Colored Dominoes 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF1863D)\n\n[Codeforces](https://codeforces.com/problemset/problem/1863/D)\n\n## Description\n\n有一个 $n \\times m$ 的棋盘，上面铺着一些 $1 \\times 2$ 的多米诺骨牌（横竖均有可能），骨牌之间没有重叠。\n\n你需要找到一种染色方案满足以下条件：\n\n- 每个多米诺骨牌一端被染白，另一端被染黑。其他没有骨牌的格子不染色。\n- 对于棋盘的每一行，被染黑的格子数等于被染白的格子数。\n- 对于棋盘的每一列，被染黑的格子数等于被染白的格子数。\n\n请输出任意一种染色方案，如果无解，输出 $-1$。\n\n本题有多组测试数据，$1 \\leq T \\leq 10^{4}$，$2 \\leq n,m \\leq 500$，$\\sum (n \\times m) \\leq 2.5 \\times 10^{5}$。\n\n## Solution\n\n由于题目限制每个多米诺骨牌一端被染白，另一端被染黑，因此容易得出 **横着摆放的骨牌对行的限制没有影响，横着摆放的骨牌对列的限制没有影响。**\n\n因此我们可以先看行的限制，显然，如果一行中有奇数个竖着放的骨牌则无解。\n\n然后分类讨论：\n\n- 若当前格子是骨牌的上侧，没有限制，但要考虑后面的格子。\n- 若当前格子是骨牌的下侧，由于上一行已经遍历过，当前格子的状态就已经确定了。\n\n因此我们可以记录三个数字，$cnt_{1}$ 表示没有限制的格子数量，$cnt_{2}$ 表示一定需要染黑的数量，$cnt_{3}$ 表示一定需要染白的数量。\n\n统计结束后，对于每个没有限制的格子，我们贪心的选择当前少的颜色涂，数量相同的时候随便选一个就行，这样到最后如果两个颜色数量还不同就无解了。\n\n列的限制同理即可。\n\n时间复杂度 $\\Omicron \\left( n \\times m\\right)$。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T;\nint n,m;\nchar mp[510][510],ans[510][510];\nvoid solution()\n{\n    read(n),read(m);\n    for(int i = 1;i <= n;i++)\n    {\n        for(int j = 1;j <= m;j++)\n        {\n            ans[i][j] = '.';\n        }\n    }\n    for(int i = 1;i <= n;i++)\n    {\n        scanf(\"%s\",mp[i] + 1);\n    }\n    // 是否有答案；\n    bool flag = true;\n    // 先考虑行的情况，由于横着的不会造成影响直接跳过\n    for(int i = 1,cnt1,cnt2,cnt3;i <= n;i++)\n    {\n        // cnt1 无法确定个数\n        // cnt2 确定的 B\n        // cnt3 确定的 W\n        cnt1 = cnt2 = cnt3 = 0;\n        for(int j = 1;j <= m;j++)\n        {\n            if(mp[i][j] == 'U')\n            {\n                ++cnt1;\n            }\n            else if(mp[i][j] == 'D')\n            {\n                if(ans[i - 1][j] == 'W')\n                {\n                    ++cnt2;\n                }\n                else\n                {\n                    ++cnt3;\n                }\n            }\n        }\n        if((cnt1 + cnt2 + cnt3) & 1)\n        {\n            flag = false;\n            break;\n        }\n        else\n        {\n            for(int j = 1;j <= m;j++)\n            {\n                if(mp[i][j] == 'U')\n                {\n                    if(cnt2 > cnt3)\n                    {\n                        ans[i][j] = 'W';\n                        ++cnt3;\n                    }\n                    else\n                    {\n                        ans[i][j] = 'B';\n                        ++cnt2;\n                    }\n                }\n                else if(mp[i][j] == 'D')\n                {\n                    if(ans[i - 1][j] == 'W')\n                    {\n                        ans[i][j] = 'B';\n                    }\n                    else\n                    {\n                        ans[i][j] = 'W';\n                    }\n                }\n            }\n        }\n        if(cnt2 != cnt3) {\n            flag = false;\n        }\n    }\n\n    for(int j = 1,cnt1,cnt2,cnt3;j <= m;j++) {\n        cnt1 = cnt2 = cnt3 = 0;\n        for(int i = 1;i <= n;i++) {\n            if(mp[i][j] == 'L') {\n                ++cnt1;\n            }\n            else if(mp[i][j] == 'R') {\n                if(ans[i][j - 1] == 'W') {\n                    ++cnt2;\n                }\n                else {\n                    ++cnt3;\n                }\n            }\n        }\n        if((cnt1 + cnt2 + cnt3) & 1) {\n            flag = false;\n            break;\n        }\n        else {\n            for(int i = 1;i <= n;i++) {\n                if(mp[i][j] == 'L') {\n                    if(cnt2 > cnt3) {\n                        ans[i][j] = 'W';\n                        ++cnt3;\n                    }\n                    else {\n                        ans[i][j] = 'B';\n                        ++cnt2;\n                    }\n                }\n                else if(mp[i][j] == 'R') {\n                    if(ans[i][j - 1] == 'W'){\n                        ans[i][j] = 'B';\n                    }\n                    else{\n                        ans[i][j] = 'W';\n                    }\n                }\n            }\n        }\n        if(cnt2 != cnt3){\n            flag = false;\n        }\n    }\n    if(flag == false){\n        puts(\"-1\");\n        return ;\n    }\n    for(int i = 1;i <= n;i++){\n        for(int j = 1;j <= m;j++){\n            putchar(ans[i][j]);\n            ans[i][j] = '.';\n        }\n        puts(\"\");\n    }\n}\nsigned main()\n{\n    read(T);\n    while(T--){solution();}\n    return 0;\n}\n```","source":"_posts/CF1863D Two-Colored Dominoes 题解.md","raw":"---\ntitle: \"CF1863D Two-Colored Dominoes 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF1863D Two-Colored Dominoes 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF1863D)\n\n[Codeforces](https://codeforces.com/problemset/problem/1863/D)\n\n## Description\n\n有一个 $n \\times m$ 的棋盘，上面铺着一些 $1 \\times 2$ 的多米诺骨牌（横竖均有可能），骨牌之间没有重叠。\n\n你需要找到一种染色方案满足以下条件：\n\n- 每个多米诺骨牌一端被染白，另一端被染黑。其他没有骨牌的格子不染色。\n- 对于棋盘的每一行，被染黑的格子数等于被染白的格子数。\n- 对于棋盘的每一列，被染黑的格子数等于被染白的格子数。\n\n请输出任意一种染色方案，如果无解，输出 $-1$。\n\n本题有多组测试数据，$1 \\leq T \\leq 10^{4}$，$2 \\leq n,m \\leq 500$，$\\sum (n \\times m) \\leq 2.5 \\times 10^{5}$。\n\n## Solution\n\n由于题目限制每个多米诺骨牌一端被染白，另一端被染黑，因此容易得出 **横着摆放的骨牌对行的限制没有影响，横着摆放的骨牌对列的限制没有影响。**\n\n因此我们可以先看行的限制，显然，如果一行中有奇数个竖着放的骨牌则无解。\n\n然后分类讨论：\n\n- 若当前格子是骨牌的上侧，没有限制，但要考虑后面的格子。\n- 若当前格子是骨牌的下侧，由于上一行已经遍历过，当前格子的状态就已经确定了。\n\n因此我们可以记录三个数字，$cnt_{1}$ 表示没有限制的格子数量，$cnt_{2}$ 表示一定需要染黑的数量，$cnt_{3}$ 表示一定需要染白的数量。\n\n统计结束后，对于每个没有限制的格子，我们贪心的选择当前少的颜色涂，数量相同的时候随便选一个就行，这样到最后如果两个颜色数量还不同就无解了。\n\n列的限制同理即可。\n\n时间复杂度 $\\Omicron \\left( n \\times m\\right)$。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T;\nint n,m;\nchar mp[510][510],ans[510][510];\nvoid solution()\n{\n    read(n),read(m);\n    for(int i = 1;i <= n;i++)\n    {\n        for(int j = 1;j <= m;j++)\n        {\n            ans[i][j] = '.';\n        }\n    }\n    for(int i = 1;i <= n;i++)\n    {\n        scanf(\"%s\",mp[i] + 1);\n    }\n    // 是否有答案；\n    bool flag = true;\n    // 先考虑行的情况，由于横着的不会造成影响直接跳过\n    for(int i = 1,cnt1,cnt2,cnt3;i <= n;i++)\n    {\n        // cnt1 无法确定个数\n        // cnt2 确定的 B\n        // cnt3 确定的 W\n        cnt1 = cnt2 = cnt3 = 0;\n        for(int j = 1;j <= m;j++)\n        {\n            if(mp[i][j] == 'U')\n            {\n                ++cnt1;\n            }\n            else if(mp[i][j] == 'D')\n            {\n                if(ans[i - 1][j] == 'W')\n                {\n                    ++cnt2;\n                }\n                else\n                {\n                    ++cnt3;\n                }\n            }\n        }\n        if((cnt1 + cnt2 + cnt3) & 1)\n        {\n            flag = false;\n            break;\n        }\n        else\n        {\n            for(int j = 1;j <= m;j++)\n            {\n                if(mp[i][j] == 'U')\n                {\n                    if(cnt2 > cnt3)\n                    {\n                        ans[i][j] = 'W';\n                        ++cnt3;\n                    }\n                    else\n                    {\n                        ans[i][j] = 'B';\n                        ++cnt2;\n                    }\n                }\n                else if(mp[i][j] == 'D')\n                {\n                    if(ans[i - 1][j] == 'W')\n                    {\n                        ans[i][j] = 'B';\n                    }\n                    else\n                    {\n                        ans[i][j] = 'W';\n                    }\n                }\n            }\n        }\n        if(cnt2 != cnt3) {\n            flag = false;\n        }\n    }\n\n    for(int j = 1,cnt1,cnt2,cnt3;j <= m;j++) {\n        cnt1 = cnt2 = cnt3 = 0;\n        for(int i = 1;i <= n;i++) {\n            if(mp[i][j] == 'L') {\n                ++cnt1;\n            }\n            else if(mp[i][j] == 'R') {\n                if(ans[i][j - 1] == 'W') {\n                    ++cnt2;\n                }\n                else {\n                    ++cnt3;\n                }\n            }\n        }\n        if((cnt1 + cnt2 + cnt3) & 1) {\n            flag = false;\n            break;\n        }\n        else {\n            for(int i = 1;i <= n;i++) {\n                if(mp[i][j] == 'L') {\n                    if(cnt2 > cnt3) {\n                        ans[i][j] = 'W';\n                        ++cnt3;\n                    }\n                    else {\n                        ans[i][j] = 'B';\n                        ++cnt2;\n                    }\n                }\n                else if(mp[i][j] == 'R') {\n                    if(ans[i][j - 1] == 'W'){\n                        ans[i][j] = 'B';\n                    }\n                    else{\n                        ans[i][j] = 'W';\n                    }\n                }\n            }\n        }\n        if(cnt2 != cnt3){\n            flag = false;\n        }\n    }\n    if(flag == false){\n        puts(\"-1\");\n        return ;\n    }\n    for(int i = 1;i <= n;i++){\n        for(int j = 1;j <= m;j++){\n            putchar(ans[i][j]);\n            ans[i][j] = '.';\n        }\n        puts(\"\");\n    }\n}\nsigned main()\n{\n    read(T);\n    while(T--){solution();}\n    return 0;\n}\n```","slug":"CF1863D Two-Colored Dominoes 题解","published":1,"date":"2023-10-04T14:11:08.252Z","updated":"2023-10-04T14:11:08.252Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9z6001posja8ddshhof","content":"<h1 id=\"cf1863d-two-colored-dominoes-题解\">CF1863D Two-Colored Dominoes\r\n题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1863D\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1863/D\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>有一个 <span class=\"math inline\">\\(n \\times m\\)</span>\r\n的棋盘，上面铺着一些 <span class=\"math inline\">\\(1 \\times 2\\)</span>\r\n的多米诺骨牌（横竖均有可能），骨牌之间没有重叠。</p>\r\n<p>你需要找到一种染色方案满足以下条件：</p>\r\n<ul>\r\n<li>每个多米诺骨牌一端被染白，另一端被染黑。其他没有骨牌的格子不染色。</li>\r\n<li>对于棋盘的每一行，被染黑的格子数等于被染白的格子数。</li>\r\n<li>对于棋盘的每一列，被染黑的格子数等于被染白的格子数。</li>\r\n</ul>\r\n<p>请输出任意一种染色方案，如果无解，输出 <span\r\nclass=\"math inline\">\\(-1\\)</span>。</p>\r\n<p>本题有多组测试数据，<span class=\"math inline\">\\(1 \\leq T \\leq\r\n10^{4}\\)</span>，<span class=\"math inline\">\\(2 \\leq n,m \\leq\r\n500\\)</span>，<span class=\"math inline\">\\(\\sum (n \\times m) \\leq 2.5\r\n\\times 10^{5}\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>由于题目限制每个多米诺骨牌一端被染白，另一端被染黑，因此容易得出\r\n<strong>横着摆放的骨牌对行的限制没有影响，横着摆放的骨牌对列的限制没有影响。</strong></p>\r\n<p>因此我们可以先看行的限制，显然，如果一行中有奇数个竖着放的骨牌则无解。</p>\r\n<p>然后分类讨论：</p>\r\n<ul>\r\n<li>若当前格子是骨牌的上侧，没有限制，但要考虑后面的格子。</li>\r\n<li>若当前格子是骨牌的下侧，由于上一行已经遍历过，当前格子的状态就已经确定了。</li>\r\n</ul>\r\n<p>因此我们可以记录三个数字，<span\r\nclass=\"math inline\">\\(cnt_{1}\\)</span> 表示没有限制的格子数量，<span\r\nclass=\"math inline\">\\(cnt_{2}\\)</span> 表示一定需要染黑的数量，<span\r\nclass=\"math inline\">\\(cnt_{3}\\)</span> 表示一定需要染白的数量。</p>\r\n<p>统计结束后，对于每个没有限制的格子，我们贪心的选择当前少的颜色涂，数量相同的时候随便选一个就行，这样到最后如果两个颜色数量还不同就无解了。</p>\r\n<p>列的限制同理即可。</p>\r\n<p>时间复杂度 <span class=\"math inline\">\\(\\Omicron \\left( n \\times\r\nm\\right)\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">char</span> mp[<span class=\"number\">510</span>][<span class=\"number\">510</span>],ans[<span class=\"number\">510</span>][<span class=\"number\">510</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n),<span class=\"built_in\">read</span>(m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>;j &lt;= m;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans[i][j] = <span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,mp[i] + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 是否有答案；</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 先考虑行的情况，由于横着的不会造成影响直接跳过</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>,cnt1,cnt2,cnt3;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// cnt1 无法确定个数</span></span><br><span class=\"line\">        <span class=\"comment\">// cnt2 确定的 B</span></span><br><span class=\"line\">        <span class=\"comment\">// cnt3 确定的 W</span></span><br><span class=\"line\">        cnt1 = cnt2 = cnt3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>;j &lt;= m;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mp[i][j] == <span class=\"string\">&#x27;U&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ++cnt1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mp[i][j] == <span class=\"string\">&#x27;D&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ans[i - <span class=\"number\">1</span>][j] == <span class=\"string\">&#x27;W&#x27;</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ++cnt2;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ++cnt3;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((cnt1 + cnt2 + cnt3) &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>;j &lt;= m;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mp[i][j] == <span class=\"string\">&#x27;U&#x27;</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(cnt2 &gt; cnt3)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        ans[i][j] = <span class=\"string\">&#x27;W&#x27;</span>;</span><br><span class=\"line\">                        ++cnt3;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        ans[i][j] = <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">                        ++cnt2;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mp[i][j] == <span class=\"string\">&#x27;D&#x27;</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(ans[i - <span class=\"number\">1</span>][j] == <span class=\"string\">&#x27;W&#x27;</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        ans[i][j] = <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        ans[i][j] = <span class=\"string\">&#x27;W&#x27;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt2 != cnt3) &#123;</span><br><span class=\"line\">            flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>,cnt1,cnt2,cnt3;j &lt;= m;j++) &#123;</span><br><span class=\"line\">        cnt1 = cnt2 = cnt3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mp[i][j] == <span class=\"string\">&#x27;L&#x27;</span>) &#123;</span><br><span class=\"line\">                ++cnt1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mp[i][j] == <span class=\"string\">&#x27;R&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ans[i][j - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;W&#x27;</span>) &#123;</span><br><span class=\"line\">                    ++cnt2;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    ++cnt3;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((cnt1 + cnt2 + cnt3) &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mp[i][j] == <span class=\"string\">&#x27;L&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(cnt2 &gt; cnt3) &#123;</span><br><span class=\"line\">                        ans[i][j] = <span class=\"string\">&#x27;W&#x27;</span>;</span><br><span class=\"line\">                        ++cnt3;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        ans[i][j] = <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">                        ++cnt2;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mp[i][j] == <span class=\"string\">&#x27;R&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(ans[i][j - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;W&#x27;</span>)&#123;</span><br><span class=\"line\">                        ans[i][j] = <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        ans[i][j] = <span class=\"string\">&#x27;W&#x27;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt2 != cnt3)&#123;</span><br><span class=\"line\">            flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag == <span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>;j &lt;= m;j++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(ans[i][j]);</span><br><span class=\"line\">            ans[i][j] = <span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;<span class=\"built_in\">solution</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf1863d-two-colored-dominoes-题解\">CF1863D Two-Colored Dominoes\r\n题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1863D\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1863/D\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>有一个 <span class=\"math inline\">\\(n \\times m\\)</span>\r\n的棋盘，上面铺着一些 <span class=\"math inline\">\\(1 \\times 2\\)</span>\r\n的多米诺骨牌（横竖均有可能），骨牌之间没有重叠。</p>\r\n<p>你需要找到一种染色方案满足以下条件：</p>\r\n<ul>\r\n<li>每个多米诺骨牌一端被染白，另一端被染黑。其他没有骨牌的格子不染色。</li>\r\n<li>对于棋盘的每一行，被染黑的格子数等于被染白的格子数。</li>\r\n<li>对于棋盘的每一列，被染黑的格子数等于被染白的格子数。</li>\r\n</ul>\r\n<p>请输出任意一种染色方案，如果无解，输出 <span\r\nclass=\"math inline\">\\(-1\\)</span>。</p>\r\n<p>本题有多组测试数据，<span class=\"math inline\">\\(1 \\leq T \\leq\r\n10^{4}\\)</span>，<span class=\"math inline\">\\(2 \\leq n,m \\leq\r\n500\\)</span>，<span class=\"math inline\">\\(\\sum (n \\times m) \\leq 2.5\r\n\\times 10^{5}\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>由于题目限制每个多米诺骨牌一端被染白，另一端被染黑，因此容易得出\r\n<strong>横着摆放的骨牌对行的限制没有影响，横着摆放的骨牌对列的限制没有影响。</strong></p>\r\n<p>因此我们可以先看行的限制，显然，如果一行中有奇数个竖着放的骨牌则无解。</p>\r\n<p>然后分类讨论：</p>\r\n<ul>\r\n<li>若当前格子是骨牌的上侧，没有限制，但要考虑后面的格子。</li>\r\n<li>若当前格子是骨牌的下侧，由于上一行已经遍历过，当前格子的状态就已经确定了。</li>\r\n</ul>\r\n<p>因此我们可以记录三个数字，<span\r\nclass=\"math inline\">\\(cnt_{1}\\)</span> 表示没有限制的格子数量，<span\r\nclass=\"math inline\">\\(cnt_{2}\\)</span> 表示一定需要染黑的数量，<span\r\nclass=\"math inline\">\\(cnt_{3}\\)</span> 表示一定需要染白的数量。</p>\r\n<p>统计结束后，对于每个没有限制的格子，我们贪心的选择当前少的颜色涂，数量相同的时候随便选一个就行，这样到最后如果两个颜色数量还不同就无解了。</p>\r\n<p>列的限制同理即可。</p>\r\n<p>时间复杂度 <span class=\"math inline\">\\(\\Omicron \\left( n \\times\r\nm\\right)\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">char</span> mp[<span class=\"number\">510</span>][<span class=\"number\">510</span>],ans[<span class=\"number\">510</span>][<span class=\"number\">510</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n),<span class=\"built_in\">read</span>(m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>;j &lt;= m;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans[i][j] = <span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,mp[i] + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 是否有答案；</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 先考虑行的情况，由于横着的不会造成影响直接跳过</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>,cnt1,cnt2,cnt3;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// cnt1 无法确定个数</span></span><br><span class=\"line\">        <span class=\"comment\">// cnt2 确定的 B</span></span><br><span class=\"line\">        <span class=\"comment\">// cnt3 确定的 W</span></span><br><span class=\"line\">        cnt1 = cnt2 = cnt3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>;j &lt;= m;j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mp[i][j] == <span class=\"string\">&#x27;U&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ++cnt1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mp[i][j] == <span class=\"string\">&#x27;D&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ans[i - <span class=\"number\">1</span>][j] == <span class=\"string\">&#x27;W&#x27;</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ++cnt2;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ++cnt3;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((cnt1 + cnt2 + cnt3) &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>;j &lt;= m;j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mp[i][j] == <span class=\"string\">&#x27;U&#x27;</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(cnt2 &gt; cnt3)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        ans[i][j] = <span class=\"string\">&#x27;W&#x27;</span>;</span><br><span class=\"line\">                        ++cnt3;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        ans[i][j] = <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">                        ++cnt2;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mp[i][j] == <span class=\"string\">&#x27;D&#x27;</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(ans[i - <span class=\"number\">1</span>][j] == <span class=\"string\">&#x27;W&#x27;</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        ans[i][j] = <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span></span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        ans[i][j] = <span class=\"string\">&#x27;W&#x27;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt2 != cnt3) &#123;</span><br><span class=\"line\">            flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>,cnt1,cnt2,cnt3;j &lt;= m;j++) &#123;</span><br><span class=\"line\">        cnt1 = cnt2 = cnt3 = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(mp[i][j] == <span class=\"string\">&#x27;L&#x27;</span>) &#123;</span><br><span class=\"line\">                ++cnt1;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mp[i][j] == <span class=\"string\">&#x27;R&#x27;</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(ans[i][j - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;W&#x27;</span>) &#123;</span><br><span class=\"line\">                    ++cnt2;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    ++cnt3;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((cnt1 + cnt2 + cnt3) &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(mp[i][j] == <span class=\"string\">&#x27;L&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(cnt2 &gt; cnt3) &#123;</span><br><span class=\"line\">                        ans[i][j] = <span class=\"string\">&#x27;W&#x27;</span>;</span><br><span class=\"line\">                        ++cnt3;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        ans[i][j] = <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">                        ++cnt2;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(mp[i][j] == <span class=\"string\">&#x27;R&#x27;</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(ans[i][j - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;W&#x27;</span>)&#123;</span><br><span class=\"line\">                        ans[i][j] = <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                        ans[i][j] = <span class=\"string\">&#x27;W&#x27;</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt2 != cnt3)&#123;</span><br><span class=\"line\">            flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag == <span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>;j &lt;= m;j++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(ans[i][j]);</span><br><span class=\"line\">            ans[i][j] = <span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;<span class=\"built_in\">solution</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1864B Swap and Reverse 题解","mathjax":true,"_content":"\n# CF1864B Swap and Reverse 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF1864B)\n\n[Codeforces](https://codeforces.com/problemset/problem/1864/B)\n\n## Description\n\n给定正整数 $n,k$ 和一个长度为 $n$ 的字符串 $s$，找到能通过任意次数的以下操作得到的具有最小字典序的字符串。\n\n- 选择一个 $i \\in [1,n - 2]$，交换 $s_{i}$ 和 $s_{i + 2}$。\n\n- 选择一个 $i \\in [1,n - k + 1]$，将字符串的区间 $s[i \\dots i + k-1]$ 翻转。\n\n多组测试数据， $1\\leq k < n \\leq 10^{5}$。\n\n## Solution\n\n- 操作一：看到可以任意次数交换 $s_{i}$ 和 $s_{i + 2}$，就可以想到神奇的排序算法，就相当于可以交换 **奇偶性相同的两个字符**。\n\n- 操作二：翻转长度为 $k$ 的区间\n  + 若 $k$ 为奇数，可以通过操作一实现，没有任何意义。\n  + 若 $k$ 为偶数，可以改变某字符出现位置奇偶性，结合操作一，可以任意交换字符串内字符。\n  \n因此我们只需分类讨论 $k \\bmod 2$ 的值进行排序即可。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 510101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T;\nint n,k;\nchar s[max_n];\nvoid solution()\n{\n    read(n),read(k);\n    scanf(\"%s\",s + 1);\n    if(k & 1)\n    {\n        vector<char> mp[2];\n        for(int i = 1;i <= n;i++)\n        {\n            mp[i & 1].push_back(s[i]);\n        }\n        sort(mp[1].begin(),mp[1].end());\n        sort(mp[0].begin(),mp[0].end());\n        int cnt[2];\n        cnt[0] = cnt[1] = 0;\n        for(int i = 1;i <= n;i++)\n        {\n            putchar(mp[i & 1][cnt[i & 1]++]);\n        }\n        puts(\"\");\n    }\n    else\n    {\n        sort(s + 1,s + n + 1);\n        for(int i = 1;i <= n;i++)\n        {\n            putchar(s[i]);\n        }\n        puts(\"\");\n    }\n}\nsigned main()\n{\n    read(T);\n    while(T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```","source":"_posts/CF1864B Swap and Reverse 题解.md","raw":"---\ntitle: \"CF1864B Swap and Reverse 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF1864B Swap and Reverse 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF1864B)\n\n[Codeforces](https://codeforces.com/problemset/problem/1864/B)\n\n## Description\n\n给定正整数 $n,k$ 和一个长度为 $n$ 的字符串 $s$，找到能通过任意次数的以下操作得到的具有最小字典序的字符串。\n\n- 选择一个 $i \\in [1,n - 2]$，交换 $s_{i}$ 和 $s_{i + 2}$。\n\n- 选择一个 $i \\in [1,n - k + 1]$，将字符串的区间 $s[i \\dots i + k-1]$ 翻转。\n\n多组测试数据， $1\\leq k < n \\leq 10^{5}$。\n\n## Solution\n\n- 操作一：看到可以任意次数交换 $s_{i}$ 和 $s_{i + 2}$，就可以想到神奇的排序算法，就相当于可以交换 **奇偶性相同的两个字符**。\n\n- 操作二：翻转长度为 $k$ 的区间\n  + 若 $k$ 为奇数，可以通过操作一实现，没有任何意义。\n  + 若 $k$ 为偶数，可以改变某字符出现位置奇偶性，结合操作一，可以任意交换字符串内字符。\n  \n因此我们只需分类讨论 $k \\bmod 2$ 的值进行排序即可。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 510101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T;\nint n,k;\nchar s[max_n];\nvoid solution()\n{\n    read(n),read(k);\n    scanf(\"%s\",s + 1);\n    if(k & 1)\n    {\n        vector<char> mp[2];\n        for(int i = 1;i <= n;i++)\n        {\n            mp[i & 1].push_back(s[i]);\n        }\n        sort(mp[1].begin(),mp[1].end());\n        sort(mp[0].begin(),mp[0].end());\n        int cnt[2];\n        cnt[0] = cnt[1] = 0;\n        for(int i = 1;i <= n;i++)\n        {\n            putchar(mp[i & 1][cnt[i & 1]++]);\n        }\n        puts(\"\");\n    }\n    else\n    {\n        sort(s + 1,s + n + 1);\n        for(int i = 1;i <= n;i++)\n        {\n            putchar(s[i]);\n        }\n        puts(\"\");\n    }\n}\nsigned main()\n{\n    read(T);\n    while(T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```","slug":"CF1864B Swap and Reverse 题解","published":1,"date":"2023-10-04T14:11:08.253Z","updated":"2023-10-04T14:11:08.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9z7001rosja4h60gqya","content":"<h1 id=\"cf1864b-swap-and-reverse-题解\">CF1864B Swap and Reverse\r\n题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1864B\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1864/B\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定正整数 <span class=\"math inline\">\\(n,k\\)</span> 和一个长度为\r\n<span class=\"math inline\">\\(n\\)</span> 的字符串 <span\r\nclass=\"math inline\">\\(s\\)</span>，找到能通过任意次数的以下操作得到的具有最小字典序的字符串。</p>\r\n<ul>\r\n<li><p>选择一个 <span class=\"math inline\">\\(i \\in [1,n -\r\n2]\\)</span>，交换 <span class=\"math inline\">\\(s_{i}\\)</span> 和 <span\r\nclass=\"math inline\">\\(s_{i + 2}\\)</span>。</p></li>\r\n<li><p>选择一个 <span class=\"math inline\">\\(i \\in [1,n - k +\r\n1]\\)</span>，将字符串的区间 <span class=\"math inline\">\\(s[i \\dots i +\r\nk-1]\\)</span> 翻转。</p></li>\r\n</ul>\r\n<p>多组测试数据， <span class=\"math inline\">\\(1\\leq k &lt; n \\leq\r\n10^{5}\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<ul>\r\n<li><p>操作一：看到可以任意次数交换 <span\r\nclass=\"math inline\">\\(s_{i}\\)</span> 和 <span class=\"math inline\">\\(s_{i\r\n+ 2}\\)</span>，就可以想到神奇的排序算法，就相当于可以交换\r\n<strong>奇偶性相同的两个字符</strong>。</p></li>\r\n<li><p>操作二：翻转长度为 <span class=\"math inline\">\\(k\\)</span>\r\n的区间</p>\r\n<ul>\r\n<li>若 <span class=\"math inline\">\\(k\\)</span>\r\n为奇数，可以通过操作一实现，没有任何意义。</li>\r\n<li>若 <span class=\"math inline\">\\(k\\)</span>\r\n为偶数，可以改变某字符出现位置奇偶性，结合操作一，可以任意交换字符串内字符。</li>\r\n</ul></li>\r\n</ul>\r\n<p>因此我们只需分类讨论 <span class=\"math inline\">\\(k \\bmod 2\\)</span>\r\n的值进行排序即可。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 510101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T;</span><br><span class=\"line\"><span class=\"type\">int</span> n,k;</span><br><span class=\"line\"><span class=\"type\">char</span> s[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n),<span class=\"built_in\">read</span>(k);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,s + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">char</span>&gt; mp[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mp[i &amp; <span class=\"number\">1</span>].<span class=\"built_in\">push_back</span>(s[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(mp[<span class=\"number\">1</span>].<span class=\"built_in\">begin</span>(),mp[<span class=\"number\">1</span>].<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(mp[<span class=\"number\">0</span>].<span class=\"built_in\">begin</span>(),mp[<span class=\"number\">0</span>].<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"type\">int</span> cnt[<span class=\"number\">2</span>];</span><br><span class=\"line\">        cnt[<span class=\"number\">0</span>] = cnt[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(mp[i &amp; <span class=\"number\">1</span>][cnt[i &amp; <span class=\"number\">1</span>]++]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(s + <span class=\"number\">1</span>,s + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(s[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf1864b-swap-and-reverse-题解\">CF1864B Swap and Reverse\r\n题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1864B\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1864/B\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定正整数 <span class=\"math inline\">\\(n,k\\)</span> 和一个长度为\r\n<span class=\"math inline\">\\(n\\)</span> 的字符串 <span\r\nclass=\"math inline\">\\(s\\)</span>，找到能通过任意次数的以下操作得到的具有最小字典序的字符串。</p>\r\n<ul>\r\n<li><p>选择一个 <span class=\"math inline\">\\(i \\in [1,n -\r\n2]\\)</span>，交换 <span class=\"math inline\">\\(s_{i}\\)</span> 和 <span\r\nclass=\"math inline\">\\(s_{i + 2}\\)</span>。</p></li>\r\n<li><p>选择一个 <span class=\"math inline\">\\(i \\in [1,n - k +\r\n1]\\)</span>，将字符串的区间 <span class=\"math inline\">\\(s[i \\dots i +\r\nk-1]\\)</span> 翻转。</p></li>\r\n</ul>\r\n<p>多组测试数据， <span class=\"math inline\">\\(1\\leq k &lt; n \\leq\r\n10^{5}\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<ul>\r\n<li><p>操作一：看到可以任意次数交换 <span\r\nclass=\"math inline\">\\(s_{i}\\)</span> 和 <span class=\"math inline\">\\(s_{i\r\n+ 2}\\)</span>，就可以想到神奇的排序算法，就相当于可以交换\r\n<strong>奇偶性相同的两个字符</strong>。</p></li>\r\n<li><p>操作二：翻转长度为 <span class=\"math inline\">\\(k\\)</span>\r\n的区间</p>\r\n<ul>\r\n<li>若 <span class=\"math inline\">\\(k\\)</span>\r\n为奇数，可以通过操作一实现，没有任何意义。</li>\r\n<li>若 <span class=\"math inline\">\\(k\\)</span>\r\n为偶数，可以改变某字符出现位置奇偶性，结合操作一，可以任意交换字符串内字符。</li>\r\n</ul></li>\r\n</ul>\r\n<p>因此我们只需分类讨论 <span class=\"math inline\">\\(k \\bmod 2\\)</span>\r\n的值进行排序即可。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 510101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T;</span><br><span class=\"line\"><span class=\"type\">int</span> n,k;</span><br><span class=\"line\"><span class=\"type\">char</span> s[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n),<span class=\"built_in\">read</span>(k);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,s + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">char</span>&gt; mp[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mp[i &amp; <span class=\"number\">1</span>].<span class=\"built_in\">push_back</span>(s[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(mp[<span class=\"number\">1</span>].<span class=\"built_in\">begin</span>(),mp[<span class=\"number\">1</span>].<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(mp[<span class=\"number\">0</span>].<span class=\"built_in\">begin</span>(),mp[<span class=\"number\">0</span>].<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"type\">int</span> cnt[<span class=\"number\">2</span>];</span><br><span class=\"line\">        cnt[<span class=\"number\">0</span>] = cnt[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(mp[i &amp; <span class=\"number\">1</span>][cnt[i &amp; <span class=\"number\">1</span>]++]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(s + <span class=\"number\">1</span>,s + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">putchar</span>(s[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1864C Divisor Chain 题解","mathjax":true,"_content":"\n# CF1864C Divisor Chain 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF1864C)\n\n[Codeforce](https://codeforces.com/problemset/problem/1864/C)\n\n## Description\n\n给定一个整数 $x$，目标是在最多 $10^{3}$ 次操作内把 $x$ 减到 $1$。\n\n定义一个操作：选择一个 $x$ 的因数 $d$，把 $x$ 修改为 $x-d$。\n\n同时还有一个额外的限制：相同的 $d$ 值不能选择超过 $2$ 次。\n\n有 $t$ 组测试数据。\n\n数据范围：$1\\le t\\le 10^3,2\\le x\\le 10^9$。\n\n## Solution\n\n一个很显然的事情是对于一个 $x = 2^{k}$，我们只需要 $k$ 次操作就可以了，具体的，每次我们让 $x$ 变为 $\\frac{x}{2}$，直到 $x = 1$，这个过程每个数只会用一次。\n\n因此让我们考虑如何让 $x = 2^{k}$，我们可以保留其二进制下最高位的 $1$，将其余的全部删除。具体的，我们每次将 $x$ 消掉二进制下最低位的 $1$，这个过程可以用 $\\operatorname{lowbit}(x)$  轻松完成。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T,n;\nint lowbit(int x)\n{\n    return (-x)&x;\n}\nvector<int> ans;\nvoid solution()\n{\n    ans.clear();\n    read(n);\n    ans.push_back(n);\n    int c = 0;\n    while(n != lowbit(n))\n    {\n        ans.push_back(n - lowbit(n));\n        n -= lowbit(n);\n    }\n    while(n > 1)\n    {\n        ans.push_back(n / 2);\n        n /= 2;\n    }\n    writeln(ans.size());\n    for(auto now:ans)\n    {\n        writesp(now);\n    }\n    puts(\"\");\n}\nsigned main()\n{\n    read(T);\n    while(T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```","source":"_posts/CF1864C Divisor Chain 题解.md","raw":"---\ntitle: \"CF1864C Divisor Chain 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF1864C Divisor Chain 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF1864C)\n\n[Codeforce](https://codeforces.com/problemset/problem/1864/C)\n\n## Description\n\n给定一个整数 $x$，目标是在最多 $10^{3}$ 次操作内把 $x$ 减到 $1$。\n\n定义一个操作：选择一个 $x$ 的因数 $d$，把 $x$ 修改为 $x-d$。\n\n同时还有一个额外的限制：相同的 $d$ 值不能选择超过 $2$ 次。\n\n有 $t$ 组测试数据。\n\n数据范围：$1\\le t\\le 10^3,2\\le x\\le 10^9$。\n\n## Solution\n\n一个很显然的事情是对于一个 $x = 2^{k}$，我们只需要 $k$ 次操作就可以了，具体的，每次我们让 $x$ 变为 $\\frac{x}{2}$，直到 $x = 1$，这个过程每个数只会用一次。\n\n因此让我们考虑如何让 $x = 2^{k}$，我们可以保留其二进制下最高位的 $1$，将其余的全部删除。具体的，我们每次将 $x$ 消掉二进制下最低位的 $1$，这个过程可以用 $\\operatorname{lowbit}(x)$  轻松完成。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T,n;\nint lowbit(int x)\n{\n    return (-x)&x;\n}\nvector<int> ans;\nvoid solution()\n{\n    ans.clear();\n    read(n);\n    ans.push_back(n);\n    int c = 0;\n    while(n != lowbit(n))\n    {\n        ans.push_back(n - lowbit(n));\n        n -= lowbit(n);\n    }\n    while(n > 1)\n    {\n        ans.push_back(n / 2);\n        n /= 2;\n    }\n    writeln(ans.size());\n    for(auto now:ans)\n    {\n        writesp(now);\n    }\n    puts(\"\");\n}\nsigned main()\n{\n    read(T);\n    while(T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```","slug":"CF1864C Divisor Chain 题解","published":1,"date":"2023-10-04T14:11:08.253Z","updated":"2023-10-04T14:11:08.253Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9z9001tosja8upe4nc8","content":"<h1 id=\"cf1864c-divisor-chain-题解\">CF1864C Divisor Chain 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1864C\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1864/C\">Codeforce</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定一个整数 <span class=\"math inline\">\\(x\\)</span>，目标是在最多\r\n<span class=\"math inline\">\\(10^{3}\\)</span> 次操作内把 <span\r\nclass=\"math inline\">\\(x\\)</span> 减到 <span\r\nclass=\"math inline\">\\(1\\)</span>。</p>\r\n<p>定义一个操作：选择一个 <span class=\"math inline\">\\(x\\)</span> 的因数\r\n<span class=\"math inline\">\\(d\\)</span>，把 <span\r\nclass=\"math inline\">\\(x\\)</span> 修改为 <span\r\nclass=\"math inline\">\\(x-d\\)</span>。</p>\r\n<p>同时还有一个额外的限制：相同的 <span class=\"math inline\">\\(d\\)</span>\r\n值不能选择超过 <span class=\"math inline\">\\(2\\)</span> 次。</p>\r\n<p>有 <span class=\"math inline\">\\(t\\)</span> 组测试数据。</p>\r\n<p>数据范围：<span class=\"math inline\">\\(1\\le t\\le 10^3,2\\le x\\le\r\n10^9\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>一个很显然的事情是对于一个 <span class=\"math inline\">\\(x =\r\n2^{k}\\)</span>，我们只需要 <span class=\"math inline\">\\(k\\)</span>\r\n次操作就可以了，具体的，每次我们让 <span\r\nclass=\"math inline\">\\(x\\)</span> 变为 <span\r\nclass=\"math inline\">\\(\\frac{x}{2}\\)</span>，直到 <span\r\nclass=\"math inline\">\\(x = 1\\)</span>，这个过程每个数只会用一次。</p>\r\n<p>因此让我们考虑如何让 <span class=\"math inline\">\\(x =\r\n2^{k}\\)</span>，我们可以保留其二进制下最高位的 <span\r\nclass=\"math inline\">\\(1\\)</span>，将其余的全部删除。具体的，我们每次将\r\n<span class=\"math inline\">\\(x\\)</span> 消掉二进制下最低位的 <span\r\nclass=\"math inline\">\\(1\\)</span>，这个过程可以用 <span\r\nclass=\"math inline\">\\(\\operatorname{lowbit}(x)\\)</span> 轻松完成。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T,n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (-x)&amp;x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ans.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    ans.<span class=\"built_in\">push_back</span>(n);</span><br><span class=\"line\">    <span class=\"type\">int</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n != <span class=\"built_in\">lowbit</span>(n))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans.<span class=\"built_in\">push_back</span>(n - <span class=\"built_in\">lowbit</span>(n));</span><br><span class=\"line\">        n -= <span class=\"built_in\">lowbit</span>(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans.<span class=\"built_in\">push_back</span>(n / <span class=\"number\">2</span>);</span><br><span class=\"line\">        n /= <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> now:ans)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">writesp</span>(now);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf1864c-divisor-chain-题解\">CF1864C Divisor Chain 题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1864C\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1864/C\">Codeforce</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定一个整数 <span class=\"math inline\">\\(x\\)</span>，目标是在最多\r\n<span class=\"math inline\">\\(10^{3}\\)</span> 次操作内把 <span\r\nclass=\"math inline\">\\(x\\)</span> 减到 <span\r\nclass=\"math inline\">\\(1\\)</span>。</p>\r\n<p>定义一个操作：选择一个 <span class=\"math inline\">\\(x\\)</span> 的因数\r\n<span class=\"math inline\">\\(d\\)</span>，把 <span\r\nclass=\"math inline\">\\(x\\)</span> 修改为 <span\r\nclass=\"math inline\">\\(x-d\\)</span>。</p>\r\n<p>同时还有一个额外的限制：相同的 <span class=\"math inline\">\\(d\\)</span>\r\n值不能选择超过 <span class=\"math inline\">\\(2\\)</span> 次。</p>\r\n<p>有 <span class=\"math inline\">\\(t\\)</span> 组测试数据。</p>\r\n<p>数据范围：<span class=\"math inline\">\\(1\\le t\\le 10^3,2\\le x\\le\r\n10^9\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>一个很显然的事情是对于一个 <span class=\"math inline\">\\(x =\r\n2^{k}\\)</span>，我们只需要 <span class=\"math inline\">\\(k\\)</span>\r\n次操作就可以了，具体的，每次我们让 <span\r\nclass=\"math inline\">\\(x\\)</span> 变为 <span\r\nclass=\"math inline\">\\(\\frac{x}{2}\\)</span>，直到 <span\r\nclass=\"math inline\">\\(x = 1\\)</span>，这个过程每个数只会用一次。</p>\r\n<p>因此让我们考虑如何让 <span class=\"math inline\">\\(x =\r\n2^{k}\\)</span>，我们可以保留其二进制下最高位的 <span\r\nclass=\"math inline\">\\(1\\)</span>，将其余的全部删除。具体的，我们每次将\r\n<span class=\"math inline\">\\(x\\)</span> 消掉二进制下最低位的 <span\r\nclass=\"math inline\">\\(1\\)</span>，这个过程可以用 <span\r\nclass=\"math inline\">\\(\\operatorname{lowbit}(x)\\)</span> 轻松完成。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T,n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (-x)&amp;x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ans.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    ans.<span class=\"built_in\">push_back</span>(n);</span><br><span class=\"line\">    <span class=\"type\">int</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n != <span class=\"built_in\">lowbit</span>(n))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans.<span class=\"built_in\">push_back</span>(n - <span class=\"built_in\">lowbit</span>(n));</span><br><span class=\"line\">        n -= <span class=\"built_in\">lowbit</span>(n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans.<span class=\"built_in\">push_back</span>(n / <span class=\"number\">2</span>);</span><br><span class=\"line\">        n /= <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> now:ans)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">writesp</span>(now);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF1864D Matrix Cascade 题解","mathjax":true,"_content":"\n# CF1864D Matrix Cascade 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF1864D)\n\n[Codeforces](codeforces.com/problemset/problem/1864/D)\n\n## Description\n\n给定一个 $n\\times n$ 的 01 矩阵。\n\n定义一次操作为：选择矩阵上第 $i$ 行第 $j$ 列的格子 $(i,j)$，将其取反，并取反所有满足 $x > i, x - i \\ge |y - j|$ 的位置 $(x,y)$。\n\n其中，“取反”的意思为：把 $0$ 变为 $1$，$1$ 变为 $0$。\n\n求要把给定矩阵全变为 $0$ 的最少操作次数。\n\n有 $t$ 组测试数据。\n\n数据范围：$1\\le t\\le 10^5,2\\le n\\le 3\\times10^3$，保证所有测试数据中 $1\\le \\sum n^2\\le 9\\times10^6$。\n\n## Solution\n\n观察题目的操作，我们可以很容易的发现每次操作改变的是下面的一个等腰直角三角形（当然会因为矩阵有边界被截掉一部分）。\n\n观察这个区域左边的那条线，发现它的表达式为 $x + y = i + j$，$\\left(i,j \\right)$ 是选择的位置。也就是说，我们选择一个位置 $(i,j)$，一定不能改变 $x + y < i + j$ 的点 $(x,y)$，于是我们可以按照 $x + y$ 从小到大的顺序枚举所有点，在 $x + y$ 相同时，显然我们选择更高（即 $x$ 更小）的位置能影响的范围更大，这样就能确定唯一也是最优的方案。\n\n如果我们对于每个点直接暴力修改得到的是 $O(n^4)$ 的算法。\n\n按照顺序枚举后，我们就不需要考虑左边界了，让我们来看一下右侧的边界，根据题目条件很容易得到满足的条件是是 $x - y > i - j$。因此我们可以使用树状数组实现差分，维护每一个 $x - y$ 被更新了几次，枚举到一个点时如果 $\\left([mp_{i,j} = \\texttt{1}] + \\texttt{这个点被更新的次数}\\right) \\equiv 1 \\pmod 2$，我们需要更新 $i - j$ 并让 $ans \\gets ans + 1$。\n\n需要注意的是，树状数组无法支持负下标，因此我们将所有的 $x - y$ 统一变为 $x - y + n$，枚举范围变为 $[0,2n]$ 即可。\n\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T;\nint n;\nchar mp[5100][5100];\nint tree[10011];\ninline int lowbit(const int &i)\n{\n    return (-i)&(i);\n}\ninline void update(int x)\n{\n    for(;x <= 2 * n;x+= lowbit(x))\n    {\n        tree[x]++;\n    }\n}\ninline int query(int x)\n{\n    int res = 0;\n    for(;x;x -= lowbit(x))\n    {\n        res += tree[x];\n    }\n    return res;\n}\nint ans;\nvoid solution()\n{\n    ans = 0;\n    read(n);\n    for(int i = 1;i <= 2 * n;i++)\n    {\n        tree[i] = 0;\n    }\n    for(int i = 1;i <= n;i++)\n    {\n        scanf(\"%s\",mp[i] + 1);\n    }\n    for(int sum = 2;sum <= 2 * n;++sum)\n    {\n        for(int i = max(1LL,sum - n),j = min(n,sum - 1);i < sum && i <= n;i++,j--)\n        {\n            if(((mp[i][j] - '0') + query(i - j + n)) & 1)\n            {\n                ++ans;\n                update(i - j + n);\n            }\n        }\n    }\n    writeln(ans);\n}\nsigned main()\n{\n    read(T);\n    while(T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```","source":"_posts/CF1864D Matrix Cascade 题解.md","raw":"---\ntitle: \"CF1864D Matrix Cascade 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF1864D Matrix Cascade 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF1864D)\n\n[Codeforces](codeforces.com/problemset/problem/1864/D)\n\n## Description\n\n给定一个 $n\\times n$ 的 01 矩阵。\n\n定义一次操作为：选择矩阵上第 $i$ 行第 $j$ 列的格子 $(i,j)$，将其取反，并取反所有满足 $x > i, x - i \\ge |y - j|$ 的位置 $(x,y)$。\n\n其中，“取反”的意思为：把 $0$ 变为 $1$，$1$ 变为 $0$。\n\n求要把给定矩阵全变为 $0$ 的最少操作次数。\n\n有 $t$ 组测试数据。\n\n数据范围：$1\\le t\\le 10^5,2\\le n\\le 3\\times10^3$，保证所有测试数据中 $1\\le \\sum n^2\\le 9\\times10^6$。\n\n## Solution\n\n观察题目的操作，我们可以很容易的发现每次操作改变的是下面的一个等腰直角三角形（当然会因为矩阵有边界被截掉一部分）。\n\n观察这个区域左边的那条线，发现它的表达式为 $x + y = i + j$，$\\left(i,j \\right)$ 是选择的位置。也就是说，我们选择一个位置 $(i,j)$，一定不能改变 $x + y < i + j$ 的点 $(x,y)$，于是我们可以按照 $x + y$ 从小到大的顺序枚举所有点，在 $x + y$ 相同时，显然我们选择更高（即 $x$ 更小）的位置能影响的范围更大，这样就能确定唯一也是最优的方案。\n\n如果我们对于每个点直接暴力修改得到的是 $O(n^4)$ 的算法。\n\n按照顺序枚举后，我们就不需要考虑左边界了，让我们来看一下右侧的边界，根据题目条件很容易得到满足的条件是是 $x - y > i - j$。因此我们可以使用树状数组实现差分，维护每一个 $x - y$ 被更新了几次，枚举到一个点时如果 $\\left([mp_{i,j} = \\texttt{1}] + \\texttt{这个点被更新的次数}\\right) \\equiv 1 \\pmod 2$，我们需要更新 $i - j$ 并让 $ans \\gets ans + 1$。\n\n需要注意的是，树状数组无法支持负下标，因此我们将所有的 $x - y$ 统一变为 $x - y + n$，枚举范围变为 $[0,2n]$ 即可。\n\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T;\nint n;\nchar mp[5100][5100];\nint tree[10011];\ninline int lowbit(const int &i)\n{\n    return (-i)&(i);\n}\ninline void update(int x)\n{\n    for(;x <= 2 * n;x+= lowbit(x))\n    {\n        tree[x]++;\n    }\n}\ninline int query(int x)\n{\n    int res = 0;\n    for(;x;x -= lowbit(x))\n    {\n        res += tree[x];\n    }\n    return res;\n}\nint ans;\nvoid solution()\n{\n    ans = 0;\n    read(n);\n    for(int i = 1;i <= 2 * n;i++)\n    {\n        tree[i] = 0;\n    }\n    for(int i = 1;i <= n;i++)\n    {\n        scanf(\"%s\",mp[i] + 1);\n    }\n    for(int sum = 2;sum <= 2 * n;++sum)\n    {\n        for(int i = max(1LL,sum - n),j = min(n,sum - 1);i < sum && i <= n;i++,j--)\n        {\n            if(((mp[i][j] - '0') + query(i - j + n)) & 1)\n            {\n                ++ans;\n                update(i - j + n);\n            }\n        }\n    }\n    writeln(ans);\n}\nsigned main()\n{\n    read(T);\n    while(T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```","slug":"CF1864D Matrix Cascade 题解","published":1,"date":"2023-10-04T14:11:08.254Z","updated":"2023-10-04T14:11:08.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9za001vosjabre7hijd","content":"<h1 id=\"cf1864d-matrix-cascade-题解\">CF1864D Matrix Cascade 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1864D\">洛谷</a></p>\r\n<p><a href=\"codeforces.com/problemset/problem/1864/D\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定一个 <span class=\"math inline\">\\(n\\times n\\)</span> 的 01\r\n矩阵。</p>\r\n<p>定义一次操作为：选择矩阵上第 <span class=\"math inline\">\\(i\\)</span>\r\n行第 <span class=\"math inline\">\\(j\\)</span> 列的格子 <span\r\nclass=\"math inline\">\\((i,j)\\)</span>，将其取反，并取反所有满足 <span\r\nclass=\"math inline\">\\(x &gt; i, x - i \\ge |y - j|\\)</span> 的位置 <span\r\nclass=\"math inline\">\\((x,y)\\)</span>。</p>\r\n<p>其中，“取反”的意思为：把 <span class=\"math inline\">\\(0\\)</span> 变为\r\n<span class=\"math inline\">\\(1\\)</span>，<span\r\nclass=\"math inline\">\\(1\\)</span> 变为 <span\r\nclass=\"math inline\">\\(0\\)</span>。</p>\r\n<p>求要把给定矩阵全变为 <span class=\"math inline\">\\(0\\)</span>\r\n的最少操作次数。</p>\r\n<p>有 <span class=\"math inline\">\\(t\\)</span> 组测试数据。</p>\r\n<p>数据范围：<span class=\"math inline\">\\(1\\le t\\le 10^5,2\\le n\\le\r\n3\\times10^3\\)</span>，保证所有测试数据中 <span\r\nclass=\"math inline\">\\(1\\le \\sum n^2\\le 9\\times10^6\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>观察题目的操作，我们可以很容易的发现每次操作改变的是下面的一个等腰直角三角形（当然会因为矩阵有边界被截掉一部分）。</p>\r\n<p>观察这个区域左边的那条线，发现它的表达式为 <span\r\nclass=\"math inline\">\\(x + y = i + j\\)</span>，<span\r\nclass=\"math inline\">\\(\\left(i,j \\right)\\)</span>\r\n是选择的位置。也就是说，我们选择一个位置 <span\r\nclass=\"math inline\">\\((i,j)\\)</span>，一定不能改变 <span\r\nclass=\"math inline\">\\(x + y &lt; i + j\\)</span> 的点 <span\r\nclass=\"math inline\">\\((x,y)\\)</span>，于是我们可以按照 <span\r\nclass=\"math inline\">\\(x + y\\)</span> 从小到大的顺序枚举所有点，在 <span\r\nclass=\"math inline\">\\(x + y\\)</span> 相同时，显然我们选择更高（即 <span\r\nclass=\"math inline\">\\(x\\)</span>\r\n更小）的位置能影响的范围更大，这样就能确定唯一也是最优的方案。</p>\r\n<p>如果我们对于每个点直接暴力修改得到的是 <span\r\nclass=\"math inline\">\\(O(n^4)\\)</span> 的算法。</p>\r\n<p>按照顺序枚举后，我们就不需要考虑左边界了，让我们来看一下右侧的边界，根据题目条件很容易得到满足的条件是是\r\n<span class=\"math inline\">\\(x - y &gt; i -\r\nj\\)</span>。因此我们可以使用树状数组实现差分，维护每一个 <span\r\nclass=\"math inline\">\\(x - y\\)</span> 被更新了几次，枚举到一个点时如果\r\n<span class=\"math inline\">\\(\\left([mp_{i,j} = \\texttt{1}] +\r\n\\texttt{这个点被更新的次数}\\right) \\equiv 1 \\pmod\r\n2\\)</span>，我们需要更新 <span class=\"math inline\">\\(i - j\\)</span> 并让\r\n<span class=\"math inline\">\\(ans \\gets ans + 1\\)</span>。</p>\r\n<p>需要注意的是，树状数组无法支持负下标，因此我们将所有的 <span\r\nclass=\"math inline\">\\(x - y\\)</span> 统一变为 <span\r\nclass=\"math inline\">\\(x - y + n\\)</span>，枚举范围变为 <span\r\nclass=\"math inline\">\\([0,2n]\\)</span> 即可。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">char</span> mp[<span class=\"number\">5100</span>][<span class=\"number\">5100</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> tree[<span class=\"number\">10011</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (-i)&amp;(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;x &lt;= <span class=\"number\">2</span> * n;x+= <span class=\"built_in\">lowbit</span>(x))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[x]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;x;x -= <span class=\"built_in\">lowbit</span>(x))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        res += tree[x];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= <span class=\"number\">2</span> * n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,mp[i] + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> sum = <span class=\"number\">2</span>;sum &lt;= <span class=\"number\">2</span> * n;++sum)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"built_in\">max</span>(<span class=\"number\">1LL</span>,sum - n),j = <span class=\"built_in\">min</span>(n,sum - <span class=\"number\">1</span>);i &lt; sum &amp;&amp; i &lt;= n;i++,j--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(((mp[i][j] - <span class=\"string\">&#x27;0&#x27;</span>) + <span class=\"built_in\">query</span>(i - j + n)) &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ++ans;</span><br><span class=\"line\">                <span class=\"built_in\">update</span>(i - j + n);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf1864d-matrix-cascade-题解\">CF1864D Matrix Cascade 题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1864D\">洛谷</a></p>\r\n<p><a href=\"codeforces.com/problemset/problem/1864/D\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定一个 <span class=\"math inline\">\\(n\\times n\\)</span> 的 01\r\n矩阵。</p>\r\n<p>定义一次操作为：选择矩阵上第 <span class=\"math inline\">\\(i\\)</span>\r\n行第 <span class=\"math inline\">\\(j\\)</span> 列的格子 <span\r\nclass=\"math inline\">\\((i,j)\\)</span>，将其取反，并取反所有满足 <span\r\nclass=\"math inline\">\\(x &gt; i, x - i \\ge |y - j|\\)</span> 的位置 <span\r\nclass=\"math inline\">\\((x,y)\\)</span>。</p>\r\n<p>其中，“取反”的意思为：把 <span class=\"math inline\">\\(0\\)</span> 变为\r\n<span class=\"math inline\">\\(1\\)</span>，<span\r\nclass=\"math inline\">\\(1\\)</span> 变为 <span\r\nclass=\"math inline\">\\(0\\)</span>。</p>\r\n<p>求要把给定矩阵全变为 <span class=\"math inline\">\\(0\\)</span>\r\n的最少操作次数。</p>\r\n<p>有 <span class=\"math inline\">\\(t\\)</span> 组测试数据。</p>\r\n<p>数据范围：<span class=\"math inline\">\\(1\\le t\\le 10^5,2\\le n\\le\r\n3\\times10^3\\)</span>，保证所有测试数据中 <span\r\nclass=\"math inline\">\\(1\\le \\sum n^2\\le 9\\times10^6\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>观察题目的操作，我们可以很容易的发现每次操作改变的是下面的一个等腰直角三角形（当然会因为矩阵有边界被截掉一部分）。</p>\r\n<p>观察这个区域左边的那条线，发现它的表达式为 <span\r\nclass=\"math inline\">\\(x + y = i + j\\)</span>，<span\r\nclass=\"math inline\">\\(\\left(i,j \\right)\\)</span>\r\n是选择的位置。也就是说，我们选择一个位置 <span\r\nclass=\"math inline\">\\((i,j)\\)</span>，一定不能改变 <span\r\nclass=\"math inline\">\\(x + y &lt; i + j\\)</span> 的点 <span\r\nclass=\"math inline\">\\((x,y)\\)</span>，于是我们可以按照 <span\r\nclass=\"math inline\">\\(x + y\\)</span> 从小到大的顺序枚举所有点，在 <span\r\nclass=\"math inline\">\\(x + y\\)</span> 相同时，显然我们选择更高（即 <span\r\nclass=\"math inline\">\\(x\\)</span>\r\n更小）的位置能影响的范围更大，这样就能确定唯一也是最优的方案。</p>\r\n<p>如果我们对于每个点直接暴力修改得到的是 <span\r\nclass=\"math inline\">\\(O(n^4)\\)</span> 的算法。</p>\r\n<p>按照顺序枚举后，我们就不需要考虑左边界了，让我们来看一下右侧的边界，根据题目条件很容易得到满足的条件是是\r\n<span class=\"math inline\">\\(x - y &gt; i -\r\nj\\)</span>。因此我们可以使用树状数组实现差分，维护每一个 <span\r\nclass=\"math inline\">\\(x - y\\)</span> 被更新了几次，枚举到一个点时如果\r\n<span class=\"math inline\">\\(\\left([mp_{i,j} = \\texttt{1}] +\r\n\\texttt{这个点被更新的次数}\\right) \\equiv 1 \\pmod\r\n2\\)</span>，我们需要更新 <span class=\"math inline\">\\(i - j\\)</span> 并让\r\n<span class=\"math inline\">\\(ans \\gets ans + 1\\)</span>。</p>\r\n<p>需要注意的是，树状数组无法支持负下标，因此我们将所有的 <span\r\nclass=\"math inline\">\\(x - y\\)</span> 统一变为 <span\r\nclass=\"math inline\">\\(x - y + n\\)</span>，枚举范围变为 <span\r\nclass=\"math inline\">\\([0,2n]\\)</span> 即可。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">char</span> mp[<span class=\"number\">5100</span>][<span class=\"number\">5100</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> tree[<span class=\"number\">10011</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">int</span> &amp;i)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (-i)&amp;(i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;x &lt;= <span class=\"number\">2</span> * n;x+= <span class=\"built_in\">lowbit</span>(x))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[x]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;x;x -= <span class=\"built_in\">lowbit</span>(x))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        res += tree[x];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= <span class=\"number\">2</span> * n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,mp[i] + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> sum = <span class=\"number\">2</span>;sum &lt;= <span class=\"number\">2</span> * n;++sum)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"built_in\">max</span>(<span class=\"number\">1LL</span>,sum - n),j = <span class=\"built_in\">min</span>(n,sum - <span class=\"number\">1</span>);i &lt; sum &amp;&amp; i &lt;= n;i++,j--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(((mp[i][j] - <span class=\"string\">&#x27;0&#x27;</span>) + <span class=\"built_in\">query</span>(i - j + n)) &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ++ans;</span><br><span class=\"line\">                <span class=\"built_in\">update</span>(i - j + n);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF485B Valuable Resources 题解","mathjax":true,"_content":"\n# CF485B Valuable Resources 题解\n\n<!-- more -->\n\n## 题意简述\n\n在同一平面直角坐标系中有 $n$ 个点，给出它们的横纵坐标，用最小的**平行于坐标轴**的正方形将它们全部框起来，求该正方形的面积。\n\n## 题目解析\n\n首先如果我们需要把所有点框起来，就要保证**正方形的左侧边横坐标小于等于所有点最小的横坐标，正方形的右侧边横坐标大于等于所有点最大的横坐标**，上下边同理,如图，不在赘述。\n![](https://cdn.luogu.com.cn/upload/image_hosting/vt67x3xw.png)\n\n由于题目需要的是一个**正方形**，那我们就取最长边的长度作为边长即可包围所有点，于是有以下公式。\n\n$$S = a \\times a = max^2 (\\max_{i = 1}^{n}x_{i} - \\min_{i = 1}^{n}x_{i} ,\\max_{i = 1}^{n}y_{i} - \\min_{i = 1}^{n}y_{i})$$\n\n同时需要注意数据范围（题目中没写，原题为 $10^9$），开 `long long` 即可。\n\n## 完整代码\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max(A, B) (A > B) ? (A) : (B)\n#define min(A, B) (A < B) ? (A) : (B)\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint n;\nint max_x, max_y, min_x, min_y;\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(n);\n    max_x = max_y = LONG_LONG_MIN;\n    min_x = min_y = LONG_LONG_MAX;\n    for (int i = 1, x, y; i <= n; i++)\n    {\n        read(x), read(y);\n        max_x = max(max_x, x);\n        min_x = min(min_x, x);\n        max_y = max(max_y, y);\n        min_y = min(min_y, y);\n    }\n    int l = max(max_x - min_x, max_y - min_y);\n    writeln(l * l);\n    return 0;\n}\n```\n","source":"_posts/CF485B Valuable Resources 题解.md","raw":"---\ntitle: \"CF485B Valuable Resources 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF485B Valuable Resources 题解\n\n<!-- more -->\n\n## 题意简述\n\n在同一平面直角坐标系中有 $n$ 个点，给出它们的横纵坐标，用最小的**平行于坐标轴**的正方形将它们全部框起来，求该正方形的面积。\n\n## 题目解析\n\n首先如果我们需要把所有点框起来，就要保证**正方形的左侧边横坐标小于等于所有点最小的横坐标，正方形的右侧边横坐标大于等于所有点最大的横坐标**，上下边同理,如图，不在赘述。\n![](https://cdn.luogu.com.cn/upload/image_hosting/vt67x3xw.png)\n\n由于题目需要的是一个**正方形**，那我们就取最长边的长度作为边长即可包围所有点，于是有以下公式。\n\n$$S = a \\times a = max^2 (\\max_{i = 1}^{n}x_{i} - \\min_{i = 1}^{n}x_{i} ,\\max_{i = 1}^{n}y_{i} - \\min_{i = 1}^{n}y_{i})$$\n\n同时需要注意数据范围（题目中没写，原题为 $10^9$），开 `long long` 即可。\n\n## 完整代码\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max(A, B) (A > B) ? (A) : (B)\n#define min(A, B) (A < B) ? (A) : (B)\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint n;\nint max_x, max_y, min_x, min_y;\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(n);\n    max_x = max_y = LONG_LONG_MIN;\n    min_x = min_y = LONG_LONG_MAX;\n    for (int i = 1, x, y; i <= n; i++)\n    {\n        read(x), read(y);\n        max_x = max(max_x, x);\n        min_x = min(min_x, x);\n        max_y = max(max_y, y);\n        min_y = min(min_y, y);\n    }\n    int l = max(max_x - min_x, max_y - min_y);\n    writeln(l * l);\n    return 0;\n}\n```\n","slug":"CF485B Valuable Resources 题解","published":1,"date":"2023-10-04T14:11:08.254Z","updated":"2023-10-04T14:11:08.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9zb001xosjaaojgbkte","content":"<h1 id=\"cf485b-valuable-resources-题解\">CF485B Valuable Resources\r\n题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"题意简述\">题意简述</h2>\r\n<p>在同一平面直角坐标系中有 <span class=\"math inline\">\\(n\\)</span>\r\n个点，给出它们的横纵坐标，用最小的<strong>平行于坐标轴</strong>的正方形将它们全部框起来，求该正方形的面积。</p>\r\n<h2 id=\"题目解析\">题目解析</h2>\r\n<p>首先如果我们需要把所有点框起来，就要保证<strong>正方形的左侧边横坐标小于等于所有点最小的横坐标，正方形的右侧边横坐标大于等于所有点最大的横坐标</strong>，上下边同理,如图，不在赘述。\r\n<img\r\nsrc=\"https://cdn.luogu.com.cn/upload/image_hosting/vt67x3xw.png\" /></p>\r\n<p>由于题目需要的是一个<strong>正方形</strong>，那我们就取最长边的长度作为边长即可包围所有点，于是有以下公式。</p>\r\n<p><span class=\"math display\">\\[S = a \\times a = max^2 (\\max_{i =\r\n1}^{n}x_{i} - \\min_{i = 1}^{n}x_{i} ,\\max_{i = 1}^{n}y_{i} - \\min_{i =\r\n1}^{n}y_{i})\\]</span></p>\r\n<p>同时需要注意数据范围（题目中没写，原题为 <span\r\nclass=\"math inline\">\\(10^9\\)</span>），开 <code>long long</code>\r\n即可。</p>\r\n<h2 id=\"完整代码\">完整代码</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;bits/stdc++.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define int long long</span><br><span class=\"line\">#define max(A, B) (A &gt; B) ? (A) : (B)</span><br><span class=\"line\">#define min(A, B) (A &lt; B) ? (A) : (B)</span><br><span class=\"line\">void read(int &amp;p)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    p = 0;</span><br><span class=\"line\">    int k = 1;</span><br><span class=\"line\">    char c = getchar();</span><br><span class=\"line\">    while (c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (c == &#x27;-&#x27;)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = -1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while (c &gt;= &#x27;0&#x27; &amp;&amp; c &lt;= &#x27;9&#x27;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * 10 + c - &#x27;0&#x27;;</span><br><span class=\"line\">        c = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    return;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void write_(int x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (x &lt; 0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        putchar(&#x27;-&#x27;);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (x &gt; 9)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        write_(x / 10);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    putchar(x % 10 + &#x27;0&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void writesp(int x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    write_(x);</span><br><span class=\"line\">    putchar(&#x27; &#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void writeln(int x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    write_(x);</span><br><span class=\"line\">    putchar(&#x27;\\n&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int n;</span><br><span class=\"line\">int max_x, max_y, min_x, min_y;</span><br><span class=\"line\">signed main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">#if _clang_</span><br><span class=\"line\">    freopen(&quot;1.in&quot;, &quot;r&quot;, stdin);</span><br><span class=\"line\">    freopen(&quot;1.out&quot;, &quot;w&quot;, stdout);</span><br><span class=\"line\">#endif</span><br><span class=\"line\">    read(n);</span><br><span class=\"line\">    max_x = max_y = LONG_LONG_MIN;</span><br><span class=\"line\">    min_x = min_y = LONG_LONG_MAX;</span><br><span class=\"line\">    for (int i = 1, x, y; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        read(x), read(y);</span><br><span class=\"line\">        max_x = max(max_x, x);</span><br><span class=\"line\">        min_x = min(min_x, x);</span><br><span class=\"line\">        max_y = max(max_y, y);</span><br><span class=\"line\">        min_y = min(min_y, y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int l = max(max_x - min_x, max_y - min_y);</span><br><span class=\"line\">    writeln(l * l);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf485b-valuable-resources-题解\">CF485B Valuable Resources\r\n题解</h1>","more":"<h2 id=\"题意简述\">题意简述</h2>\r\n<p>在同一平面直角坐标系中有 <span class=\"math inline\">\\(n\\)</span>\r\n个点，给出它们的横纵坐标，用最小的<strong>平行于坐标轴</strong>的正方形将它们全部框起来，求该正方形的面积。</p>\r\n<h2 id=\"题目解析\">题目解析</h2>\r\n<p>首先如果我们需要把所有点框起来，就要保证<strong>正方形的左侧边横坐标小于等于所有点最小的横坐标，正方形的右侧边横坐标大于等于所有点最大的横坐标</strong>，上下边同理,如图，不在赘述。\r\n<img\r\nsrc=\"https://cdn.luogu.com.cn/upload/image_hosting/vt67x3xw.png\" /></p>\r\n<p>由于题目需要的是一个<strong>正方形</strong>，那我们就取最长边的长度作为边长即可包围所有点，于是有以下公式。</p>\r\n<p><span class=\"math display\">\\[S = a \\times a = max^2 (\\max_{i =\r\n1}^{n}x_{i} - \\min_{i = 1}^{n}x_{i} ,\\max_{i = 1}^{n}y_{i} - \\min_{i =\r\n1}^{n}y_{i})\\]</span></p>\r\n<p>同时需要注意数据范围（题目中没写，原题为 <span\r\nclass=\"math inline\">\\(10^9\\)</span>），开 <code>long long</code>\r\n即可。</p>\r\n<h2 id=\"完整代码\">完整代码</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;bits/stdc++.h&gt;</span><br><span class=\"line\">using namespace std;</span><br><span class=\"line\">#define int long long</span><br><span class=\"line\">#define max(A, B) (A &gt; B) ? (A) : (B)</span><br><span class=\"line\">#define min(A, B) (A &lt; B) ? (A) : (B)</span><br><span class=\"line\">void read(int &amp;p)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    p = 0;</span><br><span class=\"line\">    int k = 1;</span><br><span class=\"line\">    char c = getchar();</span><br><span class=\"line\">    while (c &lt; &#x27;0&#x27; || c &gt; &#x27;9&#x27;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if (c == &#x27;-&#x27;)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = -1;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while (c &gt;= &#x27;0&#x27; &amp;&amp; c &lt;= &#x27;9&#x27;)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * 10 + c - &#x27;0&#x27;;</span><br><span class=\"line\">        c = getchar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    return;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void write_(int x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (x &lt; 0)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        putchar(&#x27;-&#x27;);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (x &gt; 9)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        write_(x / 10);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    putchar(x % 10 + &#x27;0&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void writesp(int x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    write_(x);</span><br><span class=\"line\">    putchar(&#x27; &#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void writeln(int x)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    write_(x);</span><br><span class=\"line\">    putchar(&#x27;\\n&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int n;</span><br><span class=\"line\">int max_x, max_y, min_x, min_y;</span><br><span class=\"line\">signed main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">#if _clang_</span><br><span class=\"line\">    freopen(&quot;1.in&quot;, &quot;r&quot;, stdin);</span><br><span class=\"line\">    freopen(&quot;1.out&quot;, &quot;w&quot;, stdout);</span><br><span class=\"line\">#endif</span><br><span class=\"line\">    read(n);</span><br><span class=\"line\">    max_x = max_y = LONG_LONG_MIN;</span><br><span class=\"line\">    min_x = min_y = LONG_LONG_MAX;</span><br><span class=\"line\">    for (int i = 1, x, y; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        read(x), read(y);</span><br><span class=\"line\">        max_x = max(max_x, x);</span><br><span class=\"line\">        min_x = min(min_x, x);</span><br><span class=\"line\">        max_y = max(max_y, y);</span><br><span class=\"line\">        min_y = min(min_y, y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    int l = max(max_x - min_x, max_y - min_y);</span><br><span class=\"line\">    writeln(l * l);</span><br><span class=\"line\">    return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"CF587A Duff and Weight Lifting 题解","mathjax":true,"_content":"\n# CF587A Duff and Weight Lifting 题解\n\n<!-- more -->\n\n\n## Link\n\n[Luogu](https://www.luogu.com.cn/problem/CF587A)\n\n[Codeforces](https://codeforces.com/problemset/problem/587/A)\n\n## Description\n\n给你一串数，两个 $a$ 可以合成一个 $a + 1$，一直合成，最终剩余的数有多少个？\n\n## Solution\n\n既然两个 $a$ 可以合成 $a + 1$，$nums_a$ 个 $a$ 就可以合成 $ \\left \\lfloor \\frac{nums_a}{2} \\right \\rfloor$ 个 $a + 1$，同时若剩余，答案加一。\n\n写成代码就是这样：\n\n```cpp\nnums[i + 1] += nums[i] / 2;\nif (nums[i] % 2)\n{\n    ++ans;\n}\n```\n\n每次只可能更改 $nums_{a + 1}$ 的值，正序循环无后效性，直接正序枚举即可。注意，最大的数字可能进位，因此我们的循环应该为\n\n```cpp\nfor (int i = 0; i <= mx || nums[i] != 0; i++)\n```\n\n其中 $mx$ 为输入的最大的数。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 1001001\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint n, nums[max_n], mx;\nint ans = 0;\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(n);\n    for (int i = 1, val; i <= n; i++)\n    {\n        read(val);\n        ++nums[val];\n        mx = max(mx, val);\n    }\n    for (int i = 0; i <= mx || nums[i] != 0; i++)\n    {\n        if (!nums[i])\n        {\n            continue;\n        }\n        nums[i + 1] += nums[i] / 2;\n        if (nums[i] % 2)\n        {\n            ++ans;\n        }\n    }\n    writeln(ans);\n    return 0;\n}\n```\n\n---\n\n[![Page Views Count](https://badges.toozhao.com/badges/01GXQGTX3Q9S9FMKWNMRG4REBS/orange.svg)](https://badges.toozhao.com/stats/01GXQGTX3Q9S9FMKWNMRG4REBS \"Get your own page views count badge on badges.toozhao.com\")\n","source":"_posts/CF587A Duff and Weight Lifting 题解.md","raw":"---\ntitle: \"CF587A Duff and Weight Lifting 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF587A Duff and Weight Lifting 题解\n\n<!-- more -->\n\n\n## Link\n\n[Luogu](https://www.luogu.com.cn/problem/CF587A)\n\n[Codeforces](https://codeforces.com/problemset/problem/587/A)\n\n## Description\n\n给你一串数，两个 $a$ 可以合成一个 $a + 1$，一直合成，最终剩余的数有多少个？\n\n## Solution\n\n既然两个 $a$ 可以合成 $a + 1$，$nums_a$ 个 $a$ 就可以合成 $ \\left \\lfloor \\frac{nums_a}{2} \\right \\rfloor$ 个 $a + 1$，同时若剩余，答案加一。\n\n写成代码就是这样：\n\n```cpp\nnums[i + 1] += nums[i] / 2;\nif (nums[i] % 2)\n{\n    ++ans;\n}\n```\n\n每次只可能更改 $nums_{a + 1}$ 的值，正序循环无后效性，直接正序枚举即可。注意，最大的数字可能进位，因此我们的循环应该为\n\n```cpp\nfor (int i = 0; i <= mx || nums[i] != 0; i++)\n```\n\n其中 $mx$ 为输入的最大的数。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 1001001\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint n, nums[max_n], mx;\nint ans = 0;\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(n);\n    for (int i = 1, val; i <= n; i++)\n    {\n        read(val);\n        ++nums[val];\n        mx = max(mx, val);\n    }\n    for (int i = 0; i <= mx || nums[i] != 0; i++)\n    {\n        if (!nums[i])\n        {\n            continue;\n        }\n        nums[i + 1] += nums[i] / 2;\n        if (nums[i] % 2)\n        {\n            ++ans;\n        }\n    }\n    writeln(ans);\n    return 0;\n}\n```\n\n---\n\n[![Page Views Count](https://badges.toozhao.com/badges/01GXQGTX3Q9S9FMKWNMRG4REBS/orange.svg)](https://badges.toozhao.com/stats/01GXQGTX3Q9S9FMKWNMRG4REBS \"Get your own page views count badge on badges.toozhao.com\")\n","slug":"CF587A Duff and Weight Lifting 题解","published":1,"date":"2023-10-04T14:11:08.255Z","updated":"2023-10-04T14:11:08.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9zc001zosjaen6nhcrg","content":"<h1 id=\"cf587a-duff-and-weight-lifting-题解\">CF587A Duff and Weight\r\nLifting 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"link\">Link</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF587A\">Luogu</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/587/A\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给你一串数，两个 <span class=\"math inline\">\\(a\\)</span> 可以合成一个\r\n<span class=\"math inline\">\\(a +\r\n1\\)</span>，一直合成，最终剩余的数有多少个？</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>既然两个 <span class=\"math inline\">\\(a\\)</span> 可以合成 <span\r\nclass=\"math inline\">\\(a + 1\\)</span>，<span\r\nclass=\"math inline\">\\(nums_a\\)</span> 个 <span\r\nclass=\"math inline\">\\(a\\)</span> 就可以合成 $ $ 个 <span\r\nclass=\"math inline\">\\(a + 1\\)</span>，同时若剩余，答案加一。</p>\r\n<p>写成代码就是这样：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums[i + <span class=\"number\">1</span>] += nums[i] / <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (nums[i] % <span class=\"number\">2</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ++ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>每次只可能更改 <span class=\"math inline\">\\(nums_{a + 1}\\)</span>\r\n的值，正序循环无后效性，直接正序枚举即可。注意，最大的数字可能进位，因此我们的循环应该为</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= mx || nums[i] != <span class=\"number\">0</span>; i++)</span><br></pre></td></tr></table></figure>\r\n<p>其中 <span class=\"math inline\">\\(mx\\)</span> 为输入的最大的数。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 1001001</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n, nums[max_n], mx;</span><br><span class=\"line\"><span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>, val; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(val);</span><br><span class=\"line\">        ++nums[val];</span><br><span class=\"line\">        mx = <span class=\"built_in\">max</span>(mx, val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= mx || nums[i] != <span class=\"number\">0</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!nums[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nums[i + <span class=\"number\">1</span>] += nums[i] / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] % <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++ans;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<hr />\r\n<p><a href=\"https://badges.toozhao.com/stats/01GXQGTX3Q9S9FMKWNMRG4REBS\"\r\ntitle=\"Get your own page views count badge on badges.toozhao.com\"><img\r\nsrc=\"https://badges.toozhao.com/badges/01GXQGTX3Q9S9FMKWNMRG4REBS/orange.svg\"\r\nalt=\"Page Views Count\" /></a></p>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf587a-duff-and-weight-lifting-题解\">CF587A Duff and Weight\r\nLifting 题解</h1>","more":"<h2 id=\"link\">Link</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF587A\">Luogu</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/587/A\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给你一串数，两个 <span class=\"math inline\">\\(a\\)</span> 可以合成一个\r\n<span class=\"math inline\">\\(a +\r\n1\\)</span>，一直合成，最终剩余的数有多少个？</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>既然两个 <span class=\"math inline\">\\(a\\)</span> 可以合成 <span\r\nclass=\"math inline\">\\(a + 1\\)</span>，<span\r\nclass=\"math inline\">\\(nums_a\\)</span> 个 <span\r\nclass=\"math inline\">\\(a\\)</span> 就可以合成 $ $ 个 <span\r\nclass=\"math inline\">\\(a + 1\\)</span>，同时若剩余，答案加一。</p>\r\n<p>写成代码就是这样：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums[i + <span class=\"number\">1</span>] += nums[i] / <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (nums[i] % <span class=\"number\">2</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ++ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>每次只可能更改 <span class=\"math inline\">\\(nums_{a + 1}\\)</span>\r\n的值，正序循环无后效性，直接正序枚举即可。注意，最大的数字可能进位，因此我们的循环应该为</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= mx || nums[i] != <span class=\"number\">0</span>; i++)</span><br></pre></td></tr></table></figure>\r\n<p>其中 <span class=\"math inline\">\\(mx\\)</span> 为输入的最大的数。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 1001001</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n, nums[max_n], mx;</span><br><span class=\"line\"><span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>, val; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(val);</span><br><span class=\"line\">        ++nums[val];</span><br><span class=\"line\">        mx = <span class=\"built_in\">max</span>(mx, val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= mx || nums[i] != <span class=\"number\">0</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!nums[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        nums[i + <span class=\"number\">1</span>] += nums[i] / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] % <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++ans;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<hr />\r\n<p><a href=\"https://badges.toozhao.com/stats/01GXQGTX3Q9S9FMKWNMRG4REBS\"\r\ntitle=\"Get your own page views count badge on badges.toozhao.com\"><img\r\nsrc=\"https://badges.toozhao.com/badges/01GXQGTX3Q9S9FMKWNMRG4REBS/orange.svg\"\r\nalt=\"Page Views Count\" /></a></p>"},{"title":"CF878E Numbers on the blackboard 题解","mathjax":true,"_content":"\n# CF878E Numbers on the blackboard 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF878E)\n\n[Codeforces](https://codeforces.com/problemset/problem/878/E)\n\n## Description\n\n给出 $n$ 个数字，每次询问一个区间 $[l,r]$，对这个区间内部的点进行如下操作。 \n- 每次操作可以合并**相邻**两个数 $x,y$，用 $x+2y$ 替换它们。\n\n对于每次询问，输出当最后只剩下一个数字时，这个数字的最大值。询问互相独立，答案对 $10^9 + 7$ 取模。\n\n## Solution\n\n我们考虑把整个区间从右向左依次合并答案是什么样的。\n\n- 第一次合并 $nums_{r - 1} + 2 \\times nums_{r}$。\n- 第二次合并 $nums_{r - 2} + 2 \\times \\left (nums_{r - 1} + 2 \\times nums_{r} \\right)$。\n- $\\cdots$\n- 最后一次 $nums_{l} + 2 \\times \\left (nums_{l + 1} + 2\\times ( nums_{l + 2}  + \\cdots )\\right)$\n\n可以看出，对于每一个 $nums_{i}$，对答案的贡献都是 $2^{k} (k \\geq 0)$，并且 $\\forall i \\in [1,n-1]$，$k_{i + 1} = k_{i} + 1$。\n\n那么如果我们不是这样合并的是否还有这样的性质呢？考虑把合并的区间分成从右向左按顺序合并的若干段，易证每段仍符合该性质。合并两段的时候会发生什么呢，可以想到是将右侧一段的贡献整个乘以 $2$，也就是将右侧段的 $k$ 全部加一。\n\n因此，无论我们如何合并，最终对于整个区间每个数所乘的系数是一定的，系数变化如下（括号表示不一定存在）。即一个从 $0$ 开始的串和一些从 $1$ 开始的串。\n\n$$0,1,\\cdots,1,(2),\\cdots,1,(2),\\cdots$$\n\n想让最终结果尽可能大，可以考虑贪心。\n\n假设当前决策到第 $i$ 个数，$i - 1$ 所在的块长度为 $len$。\n\n- 若 $nums_{i} < 0$，选择不合并，单独开出来一个块，系数为 $2^{0} = 1$。\n- 若 $nums_{i} \\ge 0$，选择合并，系数为 $2^{len}$。\n- **若合并后使得该块变为正的，代表后面的可以抵消中间负数的影响，继续向前合并。**\n\n可以看出上面的过程存储每一个块类似于栈，因此我们用栈来模拟这个过程。直接实现复杂度为 $O(nq)$，我们可以离线操作，将操作按照 $r$ 排序，再利用二分查找 $l$ 右侧的第一个块，单独减去 $l$ 左侧多出来的贡献即可。时间复杂度变为 $O(n \\log n)$。合并过程中，如果遇到极大的块，不能直接继续合并，否则轻松炸 `long long`，特判这种情况，将这个块设为极大值即可。\n\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long \n#define max_n 410101\n#define mo 1000000007\nvoid read(int &p)\n{\n    int k = 1;\n    p = 0;\n    char c = getchar();\n    while(c < '0' || c > '9')\n    {\n        if(c == '-')\n        {\n            k =  -1;\n        }\n        c = getchar();\n    }\n    while(c >='0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return ;\n}\nvoid write_(int x)\n{\n    if(x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if(x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint n,m;\nint lg2[max_n],nums[max_n],sum[max_n];\nstruct Query\n{\n    int l,r,id;\n    bool operator<(Query q2)\n    const {\n        if(this->r != q2.r)\n        {\n            return this->r < q2.r;\n        }\n        else\n        {\n            return this->l > q2.l;\n        }\n    }\n}querys[max_n];\nint sum2[max_n],ans[max_n],pow_2[max_n],st[max_n],ans_sum[max_n],inv[max_n];\nsigned main()\n{\n    read(n),read(m);\n    pow_2[0] = inv[0] = 1;\n    for(int i = 1;i <= n;i++)\n    {\n        read(nums[i]);\n        pow_2[i] = (pow_2[i - 1] << 1LL) % mo;\n        inv[i] = inv[i - 1] * 500000004 % mo; // 预处理逆元\n\n        ans_sum[i] = (ans_sum[i - 1] + pow_2[i] * nums[i]) % mo; // 预处理不分块贡献\n    }\n    for(int i = 1;i <= m;i++)\n    {\n        read(querys[i].l);       \n        read(querys[i].r);\n        querys[i].id = i;\n    }\n    stable_sort(querys + 1,querys + m + 1);// 按照右区间排序\n    for(int i = 1,j = 1,l,r;i <= m;i++)\n    {\n        l = querys[i].l,r = querys[i].r;\n        for(;j <= r;j++)\n        {    \n            st[++st[0]] = j;\n            sum[st[0]] = nums[j];\n            // 存在多余的块且当前块大于 0\n            while(st[0] > 1 && sum[st[0]] > 0)\n            {\n                // 为了避免爆炸的数字大小，特殊处理一些情况\n                if(st[st[0]] - st[st[0] - 1] >= 40 || (1LL << (st[st[0]] - st[st[0] - 1])) > (0x7fffff7f - sum[st[0] - 1])/ sum[st[0]])\n                {\n                    sum[st[0] - 1] = 0x7fffff7f;\n                }\n                else\n                {\n                    sum[st[0] - 1] += (1LL << (st[st[0]] - st[st[0] - 1])) * sum[st[0]];\n                }\n                --st[0];\n            }\n            if(sum[st[0]] < 0x7fffff7f)\n            {\n                sum2[st[0]] = (sum2[st[0] - 1] + sum[st[0]]) % mo;\n            }\n            else\n            {\n                sum2[st[0]] = ans_sum[j];\n            }\n        }\n        // 末尾标记\n        st[st[0] + 1] = r + 1;\n        // l 区间右侧的块\n        int pos = upper_bound(st + 1,st + st[0] + 2,l) - st;\n        // 单独处理左侧答案\n        (ans[querys[i].id] = ((sum2[st[0]] - sum2[pos - 1]) * 2 + ((ans_sum[st[pos] - 1] - ans_sum[l - 1]) * inv[l]) % mo ) % mo+ mo) %= mo;\n    }\n    for(int i = 1;i <= m;i++)\n    {\n        writeln(ans[i]);\n    }\n    return 0;\n}\n```\n","source":"_posts/CF878E Numbers on the blackboard 题解.md","raw":"---\ntitle: \"CF878E Numbers on the blackboard 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# CF878E Numbers on the blackboard 题解\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/CF878E)\n\n[Codeforces](https://codeforces.com/problemset/problem/878/E)\n\n## Description\n\n给出 $n$ 个数字，每次询问一个区间 $[l,r]$，对这个区间内部的点进行如下操作。 \n- 每次操作可以合并**相邻**两个数 $x,y$，用 $x+2y$ 替换它们。\n\n对于每次询问，输出当最后只剩下一个数字时，这个数字的最大值。询问互相独立，答案对 $10^9 + 7$ 取模。\n\n## Solution\n\n我们考虑把整个区间从右向左依次合并答案是什么样的。\n\n- 第一次合并 $nums_{r - 1} + 2 \\times nums_{r}$。\n- 第二次合并 $nums_{r - 2} + 2 \\times \\left (nums_{r - 1} + 2 \\times nums_{r} \\right)$。\n- $\\cdots$\n- 最后一次 $nums_{l} + 2 \\times \\left (nums_{l + 1} + 2\\times ( nums_{l + 2}  + \\cdots )\\right)$\n\n可以看出，对于每一个 $nums_{i}$，对答案的贡献都是 $2^{k} (k \\geq 0)$，并且 $\\forall i \\in [1,n-1]$，$k_{i + 1} = k_{i} + 1$。\n\n那么如果我们不是这样合并的是否还有这样的性质呢？考虑把合并的区间分成从右向左按顺序合并的若干段，易证每段仍符合该性质。合并两段的时候会发生什么呢，可以想到是将右侧一段的贡献整个乘以 $2$，也就是将右侧段的 $k$ 全部加一。\n\n因此，无论我们如何合并，最终对于整个区间每个数所乘的系数是一定的，系数变化如下（括号表示不一定存在）。即一个从 $0$ 开始的串和一些从 $1$ 开始的串。\n\n$$0,1,\\cdots,1,(2),\\cdots,1,(2),\\cdots$$\n\n想让最终结果尽可能大，可以考虑贪心。\n\n假设当前决策到第 $i$ 个数，$i - 1$ 所在的块长度为 $len$。\n\n- 若 $nums_{i} < 0$，选择不合并，单独开出来一个块，系数为 $2^{0} = 1$。\n- 若 $nums_{i} \\ge 0$，选择合并，系数为 $2^{len}$。\n- **若合并后使得该块变为正的，代表后面的可以抵消中间负数的影响，继续向前合并。**\n\n可以看出上面的过程存储每一个块类似于栈，因此我们用栈来模拟这个过程。直接实现复杂度为 $O(nq)$，我们可以离线操作，将操作按照 $r$ 排序，再利用二分查找 $l$ 右侧的第一个块，单独减去 $l$ 左侧多出来的贡献即可。时间复杂度变为 $O(n \\log n)$。合并过程中，如果遇到极大的块，不能直接继续合并，否则轻松炸 `long long`，特判这种情况，将这个块设为极大值即可。\n\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long \n#define max_n 410101\n#define mo 1000000007\nvoid read(int &p)\n{\n    int k = 1;\n    p = 0;\n    char c = getchar();\n    while(c < '0' || c > '9')\n    {\n        if(c == '-')\n        {\n            k =  -1;\n        }\n        c = getchar();\n    }\n    while(c >='0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return ;\n}\nvoid write_(int x)\n{\n    if(x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if(x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint n,m;\nint lg2[max_n],nums[max_n],sum[max_n];\nstruct Query\n{\n    int l,r,id;\n    bool operator<(Query q2)\n    const {\n        if(this->r != q2.r)\n        {\n            return this->r < q2.r;\n        }\n        else\n        {\n            return this->l > q2.l;\n        }\n    }\n}querys[max_n];\nint sum2[max_n],ans[max_n],pow_2[max_n],st[max_n],ans_sum[max_n],inv[max_n];\nsigned main()\n{\n    read(n),read(m);\n    pow_2[0] = inv[0] = 1;\n    for(int i = 1;i <= n;i++)\n    {\n        read(nums[i]);\n        pow_2[i] = (pow_2[i - 1] << 1LL) % mo;\n        inv[i] = inv[i - 1] * 500000004 % mo; // 预处理逆元\n\n        ans_sum[i] = (ans_sum[i - 1] + pow_2[i] * nums[i]) % mo; // 预处理不分块贡献\n    }\n    for(int i = 1;i <= m;i++)\n    {\n        read(querys[i].l);       \n        read(querys[i].r);\n        querys[i].id = i;\n    }\n    stable_sort(querys + 1,querys + m + 1);// 按照右区间排序\n    for(int i = 1,j = 1,l,r;i <= m;i++)\n    {\n        l = querys[i].l,r = querys[i].r;\n        for(;j <= r;j++)\n        {    \n            st[++st[0]] = j;\n            sum[st[0]] = nums[j];\n            // 存在多余的块且当前块大于 0\n            while(st[0] > 1 && sum[st[0]] > 0)\n            {\n                // 为了避免爆炸的数字大小，特殊处理一些情况\n                if(st[st[0]] - st[st[0] - 1] >= 40 || (1LL << (st[st[0]] - st[st[0] - 1])) > (0x7fffff7f - sum[st[0] - 1])/ sum[st[0]])\n                {\n                    sum[st[0] - 1] = 0x7fffff7f;\n                }\n                else\n                {\n                    sum[st[0] - 1] += (1LL << (st[st[0]] - st[st[0] - 1])) * sum[st[0]];\n                }\n                --st[0];\n            }\n            if(sum[st[0]] < 0x7fffff7f)\n            {\n                sum2[st[0]] = (sum2[st[0] - 1] + sum[st[0]]) % mo;\n            }\n            else\n            {\n                sum2[st[0]] = ans_sum[j];\n            }\n        }\n        // 末尾标记\n        st[st[0] + 1] = r + 1;\n        // l 区间右侧的块\n        int pos = upper_bound(st + 1,st + st[0] + 2,l) - st;\n        // 单独处理左侧答案\n        (ans[querys[i].id] = ((sum2[st[0]] - sum2[pos - 1]) * 2 + ((ans_sum[st[pos] - 1] - ans_sum[l - 1]) * inv[l]) % mo ) % mo+ mo) %= mo;\n    }\n    for(int i = 1;i <= m;i++)\n    {\n        writeln(ans[i]);\n    }\n    return 0;\n}\n```\n","slug":"CF878E Numbers on the blackboard 题解","published":1,"date":"2023-10-04T14:11:08.255Z","updated":"2023-10-04T14:11:08.255Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9zd0021osja4axk1326","content":"<h1 id=\"cf878e-numbers-on-the-blackboard-题解\">CF878E Numbers on the\r\nblackboard 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF878E\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/878/E\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给出 <span class=\"math inline\">\\(n\\)</span> 个数字，每次询问一个区间\r\n<span\r\nclass=\"math inline\">\\([l,r]\\)</span>，对这个区间内部的点进行如下操作。 -\r\n每次操作可以合并<strong>相邻</strong>两个数 <span\r\nclass=\"math inline\">\\(x,y\\)</span>，用 <span\r\nclass=\"math inline\">\\(x+2y\\)</span> 替换它们。</p>\r\n<p>对于每次询问，输出当最后只剩下一个数字时，这个数字的最大值。询问互相独立，答案对\r\n<span class=\"math inline\">\\(10^9 + 7\\)</span> 取模。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>我们考虑把整个区间从右向左依次合并答案是什么样的。</p>\r\n<ul>\r\n<li>第一次合并 <span class=\"math inline\">\\(nums_{r - 1} + 2 \\times\r\nnums_{r}\\)</span>。</li>\r\n<li>第二次合并 <span class=\"math inline\">\\(nums_{r - 2} + 2 \\times \\left\r\n(nums_{r - 1} + 2 \\times nums_{r} \\right)\\)</span>。</li>\r\n<li><span class=\"math inline\">\\(\\cdots\\)</span></li>\r\n<li>最后一次 <span class=\"math inline\">\\(nums_{l} + 2 \\times \\left\r\n(nums_{l + 1} + 2\\times ( nums_{l + 2} + \\cdots )\\right)\\)</span></li>\r\n</ul>\r\n<p>可以看出，对于每一个 <span\r\nclass=\"math inline\">\\(nums_{i}\\)</span>，对答案的贡献都是 <span\r\nclass=\"math inline\">\\(2^{k} (k \\geq 0)\\)</span>，并且 <span\r\nclass=\"math inline\">\\(\\forall i \\in [1,n-1]\\)</span>，<span\r\nclass=\"math inline\">\\(k_{i + 1} = k_{i} + 1\\)</span>。</p>\r\n<p>那么如果我们不是这样合并的是否还有这样的性质呢？考虑把合并的区间分成从右向左按顺序合并的若干段，易证每段仍符合该性质。合并两段的时候会发生什么呢，可以想到是将右侧一段的贡献整个乘以\r\n<span class=\"math inline\">\\(2\\)</span>，也就是将右侧段的 <span\r\nclass=\"math inline\">\\(k\\)</span> 全部加一。</p>\r\n<p>因此，无论我们如何合并，最终对于整个区间每个数所乘的系数是一定的，系数变化如下（括号表示不一定存在）。即一个从\r\n<span class=\"math inline\">\\(0\\)</span> 开始的串和一些从 <span\r\nclass=\"math inline\">\\(1\\)</span> 开始的串。</p>\r\n<p><span\r\nclass=\"math display\">\\[0,1,\\cdots,1,(2),\\cdots,1,(2),\\cdots\\]</span></p>\r\n<p>想让最终结果尽可能大，可以考虑贪心。</p>\r\n<p>假设当前决策到第 <span class=\"math inline\">\\(i\\)</span> 个数，<span\r\nclass=\"math inline\">\\(i - 1\\)</span> 所在的块长度为 <span\r\nclass=\"math inline\">\\(len\\)</span>。</p>\r\n<ul>\r\n<li>若 <span class=\"math inline\">\\(nums_{i} &lt;\r\n0\\)</span>，选择不合并，单独开出来一个块，系数为 <span\r\nclass=\"math inline\">\\(2^{0} = 1\\)</span>。</li>\r\n<li>若 <span class=\"math inline\">\\(nums_{i} \\ge\r\n0\\)</span>，选择合并，系数为 <span\r\nclass=\"math inline\">\\(2^{len}\\)</span>。</li>\r\n<li><strong>若合并后使得该块变为正的，代表后面的可以抵消中间负数的影响，继续向前合并。</strong></li>\r\n</ul>\r\n<p>可以看出上面的过程存储每一个块类似于栈，因此我们用栈来模拟这个过程。直接实现复杂度为\r\n<span class=\"math inline\">\\(O(nq)\\)</span>，我们可以离线操作，将操作按照\r\n<span class=\"math inline\">\\(r\\)</span> 排序，再利用二分查找 <span\r\nclass=\"math inline\">\\(l\\)</span> 右侧的第一个块，单独减去 <span\r\nclass=\"math inline\">\\(l\\)</span> 左侧多出来的贡献即可。时间复杂度变为\r\n<span class=\"math inline\">\\(O(n \\log\r\nn)\\)</span>。合并过程中，如果遇到极大的块，不能直接继续合并，否则轻松炸\r\n<code>long long</code>，特判这种情况，将这个块设为极大值即可。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 410101</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mo 1000000007</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k =  <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &gt;=<span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">int</span> lg2[max_n],nums[max_n],sum[max_n];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Query</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r,id;</span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>&lt;(Query q2)</span><br><span class=\"line\">    <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>-&gt;r != q2.r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;r &lt; q2.r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;l &gt; q2.l;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;querys[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> sum2[max_n],ans[max_n],pow_2[max_n],st[max_n],ans_sum[max_n],inv[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n),<span class=\"built_in\">read</span>(m);</span><br><span class=\"line\">    pow_2[<span class=\"number\">0</span>] = inv[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">        pow_2[i] = (pow_2[i - <span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">1LL</span>) % mo;</span><br><span class=\"line\">        inv[i] = inv[i - <span class=\"number\">1</span>] * <span class=\"number\">500000004</span> % mo; <span class=\"comment\">// 预处理逆元</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ans_sum[i] = (ans_sum[i - <span class=\"number\">1</span>] + pow_2[i] * nums[i]) % mo; <span class=\"comment\">// 预处理不分块贡献</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(querys[i].l);       </span><br><span class=\"line\">        <span class=\"built_in\">read</span>(querys[i].r);</span><br><span class=\"line\">        querys[i].id = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">stable_sort</span>(querys + <span class=\"number\">1</span>,querys + m + <span class=\"number\">1</span>);<span class=\"comment\">// 按照右区间排序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>,j = <span class=\"number\">1</span>,l,r;i &lt;= m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        l = querys[i].l,r = querys[i].r;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;j &lt;= r;j++)</span><br><span class=\"line\">        &#123;    </span><br><span class=\"line\">            st[++st[<span class=\"number\">0</span>]] = j;</span><br><span class=\"line\">            sum[st[<span class=\"number\">0</span>]] = nums[j];</span><br><span class=\"line\">            <span class=\"comment\">// 存在多余的块且当前块大于 0</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(st[<span class=\"number\">0</span>] &gt; <span class=\"number\">1</span> &amp;&amp; sum[st[<span class=\"number\">0</span>]] &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 为了避免爆炸的数字大小，特殊处理一些情况</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(st[st[<span class=\"number\">0</span>]] - st[st[<span class=\"number\">0</span>] - <span class=\"number\">1</span>] &gt;= <span class=\"number\">40</span> || (<span class=\"number\">1LL</span> &lt;&lt; (st[st[<span class=\"number\">0</span>]] - st[st[<span class=\"number\">0</span>] - <span class=\"number\">1</span>])) &gt; (<span class=\"number\">0x7fffff7f</span> - sum[st[<span class=\"number\">0</span>] - <span class=\"number\">1</span>])/ sum[st[<span class=\"number\">0</span>]])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    sum[st[<span class=\"number\">0</span>] - <span class=\"number\">1</span>] = <span class=\"number\">0x7fffff7f</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    sum[st[<span class=\"number\">0</span>] - <span class=\"number\">1</span>] += (<span class=\"number\">1LL</span> &lt;&lt; (st[st[<span class=\"number\">0</span>]] - st[st[<span class=\"number\">0</span>] - <span class=\"number\">1</span>])) * sum[st[<span class=\"number\">0</span>]];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                --st[<span class=\"number\">0</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sum[st[<span class=\"number\">0</span>]] &lt; <span class=\"number\">0x7fffff7f</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sum2[st[<span class=\"number\">0</span>]] = (sum2[st[<span class=\"number\">0</span>] - <span class=\"number\">1</span>] + sum[st[<span class=\"number\">0</span>]]) % mo;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sum2[st[<span class=\"number\">0</span>]] = ans_sum[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 末尾标记</span></span><br><span class=\"line\">        st[st[<span class=\"number\">0</span>] + <span class=\"number\">1</span>] = r + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// l 区间右侧的块</span></span><br><span class=\"line\">        <span class=\"type\">int</span> pos = <span class=\"built_in\">upper_bound</span>(st + <span class=\"number\">1</span>,st + st[<span class=\"number\">0</span>] + <span class=\"number\">2</span>,l) - st;</span><br><span class=\"line\">        <span class=\"comment\">// 单独处理左侧答案</span></span><br><span class=\"line\">        (ans[querys[i].id] = ((sum2[st[<span class=\"number\">0</span>]] - sum2[pos - <span class=\"number\">1</span>]) * <span class=\"number\">2</span> + ((ans_sum[st[pos] - <span class=\"number\">1</span>] - ans_sum[l - <span class=\"number\">1</span>]) * inv[l]) % mo ) % mo+ mo) %= mo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">writeln</span>(ans[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"cf878e-numbers-on-the-blackboard-题解\">CF878E Numbers on the\r\nblackboard 题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF878E\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/878/E\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给出 <span class=\"math inline\">\\(n\\)</span> 个数字，每次询问一个区间\r\n<span\r\nclass=\"math inline\">\\([l,r]\\)</span>，对这个区间内部的点进行如下操作。 -\r\n每次操作可以合并<strong>相邻</strong>两个数 <span\r\nclass=\"math inline\">\\(x,y\\)</span>，用 <span\r\nclass=\"math inline\">\\(x+2y\\)</span> 替换它们。</p>\r\n<p>对于每次询问，输出当最后只剩下一个数字时，这个数字的最大值。询问互相独立，答案对\r\n<span class=\"math inline\">\\(10^9 + 7\\)</span> 取模。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>我们考虑把整个区间从右向左依次合并答案是什么样的。</p>\r\n<ul>\r\n<li>第一次合并 <span class=\"math inline\">\\(nums_{r - 1} + 2 \\times\r\nnums_{r}\\)</span>。</li>\r\n<li>第二次合并 <span class=\"math inline\">\\(nums_{r - 2} + 2 \\times \\left\r\n(nums_{r - 1} + 2 \\times nums_{r} \\right)\\)</span>。</li>\r\n<li><span class=\"math inline\">\\(\\cdots\\)</span></li>\r\n<li>最后一次 <span class=\"math inline\">\\(nums_{l} + 2 \\times \\left\r\n(nums_{l + 1} + 2\\times ( nums_{l + 2} + \\cdots )\\right)\\)</span></li>\r\n</ul>\r\n<p>可以看出，对于每一个 <span\r\nclass=\"math inline\">\\(nums_{i}\\)</span>，对答案的贡献都是 <span\r\nclass=\"math inline\">\\(2^{k} (k \\geq 0)\\)</span>，并且 <span\r\nclass=\"math inline\">\\(\\forall i \\in [1,n-1]\\)</span>，<span\r\nclass=\"math inline\">\\(k_{i + 1} = k_{i} + 1\\)</span>。</p>\r\n<p>那么如果我们不是这样合并的是否还有这样的性质呢？考虑把合并的区间分成从右向左按顺序合并的若干段，易证每段仍符合该性质。合并两段的时候会发生什么呢，可以想到是将右侧一段的贡献整个乘以\r\n<span class=\"math inline\">\\(2\\)</span>，也就是将右侧段的 <span\r\nclass=\"math inline\">\\(k\\)</span> 全部加一。</p>\r\n<p>因此，无论我们如何合并，最终对于整个区间每个数所乘的系数是一定的，系数变化如下（括号表示不一定存在）。即一个从\r\n<span class=\"math inline\">\\(0\\)</span> 开始的串和一些从 <span\r\nclass=\"math inline\">\\(1\\)</span> 开始的串。</p>\r\n<p><span\r\nclass=\"math display\">\\[0,1,\\cdots,1,(2),\\cdots,1,(2),\\cdots\\]</span></p>\r\n<p>想让最终结果尽可能大，可以考虑贪心。</p>\r\n<p>假设当前决策到第 <span class=\"math inline\">\\(i\\)</span> 个数，<span\r\nclass=\"math inline\">\\(i - 1\\)</span> 所在的块长度为 <span\r\nclass=\"math inline\">\\(len\\)</span>。</p>\r\n<ul>\r\n<li>若 <span class=\"math inline\">\\(nums_{i} &lt;\r\n0\\)</span>，选择不合并，单独开出来一个块，系数为 <span\r\nclass=\"math inline\">\\(2^{0} = 1\\)</span>。</li>\r\n<li>若 <span class=\"math inline\">\\(nums_{i} \\ge\r\n0\\)</span>，选择合并，系数为 <span\r\nclass=\"math inline\">\\(2^{len}\\)</span>。</li>\r\n<li><strong>若合并后使得该块变为正的，代表后面的可以抵消中间负数的影响，继续向前合并。</strong></li>\r\n</ul>\r\n<p>可以看出上面的过程存储每一个块类似于栈，因此我们用栈来模拟这个过程。直接实现复杂度为\r\n<span class=\"math inline\">\\(O(nq)\\)</span>，我们可以离线操作，将操作按照\r\n<span class=\"math inline\">\\(r\\)</span> 排序，再利用二分查找 <span\r\nclass=\"math inline\">\\(l\\)</span> 右侧的第一个块，单独减去 <span\r\nclass=\"math inline\">\\(l\\)</span> 左侧多出来的贡献即可。时间复杂度变为\r\n<span class=\"math inline\">\\(O(n \\log\r\nn)\\)</span>。合并过程中，如果遇到极大的块，不能直接继续合并，否则轻松炸\r\n<code>long long</code>，特判这种情况，将这个块设为极大值即可。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 410101</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mo 1000000007</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k =  <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(c &gt;=<span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m;</span><br><span class=\"line\"><span class=\"type\">int</span> lg2[max_n],nums[max_n],sum[max_n];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Query</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l,r,id;</span><br><span class=\"line\">    <span class=\"type\">bool</span> <span class=\"keyword\">operator</span>&lt;(Query q2)</span><br><span class=\"line\">    <span class=\"type\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>-&gt;r != q2.r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;r &lt; q2.r;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>-&gt;l &gt; q2.l;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;querys[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> sum2[max_n],ans[max_n],pow_2[max_n],st[max_n],ans_sum[max_n],inv[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n),<span class=\"built_in\">read</span>(m);</span><br><span class=\"line\">    pow_2[<span class=\"number\">0</span>] = inv[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">        pow_2[i] = (pow_2[i - <span class=\"number\">1</span>] &lt;&lt; <span class=\"number\">1LL</span>) % mo;</span><br><span class=\"line\">        inv[i] = inv[i - <span class=\"number\">1</span>] * <span class=\"number\">500000004</span> % mo; <span class=\"comment\">// 预处理逆元</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ans_sum[i] = (ans_sum[i - <span class=\"number\">1</span>] + pow_2[i] * nums[i]) % mo; <span class=\"comment\">// 预处理不分块贡献</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(querys[i].l);       </span><br><span class=\"line\">        <span class=\"built_in\">read</span>(querys[i].r);</span><br><span class=\"line\">        querys[i].id = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">stable_sort</span>(querys + <span class=\"number\">1</span>,querys + m + <span class=\"number\">1</span>);<span class=\"comment\">// 按照右区间排序</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>,j = <span class=\"number\">1</span>,l,r;i &lt;= m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        l = querys[i].l,r = querys[i].r;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(;j &lt;= r;j++)</span><br><span class=\"line\">        &#123;    </span><br><span class=\"line\">            st[++st[<span class=\"number\">0</span>]] = j;</span><br><span class=\"line\">            sum[st[<span class=\"number\">0</span>]] = nums[j];</span><br><span class=\"line\">            <span class=\"comment\">// 存在多余的块且当前块大于 0</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span>(st[<span class=\"number\">0</span>] &gt; <span class=\"number\">1</span> &amp;&amp; sum[st[<span class=\"number\">0</span>]] &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 为了避免爆炸的数字大小，特殊处理一些情况</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(st[st[<span class=\"number\">0</span>]] - st[st[<span class=\"number\">0</span>] - <span class=\"number\">1</span>] &gt;= <span class=\"number\">40</span> || (<span class=\"number\">1LL</span> &lt;&lt; (st[st[<span class=\"number\">0</span>]] - st[st[<span class=\"number\">0</span>] - <span class=\"number\">1</span>])) &gt; (<span class=\"number\">0x7fffff7f</span> - sum[st[<span class=\"number\">0</span>] - <span class=\"number\">1</span>])/ sum[st[<span class=\"number\">0</span>]])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    sum[st[<span class=\"number\">0</span>] - <span class=\"number\">1</span>] = <span class=\"number\">0x7fffff7f</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    sum[st[<span class=\"number\">0</span>] - <span class=\"number\">1</span>] += (<span class=\"number\">1LL</span> &lt;&lt; (st[st[<span class=\"number\">0</span>]] - st[st[<span class=\"number\">0</span>] - <span class=\"number\">1</span>])) * sum[st[<span class=\"number\">0</span>]];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                --st[<span class=\"number\">0</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sum[st[<span class=\"number\">0</span>]] &lt; <span class=\"number\">0x7fffff7f</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sum2[st[<span class=\"number\">0</span>]] = (sum2[st[<span class=\"number\">0</span>] - <span class=\"number\">1</span>] + sum[st[<span class=\"number\">0</span>]]) % mo;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sum2[st[<span class=\"number\">0</span>]] = ans_sum[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 末尾标记</span></span><br><span class=\"line\">        st[st[<span class=\"number\">0</span>] + <span class=\"number\">1</span>] = r + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// l 区间右侧的块</span></span><br><span class=\"line\">        <span class=\"type\">int</span> pos = <span class=\"built_in\">upper_bound</span>(st + <span class=\"number\">1</span>,st + st[<span class=\"number\">0</span>] + <span class=\"number\">2</span>,l) - st;</span><br><span class=\"line\">        <span class=\"comment\">// 单独处理左侧答案</span></span><br><span class=\"line\">        (ans[querys[i].id] = ((sum2[st[<span class=\"number\">0</span>]] - sum2[pos - <span class=\"number\">1</span>]) * <span class=\"number\">2</span> + ((ans_sum[st[pos] - <span class=\"number\">1</span>] - ans_sum[l - <span class=\"number\">1</span>]) * inv[l]) % mo ) % mo+ mo) %= mo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">writeln</span>(ans[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P4216 [SCOI2015] 情报传递 题解","tag":null,"mathjax":true,"_content":"\n# P4216 [SCOI2015] 情报传递 题解\n\n<!-- more -->\n\n\n来一篇常数不大的[最优解](https://www.luogu.com.cn/record/list?pid=P4216&orderBy=1&status=&page=1)题解。\n\n## Link\n\n[洛谷题目](https://www.luogu.com.cn/problem/P4216)。\n\n## Solution\n\n对于每个询问，第一问是基础的树上问题，公式放在下面，不在赘述。\n\n$$\\operatorname{dis}\\left(u,v\\right) = dep_{u} + dep_{v} - 2 \\times dep_{\\operatorname{lca}\\left(u,v\\right)} + 1$$\n\n对于第二问，首先我们可以转化一下题意：题目求某条链上危险程度 **大于** $C$ 的节点数，而一个节点的危险程度又**只与开始时间和查询时间有关**，对于每个询问，查询时间是一定的，因此对于第 $i$ 个询问，我们查询的就是 $X_{i} \\rArr Y_{i}$ 这条链上开始搜集情报时间在 $i - C_{i}$ 之前的节点数。\n\n每次清空重新查询复杂度是 $\\Omicron \\left(n^{2} \\log^{2}n\\right)$ 的。\n\n考虑离线，由于只查询在 $i - C_{i}$ 之前的点，因此我们可以将查询按照 $i - C_{i}$ 排序。查询时我们先加入满足开始搜集情报时间在 $i - C_{i}$ 之前的新点。\n\n利用树链剖分，我们可以把 $X_{i} \\rArr Y_{i}$ 的路径拆分成若干 dfs 序连续的短链，我们可以利用树状数组查询这些短链上符合要求的点数。\n\n时间复杂度 $\\Omicron \\left( n \\log^2{n} \\right)$，树状数组常数小，跑的飞快。\n\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define max_n 200001\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nstruct node\n{\n    int to,nxt;\n}edge[max_n];\nint head[max_n],tot;\nvoid add(int u,int v)\n{\n    edge[++tot].to = v;\n    edge[tot].nxt = head[u];\n    head[u] = tot;\n}\nint n,q,root;\nint fa[max_n],siz[max_n],dfn[max_n],rev[max_n],dep[max_n],son[max_n],top[max_n],timer;\nvoid dfs1(int u)\n{\n    dep[u] = dep[fa[u]] + 1;\n    siz[u] = 1;\n    for(int i = head[u];i;i = edge[i].nxt)\n    {\n        int v = edge[i].to;\n        dfs1(v);\n        siz[u] += siz[v];\n        if(siz[v] > siz[son[u]])\n        {\n            son[u] = v;\n        }\n    }\n}\nvoid dfs2(int u,int t)\n{\n    dfn[u] = ++timer;\n    rev[timer] = u;\n    top[u] = t;\n    if(son[u])\n    {\n        dfs2(son[u],t);\n    }\n    for(int i = head[u];i;i = edge[i].nxt)\n    {\n        int v = edge[i].to;\n        if(v == son[u])\n        {\n            continue;\n        }\n        dfs2(v,v);\n    }\n}\nint ans[max_n];\nstruct Query\n{\n    int u,v,lim,id,ans,cnt;\n}ques[max_n];\nstruct Change\n{\n    int id,tim;\n}changes[max_n];\nint tree[max_n];\nint lowbit(int x)\n{\n    return (-x) & x;\n}\nvoid update(int x)\n{\n    for(;x <= n;x += lowbit(x))\n    {\n        tree[x]++;\n    }\n}\nint query(int x)\n{\n    int res = 0;\n    for(;x;x -= lowbit(x))\n    {\n        res += tree[x];\n    }\n    return res;\n}\nint query(int l,int r)\n{\n    return query(r) - query(l - 1);\n}\nsigned main()\n{\n    read(n);\n    for(int i = 1;i <= n;i++)\n    {\n        read(fa[i]);\n        if(fa[i])\n        {\n            add(fa[i],i);\n        }\n        else\n        {\n            root = i;\n        }\n    }\n    dfs1(root);\n    dfs2(root,root);\n    read(q);\n    int cnt = 0;\n    for(int i = 1,u,v,lim,op;i <= q;i++)\n    {\n        read(op);\n        if(op == 2)\n        {\n            read(u);\n            changes[i - cnt].id = u;\n            changes[i - cnt].tim = i;\n        }\n        else\n        {\n            ++cnt;\n            read(u),read(v),read(lim);\n            ques[cnt].u = u;\n            ques[cnt].v = v;\n            ques[cnt].lim = lim;\n            ques[cnt].id = i;\n        }\n\n    }\n    sort(ques + 1,ques + cnt + 1,[](Query q1,Query q2){return (q1.id - q1.lim) < (q2.id - q2.lim);});;\n    int now = 1;\n    for(int i = 1;i <= cnt;++i)\n    {\n        while(now <= q - cnt && changes[now].tim < (ques[i].id - ques[i].lim))\n        {\n            update(dfn[changes[now].id]);\n            ++now;\n        }\n        int u = ques[i].u,v = ques[i].v;\n        ques[i].cnt = dep[u] + dep[v];\n        while(top[u] != top[v])\n        {\n            if(dep[top[u]] < dep[top[v]])\n            {\n                swap(u,v);\n            }\n            ques[i].ans += query(dfn[top[u]],dfn[u]);\n            u = fa[top[u]];\n        }\n        if(dep[u] < dep[v])\n        {\n            swap(u,v);\n        }\n        ques[i].ans += query(dfn[v],dfn[u]);\n        ques[i].cnt -= 2 * dep[v] - 1;\n    }\n    sort(ques + 1,ques + cnt + 1,[](Query q1,Query q2){return q1.id < q2.id;});\n    for(int i = 1;i <= cnt;++i)\n    {\n        writesp(ques[i].cnt),writeln(ques[i].ans);\n    }\n    return 0;\n}\n```","source":"_posts/P4216 [SCOI2015] 情报传递 题解.md","raw":"---\ntitle: \"P4216 [SCOI2015] 情报传递 题解\"\ntag: \nmathjax: true\n---\n\n# P4216 [SCOI2015] 情报传递 题解\n\n<!-- more -->\n\n\n来一篇常数不大的[最优解](https://www.luogu.com.cn/record/list?pid=P4216&orderBy=1&status=&page=1)题解。\n\n## Link\n\n[洛谷题目](https://www.luogu.com.cn/problem/P4216)。\n\n## Solution\n\n对于每个询问，第一问是基础的树上问题，公式放在下面，不在赘述。\n\n$$\\operatorname{dis}\\left(u,v\\right) = dep_{u} + dep_{v} - 2 \\times dep_{\\operatorname{lca}\\left(u,v\\right)} + 1$$\n\n对于第二问，首先我们可以转化一下题意：题目求某条链上危险程度 **大于** $C$ 的节点数，而一个节点的危险程度又**只与开始时间和查询时间有关**，对于每个询问，查询时间是一定的，因此对于第 $i$ 个询问，我们查询的就是 $X_{i} \\rArr Y_{i}$ 这条链上开始搜集情报时间在 $i - C_{i}$ 之前的节点数。\n\n每次清空重新查询复杂度是 $\\Omicron \\left(n^{2} \\log^{2}n\\right)$ 的。\n\n考虑离线，由于只查询在 $i - C_{i}$ 之前的点，因此我们可以将查询按照 $i - C_{i}$ 排序。查询时我们先加入满足开始搜集情报时间在 $i - C_{i}$ 之前的新点。\n\n利用树链剖分，我们可以把 $X_{i} \\rArr Y_{i}$ 的路径拆分成若干 dfs 序连续的短链，我们可以利用树状数组查询这些短链上符合要求的点数。\n\n时间复杂度 $\\Omicron \\left( n \\log^2{n} \\right)$，树状数组常数小，跑的飞快。\n\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define max_n 200001\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nstruct node\n{\n    int to,nxt;\n}edge[max_n];\nint head[max_n],tot;\nvoid add(int u,int v)\n{\n    edge[++tot].to = v;\n    edge[tot].nxt = head[u];\n    head[u] = tot;\n}\nint n,q,root;\nint fa[max_n],siz[max_n],dfn[max_n],rev[max_n],dep[max_n],son[max_n],top[max_n],timer;\nvoid dfs1(int u)\n{\n    dep[u] = dep[fa[u]] + 1;\n    siz[u] = 1;\n    for(int i = head[u];i;i = edge[i].nxt)\n    {\n        int v = edge[i].to;\n        dfs1(v);\n        siz[u] += siz[v];\n        if(siz[v] > siz[son[u]])\n        {\n            son[u] = v;\n        }\n    }\n}\nvoid dfs2(int u,int t)\n{\n    dfn[u] = ++timer;\n    rev[timer] = u;\n    top[u] = t;\n    if(son[u])\n    {\n        dfs2(son[u],t);\n    }\n    for(int i = head[u];i;i = edge[i].nxt)\n    {\n        int v = edge[i].to;\n        if(v == son[u])\n        {\n            continue;\n        }\n        dfs2(v,v);\n    }\n}\nint ans[max_n];\nstruct Query\n{\n    int u,v,lim,id,ans,cnt;\n}ques[max_n];\nstruct Change\n{\n    int id,tim;\n}changes[max_n];\nint tree[max_n];\nint lowbit(int x)\n{\n    return (-x) & x;\n}\nvoid update(int x)\n{\n    for(;x <= n;x += lowbit(x))\n    {\n        tree[x]++;\n    }\n}\nint query(int x)\n{\n    int res = 0;\n    for(;x;x -= lowbit(x))\n    {\n        res += tree[x];\n    }\n    return res;\n}\nint query(int l,int r)\n{\n    return query(r) - query(l - 1);\n}\nsigned main()\n{\n    read(n);\n    for(int i = 1;i <= n;i++)\n    {\n        read(fa[i]);\n        if(fa[i])\n        {\n            add(fa[i],i);\n        }\n        else\n        {\n            root = i;\n        }\n    }\n    dfs1(root);\n    dfs2(root,root);\n    read(q);\n    int cnt = 0;\n    for(int i = 1,u,v,lim,op;i <= q;i++)\n    {\n        read(op);\n        if(op == 2)\n        {\n            read(u);\n            changes[i - cnt].id = u;\n            changes[i - cnt].tim = i;\n        }\n        else\n        {\n            ++cnt;\n            read(u),read(v),read(lim);\n            ques[cnt].u = u;\n            ques[cnt].v = v;\n            ques[cnt].lim = lim;\n            ques[cnt].id = i;\n        }\n\n    }\n    sort(ques + 1,ques + cnt + 1,[](Query q1,Query q2){return (q1.id - q1.lim) < (q2.id - q2.lim);});;\n    int now = 1;\n    for(int i = 1;i <= cnt;++i)\n    {\n        while(now <= q - cnt && changes[now].tim < (ques[i].id - ques[i].lim))\n        {\n            update(dfn[changes[now].id]);\n            ++now;\n        }\n        int u = ques[i].u,v = ques[i].v;\n        ques[i].cnt = dep[u] + dep[v];\n        while(top[u] != top[v])\n        {\n            if(dep[top[u]] < dep[top[v]])\n            {\n                swap(u,v);\n            }\n            ques[i].ans += query(dfn[top[u]],dfn[u]);\n            u = fa[top[u]];\n        }\n        if(dep[u] < dep[v])\n        {\n            swap(u,v);\n        }\n        ques[i].ans += query(dfn[v],dfn[u]);\n        ques[i].cnt -= 2 * dep[v] - 1;\n    }\n    sort(ques + 1,ques + cnt + 1,[](Query q1,Query q2){return q1.id < q2.id;});\n    for(int i = 1;i <= cnt;++i)\n    {\n        writesp(ques[i].cnt),writeln(ques[i].ans);\n    }\n    return 0;\n}\n```","slug":"P4216 [SCOI2015] 情报传递 题解","published":1,"date":"2023-10-04T14:11:08.255Z","updated":"2023-10-04T14:11:08.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9zf0023osja4uz3fhwl","content":"<h1 id=\"p4216-scoi2015-情报传递-题解\">P4216 [SCOI2015] 情报传递\r\n题解</h1>\r\n<span id=\"more\"></span>\r\n<p>来一篇常数不大的<a\r\nhref=\"https://www.luogu.com.cn/record/list?pid=P4216&amp;orderBy=1&amp;status=&amp;page=1\">最优解</a>题解。</p>\r\n<h2 id=\"link\">Link</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/P4216\">洛谷题目</a>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>对于每个询问，第一问是基础的树上问题，公式放在下面，不在赘述。</p>\r\n<p><span class=\"math display\">\\[\\operatorname{dis}\\left(u,v\\right) =\r\ndep_{u} + dep_{v} - 2 \\times dep_{\\operatorname{lca}\\left(u,v\\right)} +\r\n1\\]</span></p>\r\n<p>对于第二问，首先我们可以转化一下题意：题目求某条链上危险程度\r\n<strong>大于</strong> <span class=\"math inline\">\\(C\\)</span>\r\n的节点数，而一个节点的危险程度又<strong>只与开始时间和查询时间有关</strong>，对于每个询问，查询时间是一定的，因此对于第\r\n<span class=\"math inline\">\\(i\\)</span> 个询问，我们查询的就是 <span\r\nclass=\"math inline\">\\(X_{i} \\rArr Y_{i}\\)</span>\r\n这条链上开始搜集情报时间在 <span class=\"math inline\">\\(i -\r\nC_{i}\\)</span> 之前的节点数。</p>\r\n<p>每次清空重新查询复杂度是 <span class=\"math inline\">\\(\\Omicron\r\n\\left(n^{2} \\log^{2}n\\right)\\)</span> 的。</p>\r\n<p>考虑离线，由于只查询在 <span class=\"math inline\">\\(i - C_{i}\\)</span>\r\n之前的点，因此我们可以将查询按照 <span class=\"math inline\">\\(i -\r\nC_{i}\\)</span> 排序。查询时我们先加入满足开始搜集情报时间在 <span\r\nclass=\"math inline\">\\(i - C_{i}\\)</span> 之前的新点。</p>\r\n<p>利用树链剖分，我们可以把 <span class=\"math inline\">\\(X_{i} \\rArr\r\nY_{i}\\)</span> 的路径拆分成若干 dfs\r\n序连续的短链，我们可以利用树状数组查询这些短链上符合要求的点数。</p>\r\n<p>时间复杂度 <span class=\"math inline\">\\(\\Omicron \\left( n \\log^2{n}\r\n\\right)\\)</span>，树状数组常数小，跑的飞快。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 200001</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> to,nxt;</span><br><span class=\"line\">&#125;edge[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> head[max_n],tot;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edge[++tot].to = v;</span><br><span class=\"line\">    edge[tot].nxt = head[u];</span><br><span class=\"line\">    head[u] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,q,root;</span><br><span class=\"line\"><span class=\"type\">int</span> fa[max_n],siz[max_n],dfn[max_n],rev[max_n],dep[max_n],son[max_n],top[max_n],timer;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dep[u] = dep[fa[u]] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    siz[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = head[u];i;i = edge[i].nxt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = edge[i].to;</span><br><span class=\"line\">        <span class=\"built_in\">dfs1</span>(v);</span><br><span class=\"line\">        siz[u] += siz[v];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(siz[v] &gt; siz[son[u]])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            son[u] = v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dfn[u] = ++timer;</span><br><span class=\"line\">    rev[timer] = u;</span><br><span class=\"line\">    top[u] = t;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(son[u])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">dfs2</span>(son[u],t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = head[u];i;i = edge[i].nxt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v == son[u])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">dfs2</span>(v,v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> ans[max_n];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Query</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> u,v,lim,id,ans,cnt;</span><br><span class=\"line\">&#125;ques[max_n];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Change</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> id,tim;</span><br><span class=\"line\">&#125;changes[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> tree[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (-x) &amp; x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;x &lt;= n;x += <span class=\"built_in\">lowbit</span>(x))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[x]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;x;x -= <span class=\"built_in\">lowbit</span>(x))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        res += tree[x];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(r) - <span class=\"built_in\">query</span>(l - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(fa[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fa[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(fa[i],i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            root = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs1</span>(root);</span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(root,root);</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(q);</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>,u,v,lim,op;i &lt;= q;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(op);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(u);</span><br><span class=\"line\">            changes[i - cnt].id = u;</span><br><span class=\"line\">            changes[i - cnt].tim = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++cnt;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(u),<span class=\"built_in\">read</span>(v),<span class=\"built_in\">read</span>(lim);</span><br><span class=\"line\">            ques[cnt].u = u;</span><br><span class=\"line\">            ques[cnt].v = v;</span><br><span class=\"line\">            ques[cnt].lim = lim;</span><br><span class=\"line\">            ques[cnt].id = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(ques + <span class=\"number\">1</span>,ques + cnt + <span class=\"number\">1</span>,[](Query q1,Query q2)&#123;<span class=\"built_in\">return</span> (q1.id - q1.lim) &lt; (q2.id - q2.lim);&#125;);;</span><br><span class=\"line\">    <span class=\"type\">int</span> now = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= cnt;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(now &lt;= q - cnt &amp;&amp; changes[now].tim &lt; (ques[i].id - ques[i].lim))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">update</span>(dfn[changes[now].id]);</span><br><span class=\"line\">            ++now;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> u = ques[i].u,v = ques[i].v;</span><br><span class=\"line\">        ques[i].cnt = dep[u] + dep[v];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(top[u] != top[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dep[top[u]] &lt; dep[top[v]])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">swap</span>(u,v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ques[i].ans += <span class=\"built_in\">query</span>(dfn[top[u]],dfn[u]);</span><br><span class=\"line\">            u = fa[top[u]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dep[u] &lt; dep[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(u,v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ques[i].ans += <span class=\"built_in\">query</span>(dfn[v],dfn[u]);</span><br><span class=\"line\">        ques[i].cnt -= <span class=\"number\">2</span> * dep[v] - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(ques + <span class=\"number\">1</span>,ques + cnt + <span class=\"number\">1</span>,[](Query q1,Query q2)&#123;<span class=\"keyword\">return</span> q1.id &lt; q2.id;&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= cnt;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">writesp</span>(ques[i].cnt),<span class=\"built_in\">writeln</span>(ques[i].ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"p4216-scoi2015-情报传递-题解\">P4216 [SCOI2015] 情报传递\r\n题解</h1>","more":"<p>来一篇常数不大的<a\r\nhref=\"https://www.luogu.com.cn/record/list?pid=P4216&amp;orderBy=1&amp;status=&amp;page=1\">最优解</a>题解。</p>\r\n<h2 id=\"link\">Link</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/P4216\">洛谷题目</a>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>对于每个询问，第一问是基础的树上问题，公式放在下面，不在赘述。</p>\r\n<p><span class=\"math display\">\\[\\operatorname{dis}\\left(u,v\\right) =\r\ndep_{u} + dep_{v} - 2 \\times dep_{\\operatorname{lca}\\left(u,v\\right)} +\r\n1\\]</span></p>\r\n<p>对于第二问，首先我们可以转化一下题意：题目求某条链上危险程度\r\n<strong>大于</strong> <span class=\"math inline\">\\(C\\)</span>\r\n的节点数，而一个节点的危险程度又<strong>只与开始时间和查询时间有关</strong>，对于每个询问，查询时间是一定的，因此对于第\r\n<span class=\"math inline\">\\(i\\)</span> 个询问，我们查询的就是 <span\r\nclass=\"math inline\">\\(X_{i} \\rArr Y_{i}\\)</span>\r\n这条链上开始搜集情报时间在 <span class=\"math inline\">\\(i -\r\nC_{i}\\)</span> 之前的节点数。</p>\r\n<p>每次清空重新查询复杂度是 <span class=\"math inline\">\\(\\Omicron\r\n\\left(n^{2} \\log^{2}n\\right)\\)</span> 的。</p>\r\n<p>考虑离线，由于只查询在 <span class=\"math inline\">\\(i - C_{i}\\)</span>\r\n之前的点，因此我们可以将查询按照 <span class=\"math inline\">\\(i -\r\nC_{i}\\)</span> 排序。查询时我们先加入满足开始搜集情报时间在 <span\r\nclass=\"math inline\">\\(i - C_{i}\\)</span> 之前的新点。</p>\r\n<p>利用树链剖分，我们可以把 <span class=\"math inline\">\\(X_{i} \\rArr\r\nY_{i}\\)</span> 的路径拆分成若干 dfs\r\n序连续的短链，我们可以利用树状数组查询这些短链上符合要求的点数。</p>\r\n<p>时间复杂度 <span class=\"math inline\">\\(\\Omicron \\left( n \\log^2{n}\r\n\\right)\\)</span>，树状数组常数小，跑的飞快。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 200001</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> to,nxt;</span><br><span class=\"line\">&#125;edge[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> head[max_n],tot;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edge[++tot].to = v;</span><br><span class=\"line\">    edge[tot].nxt = head[u];</span><br><span class=\"line\">    head[u] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,q,root;</span><br><span class=\"line\"><span class=\"type\">int</span> fa[max_n],siz[max_n],dfn[max_n],rev[max_n],dep[max_n],son[max_n],top[max_n],timer;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> u)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dep[u] = dep[fa[u]] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    siz[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = head[u];i;i = edge[i].nxt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = edge[i].to;</span><br><span class=\"line\">        <span class=\"built_in\">dfs1</span>(v);</span><br><span class=\"line\">        siz[u] += siz[v];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(siz[v] &gt; siz[son[u]])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            son[u] = v;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> t)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    dfn[u] = ++timer;</span><br><span class=\"line\">    rev[timer] = u;</span><br><span class=\"line\">    top[u] = t;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(son[u])</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">dfs2</span>(son[u],t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = head[u];i;i = edge[i].nxt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = edge[i].to;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v == son[u])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">dfs2</span>(v,v);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> ans[max_n];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Query</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> u,v,lim,id,ans,cnt;</span><br><span class=\"line\">&#125;ques[max_n];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Change</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> id,tim;</span><br><span class=\"line\">&#125;changes[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> tree[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (-x) &amp; x;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;x &lt;= n;x += <span class=\"built_in\">lowbit</span>(x))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        tree[x]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;x;x -= <span class=\"built_in\">lowbit</span>(x))</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        res += tree[x];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> l,<span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(r) - <span class=\"built_in\">query</span>(l - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(fa[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(fa[i])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(fa[i],i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            root = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs1</span>(root);</span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(root,root);</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(q);</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>,u,v,lim,op;i &lt;= q;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(op);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(op == <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(u);</span><br><span class=\"line\">            changes[i - cnt].id = u;</span><br><span class=\"line\">            changes[i - cnt].tim = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++cnt;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(u),<span class=\"built_in\">read</span>(v),<span class=\"built_in\">read</span>(lim);</span><br><span class=\"line\">            ques[cnt].u = u;</span><br><span class=\"line\">            ques[cnt].v = v;</span><br><span class=\"line\">            ques[cnt].lim = lim;</span><br><span class=\"line\">            ques[cnt].id = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(ques + <span class=\"number\">1</span>,ques + cnt + <span class=\"number\">1</span>,[](Query q1,Query q2)&#123;<span class=\"built_in\">return</span> (q1.id - q1.lim) &lt; (q2.id - q2.lim);&#125;);;</span><br><span class=\"line\">    <span class=\"type\">int</span> now = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= cnt;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(now &lt;= q - cnt &amp;&amp; changes[now].tim &lt; (ques[i].id - ques[i].lim))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">update</span>(dfn[changes[now].id]);</span><br><span class=\"line\">            ++now;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> u = ques[i].u,v = ques[i].v;</span><br><span class=\"line\">        ques[i].cnt = dep[u] + dep[v];</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(top[u] != top[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(dep[top[u]] &lt; dep[top[v]])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">swap</span>(u,v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ques[i].ans += <span class=\"built_in\">query</span>(dfn[top[u]],dfn[u]);</span><br><span class=\"line\">            u = fa[top[u]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dep[u] &lt; dep[v])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">swap</span>(u,v);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ques[i].ans += <span class=\"built_in\">query</span>(dfn[v],dfn[u]);</span><br><span class=\"line\">        ques[i].cnt -= <span class=\"number\">2</span> * dep[v] - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(ques + <span class=\"number\">1</span>,ques + cnt + <span class=\"number\">1</span>,[](Query q1,Query q2)&#123;<span class=\"keyword\">return</span> q1.id &lt; q2.id;&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= cnt;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">writesp</span>(ques[i].cnt),<span class=\"built_in\">writeln</span>(ques[i].ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P5769 [JSOI2016]飞机调度 题解","tag":null,"mathjax":true,"_content":"\n# P5769 [JSOI2016]飞机调度 题解\n\n<!-- more -->\n\n\n## Link\n\n[P5769 [JSOI2016]飞机调度](https://www.luogu.com.cn/problem/P5769)\n\n## Solution\n\n很好的一道题，主要难点在于建图和问题转化。\n\n首先说建图：思路是如果第 $i$ 条航线  **能衔接** 第 $j$ 条航线，就在 $i,j$ 之间建边。这里，能衔接指的是第 $i$ 条航线到达终点的时间加上在终点维护的时间在第 $j$ 条航线的起飞时间之前。\n\n读入的时候初始化最短路：\n\n```cpp\nfor (int i = 1; i <= n; i++)\n{\n    for (int j = 1; j <= n; j++)\n    {\n        read(len[i][j]);\n        if (i != j)\n        {\n            mp[i][j] = len[i][j] + wit[j];\n        }\n        else\n        {\n            mp[i][j] = 0;\n        }\n    }\n}\n```\n\n为了判断是否能够衔接，我们预处理出两点之间的最小时间，数据范围不大，直接套全员最短路。\n\n```cpp\nfor (int k = 1; k <= n; k++)\n{\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= n; j++)\n        {\n            mp[i][j] = min(mp[i][j], mp[i][k] + mp[k][j]);\n        }\n    }\n}\n```\n\n建边的部分代码：需要将每条航线拆成两个点，开始时初始化，$SS$ 连向每条航线，每条航线连向 $TT$。满足有源汇网络流的格式。\n\n- 源点和汇点加边。\n\n```cpp\nfor (int i = 1; i <= m; i++)\n{\n    read(lines[i].u), read(lines[i].v), read(lines[i].tim);\n    add(SS, i);\n    add(i + m, TT);\n}\n```\n\n航线之间满足条件的可以加边，注意到达的点需要加 $m$。\n\n- 航线之间加边\n\n```cpp\nfor (int i = 1; i <= m; i++)\n{\n    for (int j = 1; j <= m; j++)\n    {\n        if (i == j)\n        {\n            continue;\n        }\n        /* 左侧依次为: \n         * 航线 i 起飞时间 \n         * 航线 i 路上时间 \n         * 航线 i 维护时间 \n         * 航线 i 终点到航线 j 起点最短时间\n        */\n        if (lines[i].tim + len[lines[i].u][lines[i].v] + wit[lines[i].v] + mp[lines[i].v][lines[j].u] <= lines[j].tim)\n        {\n            add(i, j + m);\n        }\n    }\n}\n```\n\n可以发现，这样建出的图一定是一个**有向无环图**。我们只需要找到这张图的最小路径覆盖即可。\n\n用网络流求解即可，不会的同学可以看一下[这道题](https://www.luogu.com.cn/problem/P2764)。\n\n完整代码见下:\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_m 3000201\n#define max_n 5020\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nstruct node\n{\n    int to, nxt, val;\n} edge[max_m];\nstruct LINE\n{\n    int u, v, tim;\n} lines[max_n];\nint head[max_n], tot = 1;\nvoid add(int u, int v)\n{\n    edge[++tot].to = v;\n    edge[tot].nxt = head[u];\n    edge[tot].val = 1;\n    head[u] = tot;\n\n    edge[++tot].to = u;\n    edge[tot].nxt = head[v];\n    edge[tot].val = 0;\n    head[v] = tot;\n}\nint n, m;\nint wit[max_n];\nint len[max_n][max_n], mp[max_n][max_n];\nint SS, TT;\nint now[max_n], dep[max_n];\nbool bfs()\n{\n    memset(dep, 0x3f, (TT + 2) * (sizeof(int)));\n    memcpy(now, head, (TT + 2) * sizeof(int));\n    queue<int> que;\n    que.push(SS);\n    dep[SS] = 1;\n    while (!que.empty())\n    {\n        int u = que.front();\n        que.pop();\n        for (int i = head[u]; i; i = edge[i].nxt)\n        {\n            int v = edge[i].to;\n            if (edge[i].val && dep[v] >= INT_MAX / 2)\n            {\n                dep[v] = dep[u] + 1;\n                que.push(v);\n                if(v == TT)\n                {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}\nint dfs(int u, int sum)\n{\n    if (u == TT || sum == 0)\n    {\n        return sum;\n    }\n    int flow = 0, k;\n    for (int i = now[u]; i; i = edge[i].nxt)\n    {\n        int v = edge[i].to;\n        now[u] = i;\n        if (edge[i].val && dep[v] == dep[u] + 1)\n        {\n            k = dfs(v, min(sum, edge[i].val));\n            if (k)\n            {\n                edge[i].val -= k;\n                edge[i ^ 1].val += k;\n                flow += k;\n                sum -= k;\n            }\n        }\n    }\n    return flow;\n}\n\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(n), read(m);\n    SS = (m << 1) + 2, TT = (m << 2) + 3;\n    for (int i = 1; i <= n; i++)\n    {\n        read(wit[i]);\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= n; j++)\n        {\n            read(len[i][j]);\n            if (i != j)\n            {\n                mp[i][j] = len[i][j] + wit[j];\n            }\n            else\n            {\n                mp[i][j] = 0;\n            }\n        }\n    }\n    for (int k = 1; k <= n; k++)\n    {\n        for (int i = 1; i <= n; i++)\n        {\n            for (int j = 1; j <= n; j++)\n            {\n                mp[i][j] = min(mp[i][j], mp[i][k] + mp[k][j]);\n            }\n        }\n    }\n    for (int i = 1; i <= m; i++)\n    {\n        read(lines[i].u), read(lines[i].v), read(lines[i].tim);\n        add(SS, i);\n        add(i + m, TT);\n    }\n    for (int i = 1; i <= m; i++)\n    {\n        for (int j = 1; j <= m; j++)\n        {\n            if (i == j)\n            {\n                continue;\n            }\n            if (lines[i].tim + len[lines[i].u][lines[i].v] + wit[lines[i].v] + mp[lines[i].v][lines[j].u] <= lines[j].tim)\n            {\n                add(i, j + m);\n            }\n        }\n    }\n    int max_flow = 0;\n    while (bfs())\n    {\n        max_flow += dfs(SS, 0x7fffffffffff);\n    }\n    writeln(m - max_flow);\n    return 0;\n}\n```\n\n---\n\n## End\n\n[提交记录，最优解第一页](https://www.luogu.com.cn/record/107790449)\n\n第一次写黑题题解。\n\n[![Page Views Count](https://badges.toozhao.com/badges/01GXQJC7SS17NZHN7Q1FYHQ9BZ/green.svg)](https://badges.toozhao.com/stats/01GXQJC7SS17NZHN7Q1FYHQ9BZ \"Get your own page views count badge on badges.toozhao.com\")\n\n---\n","source":"_posts/P5769 [JSOI2016]飞机调度 题解.md","raw":"---\ntitle: \"P5769 [JSOI2016]飞机调度 题解\"\ntag: \nmathjax: true\n---\n\n# P5769 [JSOI2016]飞机调度 题解\n\n<!-- more -->\n\n\n## Link\n\n[P5769 [JSOI2016]飞机调度](https://www.luogu.com.cn/problem/P5769)\n\n## Solution\n\n很好的一道题，主要难点在于建图和问题转化。\n\n首先说建图：思路是如果第 $i$ 条航线  **能衔接** 第 $j$ 条航线，就在 $i,j$ 之间建边。这里，能衔接指的是第 $i$ 条航线到达终点的时间加上在终点维护的时间在第 $j$ 条航线的起飞时间之前。\n\n读入的时候初始化最短路：\n\n```cpp\nfor (int i = 1; i <= n; i++)\n{\n    for (int j = 1; j <= n; j++)\n    {\n        read(len[i][j]);\n        if (i != j)\n        {\n            mp[i][j] = len[i][j] + wit[j];\n        }\n        else\n        {\n            mp[i][j] = 0;\n        }\n    }\n}\n```\n\n为了判断是否能够衔接，我们预处理出两点之间的最小时间，数据范围不大，直接套全员最短路。\n\n```cpp\nfor (int k = 1; k <= n; k++)\n{\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= n; j++)\n        {\n            mp[i][j] = min(mp[i][j], mp[i][k] + mp[k][j]);\n        }\n    }\n}\n```\n\n建边的部分代码：需要将每条航线拆成两个点，开始时初始化，$SS$ 连向每条航线，每条航线连向 $TT$。满足有源汇网络流的格式。\n\n- 源点和汇点加边。\n\n```cpp\nfor (int i = 1; i <= m; i++)\n{\n    read(lines[i].u), read(lines[i].v), read(lines[i].tim);\n    add(SS, i);\n    add(i + m, TT);\n}\n```\n\n航线之间满足条件的可以加边，注意到达的点需要加 $m$。\n\n- 航线之间加边\n\n```cpp\nfor (int i = 1; i <= m; i++)\n{\n    for (int j = 1; j <= m; j++)\n    {\n        if (i == j)\n        {\n            continue;\n        }\n        /* 左侧依次为: \n         * 航线 i 起飞时间 \n         * 航线 i 路上时间 \n         * 航线 i 维护时间 \n         * 航线 i 终点到航线 j 起点最短时间\n        */\n        if (lines[i].tim + len[lines[i].u][lines[i].v] + wit[lines[i].v] + mp[lines[i].v][lines[j].u] <= lines[j].tim)\n        {\n            add(i, j + m);\n        }\n    }\n}\n```\n\n可以发现，这样建出的图一定是一个**有向无环图**。我们只需要找到这张图的最小路径覆盖即可。\n\n用网络流求解即可，不会的同学可以看一下[这道题](https://www.luogu.com.cn/problem/P2764)。\n\n完整代码见下:\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_m 3000201\n#define max_n 5020\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nstruct node\n{\n    int to, nxt, val;\n} edge[max_m];\nstruct LINE\n{\n    int u, v, tim;\n} lines[max_n];\nint head[max_n], tot = 1;\nvoid add(int u, int v)\n{\n    edge[++tot].to = v;\n    edge[tot].nxt = head[u];\n    edge[tot].val = 1;\n    head[u] = tot;\n\n    edge[++tot].to = u;\n    edge[tot].nxt = head[v];\n    edge[tot].val = 0;\n    head[v] = tot;\n}\nint n, m;\nint wit[max_n];\nint len[max_n][max_n], mp[max_n][max_n];\nint SS, TT;\nint now[max_n], dep[max_n];\nbool bfs()\n{\n    memset(dep, 0x3f, (TT + 2) * (sizeof(int)));\n    memcpy(now, head, (TT + 2) * sizeof(int));\n    queue<int> que;\n    que.push(SS);\n    dep[SS] = 1;\n    while (!que.empty())\n    {\n        int u = que.front();\n        que.pop();\n        for (int i = head[u]; i; i = edge[i].nxt)\n        {\n            int v = edge[i].to;\n            if (edge[i].val && dep[v] >= INT_MAX / 2)\n            {\n                dep[v] = dep[u] + 1;\n                que.push(v);\n                if(v == TT)\n                {\n                    return 1;\n                }\n            }\n        }\n    }\n    return 0;\n}\nint dfs(int u, int sum)\n{\n    if (u == TT || sum == 0)\n    {\n        return sum;\n    }\n    int flow = 0, k;\n    for (int i = now[u]; i; i = edge[i].nxt)\n    {\n        int v = edge[i].to;\n        now[u] = i;\n        if (edge[i].val && dep[v] == dep[u] + 1)\n        {\n            k = dfs(v, min(sum, edge[i].val));\n            if (k)\n            {\n                edge[i].val -= k;\n                edge[i ^ 1].val += k;\n                flow += k;\n                sum -= k;\n            }\n        }\n    }\n    return flow;\n}\n\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(n), read(m);\n    SS = (m << 1) + 2, TT = (m << 2) + 3;\n    for (int i = 1; i <= n; i++)\n    {\n        read(wit[i]);\n    }\n    for (int i = 1; i <= n; i++)\n    {\n        for (int j = 1; j <= n; j++)\n        {\n            read(len[i][j]);\n            if (i != j)\n            {\n                mp[i][j] = len[i][j] + wit[j];\n            }\n            else\n            {\n                mp[i][j] = 0;\n            }\n        }\n    }\n    for (int k = 1; k <= n; k++)\n    {\n        for (int i = 1; i <= n; i++)\n        {\n            for (int j = 1; j <= n; j++)\n            {\n                mp[i][j] = min(mp[i][j], mp[i][k] + mp[k][j]);\n            }\n        }\n    }\n    for (int i = 1; i <= m; i++)\n    {\n        read(lines[i].u), read(lines[i].v), read(lines[i].tim);\n        add(SS, i);\n        add(i + m, TT);\n    }\n    for (int i = 1; i <= m; i++)\n    {\n        for (int j = 1; j <= m; j++)\n        {\n            if (i == j)\n            {\n                continue;\n            }\n            if (lines[i].tim + len[lines[i].u][lines[i].v] + wit[lines[i].v] + mp[lines[i].v][lines[j].u] <= lines[j].tim)\n            {\n                add(i, j + m);\n            }\n        }\n    }\n    int max_flow = 0;\n    while (bfs())\n    {\n        max_flow += dfs(SS, 0x7fffffffffff);\n    }\n    writeln(m - max_flow);\n    return 0;\n}\n```\n\n---\n\n## End\n\n[提交记录，最优解第一页](https://www.luogu.com.cn/record/107790449)\n\n第一次写黑题题解。\n\n[![Page Views Count](https://badges.toozhao.com/badges/01GXQJC7SS17NZHN7Q1FYHQ9BZ/green.svg)](https://badges.toozhao.com/stats/01GXQJC7SS17NZHN7Q1FYHQ9BZ \"Get your own page views count badge on badges.toozhao.com\")\n\n---\n","slug":"P5769 [JSOI2016]飞机调度 题解","published":1,"date":"2023-10-04T14:11:08.256Z","updated":"2023-10-04T14:11:08.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9zg0025osjahd6hdxbu","content":"<h1 id=\"p5769-jsoi2016飞机调度-题解\">P5769 [JSOI2016]飞机调度 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"link\">Link</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/P5769\">P5769\r\n[JSOI2016]飞机调度</a></p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>很好的一道题，主要难点在于建图和问题转化。</p>\r\n<p>首先说建图：思路是如果第 <span class=\"math inline\">\\(i\\)</span>\r\n条航线 <strong>能衔接</strong> 第 <span class=\"math inline\">\\(j\\)</span>\r\n条航线，就在 <span class=\"math inline\">\\(i,j\\)</span>\r\n之间建边。这里，能衔接指的是第 <span class=\"math inline\">\\(i\\)</span>\r\n条航线到达终点的时间加上在终点维护的时间在第 <span\r\nclass=\"math inline\">\\(j\\)</span> 条航线的起飞时间之前。</p>\r\n<p>读入的时候初始化最短路：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(len[i][j]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mp[i][j] = len[i][j] + wit[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>为了判断是否能够衔接，我们预处理出两点之间的最小时间，数据范围不大，直接套全员最短路。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt;= n; k++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mp[i][j] = <span class=\"built_in\">min</span>(mp[i][j], mp[i][k] + mp[k][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>建边的部分代码：需要将每条航线拆成两个点，开始时初始化，<span\r\nclass=\"math inline\">\\(SS\\)</span> 连向每条航线，每条航线连向 <span\r\nclass=\"math inline\">\\(TT\\)</span>。满足有源汇网络流的格式。</p>\r\n<ul>\r\n<li>源点和汇点加边。</li>\r\n</ul>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(lines[i].u), <span class=\"built_in\">read</span>(lines[i].v), <span class=\"built_in\">read</span>(lines[i].tim);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(SS, i);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(i + m, TT);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>航线之间满足条件的可以加边，注意到达的点需要加 <span\r\nclass=\"math inline\">\\(m\\)</span>。</p>\r\n<ul>\r\n<li>航线之间加边</li>\r\n</ul>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/* 左侧依次为: </span></span><br><span class=\"line\"><span class=\"comment\">         * 航线 i 起飞时间 </span></span><br><span class=\"line\"><span class=\"comment\">         * 航线 i 路上时间 </span></span><br><span class=\"line\"><span class=\"comment\">         * 航线 i 维护时间 </span></span><br><span class=\"line\"><span class=\"comment\">         * 航线 i 终点到航线 j 起点最短时间</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lines[i].tim + len[lines[i].u][lines[i].v] + wit[lines[i].v] + mp[lines[i].v][lines[j].u] &lt;= lines[j].tim)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(i, j + m);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>可以发现，这样建出的图一定是一个<strong>有向无环图</strong>。我们只需要找到这张图的最小路径覆盖即可。</p>\r\n<p>用网络流求解即可，不会的同学可以看一下<a\r\nhref=\"https://www.luogu.com.cn/problem/P2764\">这道题</a>。</p>\r\n<p>完整代码见下:</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_m 3000201</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 5020</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> to, nxt, val;</span><br><span class=\"line\">&#125; edge[max_m];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">LINE</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> u, v, tim;</span><br><span class=\"line\">&#125; lines[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> head[max_n], tot = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edge[++tot].to = v;</span><br><span class=\"line\">    edge[tot].nxt = head[u];</span><br><span class=\"line\">    edge[tot].val = <span class=\"number\">1</span>;</span><br><span class=\"line\">    head[u] = tot;</span><br><span class=\"line\"></span><br><span class=\"line\">    edge[++tot].to = u;</span><br><span class=\"line\">    edge[tot].nxt = head[v];</span><br><span class=\"line\">    edge[tot].val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    head[v] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"type\">int</span> wit[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> len[max_n][max_n], mp[max_n][max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> SS, TT;</span><br><span class=\"line\"><span class=\"type\">int</span> now[max_n], dep[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dep, <span class=\"number\">0x3f</span>, (TT + <span class=\"number\">2</span>) * (<span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>)));</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(now, head, (TT + <span class=\"number\">2</span>) * <span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; que;</span><br><span class=\"line\">    que.<span class=\"built_in\">push</span>(SS);</span><br><span class=\"line\">    dep[SS] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!que.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = head[u]; i; i = edge[i].nxt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> v = edge[i].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (edge[i].val &amp;&amp; dep[v] &gt;= INT_MAX / <span class=\"number\">2</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dep[v] = dep[u] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(v);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(v == TT)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> sum)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u == TT || sum == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> flow = <span class=\"number\">0</span>, k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = now[u]; i; i = edge[i].nxt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = edge[i].to;</span><br><span class=\"line\">        now[u] = i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (edge[i].val &amp;&amp; dep[v] == dep[u] + <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"built_in\">dfs</span>(v, <span class=\"built_in\">min</span>(sum, edge[i].val));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                edge[i].val -= k;</span><br><span class=\"line\">                edge[i ^ <span class=\"number\">1</span>].val += k;</span><br><span class=\"line\">                flow += k;</span><br><span class=\"line\">                sum -= k;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n), <span class=\"built_in\">read</span>(m);</span><br><span class=\"line\">    SS = (m &lt;&lt; <span class=\"number\">1</span>) + <span class=\"number\">2</span>, TT = (m &lt;&lt; <span class=\"number\">2</span>) + <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(wit[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(len[i][j]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != j)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                mp[i][j] = len[i][j] + wit[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                mp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt;= n; k++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                mp[i][j] = <span class=\"built_in\">min</span>(mp[i][j], mp[i][k] + mp[k][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(lines[i].u), <span class=\"built_in\">read</span>(lines[i].v), <span class=\"built_in\">read</span>(lines[i].tim);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(SS, i);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(i + m, TT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == j)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lines[i].tim + len[lines[i].u][lines[i].v] + wit[lines[i].v] + mp[lines[i].v][lines[j].u] &lt;= lines[j].tim)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">add</span>(i, j + m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> max_flow = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        max_flow += <span class=\"built_in\">dfs</span>(SS, <span class=\"number\">0x7fffffffffff</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(m - max_flow);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<hr />\r\n<h2 id=\"end\">End</h2>\r\n<p><a\r\nhref=\"https://www.luogu.com.cn/record/107790449\">提交记录，最优解第一页</a></p>\r\n<p>第一次写黑题题解。</p>\r\n<p><a href=\"https://badges.toozhao.com/stats/01GXQJC7SS17NZHN7Q1FYHQ9BZ\"\r\ntitle=\"Get your own page views count badge on badges.toozhao.com\"><img\r\nsrc=\"https://badges.toozhao.com/badges/01GXQJC7SS17NZHN7Q1FYHQ9BZ/green.svg\"\r\nalt=\"Page Views Count\" /></a></p>\r\n<hr />\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"p5769-jsoi2016飞机调度-题解\">P5769 [JSOI2016]飞机调度 题解</h1>","more":"<h2 id=\"link\">Link</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/P5769\">P5769\r\n[JSOI2016]飞机调度</a></p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>很好的一道题，主要难点在于建图和问题转化。</p>\r\n<p>首先说建图：思路是如果第 <span class=\"math inline\">\\(i\\)</span>\r\n条航线 <strong>能衔接</strong> 第 <span class=\"math inline\">\\(j\\)</span>\r\n条航线，就在 <span class=\"math inline\">\\(i,j\\)</span>\r\n之间建边。这里，能衔接指的是第 <span class=\"math inline\">\\(i\\)</span>\r\n条航线到达终点的时间加上在终点维护的时间在第 <span\r\nclass=\"math inline\">\\(j\\)</span> 条航线的起飞时间之前。</p>\r\n<p>读入的时候初始化最短路：</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(len[i][j]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i != j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mp[i][j] = len[i][j] + wit[j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>为了判断是否能够衔接，我们预处理出两点之间的最小时间，数据范围不大，直接套全员最短路。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt;= n; k++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            mp[i][j] = <span class=\"built_in\">min</span>(mp[i][j], mp[i][k] + mp[k][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>建边的部分代码：需要将每条航线拆成两个点，开始时初始化，<span\r\nclass=\"math inline\">\\(SS\\)</span> 连向每条航线，每条航线连向 <span\r\nclass=\"math inline\">\\(TT\\)</span>。满足有源汇网络流的格式。</p>\r\n<ul>\r\n<li>源点和汇点加边。</li>\r\n</ul>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(lines[i].u), <span class=\"built_in\">read</span>(lines[i].v), <span class=\"built_in\">read</span>(lines[i].tim);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(SS, i);</span><br><span class=\"line\">    <span class=\"built_in\">add</span>(i + m, TT);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>航线之间满足条件的可以加边，注意到达的点需要加 <span\r\nclass=\"math inline\">\\(m\\)</span>。</p>\r\n<ul>\r\n<li>航线之间加边</li>\r\n</ul>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == j)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/* 左侧依次为: </span></span><br><span class=\"line\"><span class=\"comment\">         * 航线 i 起飞时间 </span></span><br><span class=\"line\"><span class=\"comment\">         * 航线 i 路上时间 </span></span><br><span class=\"line\"><span class=\"comment\">         * 航线 i 维护时间 </span></span><br><span class=\"line\"><span class=\"comment\">         * 航线 i 终点到航线 j 起点最短时间</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lines[i].tim + len[lines[i].u][lines[i].v] + wit[lines[i].v] + mp[lines[i].v][lines[j].u] &lt;= lines[j].tim)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(i, j + m);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>可以发现，这样建出的图一定是一个<strong>有向无环图</strong>。我们只需要找到这张图的最小路径覆盖即可。</p>\r\n<p>用网络流求解即可，不会的同学可以看一下<a\r\nhref=\"https://www.luogu.com.cn/problem/P2764\">这道题</a>。</p>\r\n<p>完整代码见下:</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_m 3000201</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 5020</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> to, nxt, val;</span><br><span class=\"line\">&#125; edge[max_m];</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">LINE</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> u, v, tim;</span><br><span class=\"line\">&#125; lines[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> head[max_n], tot = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> v)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edge[++tot].to = v;</span><br><span class=\"line\">    edge[tot].nxt = head[u];</span><br><span class=\"line\">    edge[tot].val = <span class=\"number\">1</span>;</span><br><span class=\"line\">    head[u] = tot;</span><br><span class=\"line\"></span><br><span class=\"line\">    edge[++tot].to = u;</span><br><span class=\"line\">    edge[tot].nxt = head[v];</span><br><span class=\"line\">    edge[tot].val = <span class=\"number\">0</span>;</span><br><span class=\"line\">    head[v] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"type\">int</span> wit[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> len[max_n][max_n], mp[max_n][max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> SS, TT;</span><br><span class=\"line\"><span class=\"type\">int</span> now[max_n], dep[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">bfs</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dep, <span class=\"number\">0x3f</span>, (TT + <span class=\"number\">2</span>) * (<span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>)));</span><br><span class=\"line\">    <span class=\"built_in\">memcpy</span>(now, head, (TT + <span class=\"number\">2</span>) * <span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\">    queue&lt;<span class=\"type\">int</span>&gt; que;</span><br><span class=\"line\">    que.<span class=\"built_in\">push</span>(SS);</span><br><span class=\"line\">    dep[SS] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!que.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u = que.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = head[u]; i; i = edge[i].nxt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> v = edge[i].to;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (edge[i].val &amp;&amp; dep[v] &gt;= INT_MAX / <span class=\"number\">2</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dep[v] = dep[u] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(v);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(v == TT)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> u, <span class=\"type\">int</span> sum)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (u == TT || sum == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> flow = <span class=\"number\">0</span>, k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = now[u]; i; i = edge[i].nxt)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> v = edge[i].to;</span><br><span class=\"line\">        now[u] = i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (edge[i].val &amp;&amp; dep[v] == dep[u] + <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"built_in\">dfs</span>(v, <span class=\"built_in\">min</span>(sum, edge[i].val));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (k)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                edge[i].val -= k;</span><br><span class=\"line\">                edge[i ^ <span class=\"number\">1</span>].val += k;</span><br><span class=\"line\">                flow += k;</span><br><span class=\"line\">                sum -= k;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> flow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n), <span class=\"built_in\">read</span>(m);</span><br><span class=\"line\">    SS = (m &lt;&lt; <span class=\"number\">1</span>) + <span class=\"number\">2</span>, TT = (m &lt;&lt; <span class=\"number\">2</span>) + <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(wit[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(len[i][j]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i != j)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                mp[i][j] = len[i][j] + wit[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                mp[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">1</span>; k &lt;= n; k++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                mp[i][j] = <span class=\"built_in\">min</span>(mp[i][j], mp[i][k] + mp[k][j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(lines[i].u), <span class=\"built_in\">read</span>(lines[i].v), <span class=\"built_in\">read</span>(lines[i].tim);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(SS, i);</span><br><span class=\"line\">        <span class=\"built_in\">add</span>(i + m, TT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == j)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lines[i].tim + len[lines[i].u][lines[i].v] + wit[lines[i].v] + mp[lines[i].v][lines[j].u] &lt;= lines[j].tim)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">add</span>(i, j + m);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> max_flow = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">bfs</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        max_flow += <span class=\"built_in\">dfs</span>(SS, <span class=\"number\">0x7fffffffffff</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(m - max_flow);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<hr />\r\n<h2 id=\"end\">End</h2>\r\n<p><a\r\nhref=\"https://www.luogu.com.cn/record/107790449\">提交记录，最优解第一页</a></p>\r\n<p>第一次写黑题题解。</p>\r\n<p><a href=\"https://badges.toozhao.com/stats/01GXQJC7SS17NZHN7Q1FYHQ9BZ\"\r\ntitle=\"Get your own page views count badge on badges.toozhao.com\"><img\r\nsrc=\"https://badges.toozhao.com/badges/01GXQJC7SS17NZHN7Q1FYHQ9BZ/green.svg\"\r\nalt=\"Page Views Count\" /></a></p>\r\n<hr />"},{"title":"P7624 [AHOI2021初中组] 地铁 题解","tag":null,"mathjax":true,"_content":"\n# P7624 [AHOI2021初中组] 地铁 题解\n\n<!-- more -->\n\n## 题目链接\n\n[传送门](https://www.luogu.com.cn/problem/P7624)\n\n## 题目描述\n\n $B$ 市的地铁历史悠久，小雪和小可可乘坐的 $X$ 形路线，上面分布着 $n$ 个车站，**相邻两个车站之间的铁路长度为正整数**。现在小雪进行了一些观察，得到了 $m$ 条信息，第 $i$ 条信息是如下形式之一：\n\n1. 环上顺时针由 $S_i$ 到 $T_i$ 的一段距离不小于一个给定的值 $L_i$（$S_i$ 和 $T_i$ 是两个车站）；\n2. 环上顺时针由 $S_i$ 到 $T_i$ 的一段距离不大于一个给定的值 $L_i$。\n\n小雪想要你计算最后 $X$ 线地铁的总长度有多少种不同的合法取值。\n\n## 题意简述\n\n给定一个环，和一些约束条件。第 $i$ 条约束条件表示从点 $a$ 到点 $b$ 的**顺时针**距离不大于（或不小于）$L_{i}$。求环的总长度有多少种可能。\n\n---\n\n## 题目分析\n\n根据题目中信息，可以列出 $m$ 个不等关系，容易想到**差分约束**算法\n\n由于题目中给出的限制都是顺时针的，我们可以把环砍成链，然后用 $dis$ 数组储存这条链上从点 $1$ 到点 $n$ 之间的距离。我们需要求解环长，不妨设环长为 $sum$，根据题意我们可以先列出如下关系：\n\n- $dis_1 = 0$\n- $dis_{i+1} \\ge dis_{i} +1$  转化为我们需要的形式（小于等于）  $ { dis_{i} - dis_{i+1 } \\le -1}$\n- 关于总长度还有一个限制 $sum \\ge dis_{n} +1$，依旧转化为小于等于形式：$ {dis_n \\le sum-1}$\n  \n    接下来分析题目中的输入信息，输入信息分为两类，分别进行讨论，每一类仍分为两种情况：\n\n1. 对于 $type = 1$，若有 $S < T$，则有限制条件 ${ dis_{S} - dis_{T} \\le -L}$，若 $S > T$，则有限制条件 $ {dis_S - dis_T  \\le sum - L}$。\n2. 对于 $type = 2$，若有 $S < T$，则有限制条件 $ {dis_T - dis_S \\le L}$，若 $S > T$，则有限制条件 ${dis_S - dis_T  \\le  L - sum}$。\n\n由以上限制条件，我们即可获得 $sum$ 的下界 $l$ 和上界 $r$，分析单调性可知可以使用二分计算，并应该对 $sum$ 前的系数正负进行讨论。\n\n下面给出代码。\n\n```cpp\n//author yuhang-ren\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 510\nconst int inf = 2.65e11;\nsigned n, m;\nint dis[max_n], sum;\n// 以下为读入输出优化\nvoid read(int &p)\n{\n  p = 0;\n  signed k = 1;\n  char c = getchar();\n  while (c < '0' || c > '9')\n  {\n      if (c == '-')\n      {\n          k = -1;\n      }\n      c = getchar();\n  }\n  while (c >= '0' && c <= '9')\n  {\n      p = p * 10 + c - '0';\n      c = getchar();\n  }\n  p *= k;\n  return;\n}\nvoid read(signed &p)\n{\n  p = 0;\n  signed k = 1;\n  char c = getchar();\n  while (c < '0' || c > '9')\n  {\n      if (c == '-')\n      {\n          k = -1;\n      }\n      c = getchar();\n  }\n  while (c >= '0' && c <= '9')\n  {\n      p = p * 10 + c - '0';\n      c = getchar();\n  }\n  p *= k;\n  return;\n}\nvoid write_(int x)\n{\n  if (x < 0)\n  {\n      putchar('-');\n      x = -x;\n  }\n  if (x > 9)\n  {\n      write_(x / 10);\n  }\n  putchar(x % 10 + '0');\n}\nvoid write_sp(int x)\n{\n  write_(x);\n  putchar(' ');\n}\nvoid writeln(int x)\n{\n  write_(x);\n  putchar('\\n');\n}\n// 以上为读入输出优化\n// 以下为差分约束所用图论部分\nstruct edge\n{\n  signed u, v, w, k;\n} edges[max_n * 2];\nint tot, pre[max_n];\nvoid add(signed u, signed v,signed w, signed k)\n{\n  edges[++tot] = {v, u, w, k};\n}\n// 以上为差分约束所用图论部分\nint checker(int mid)\n{\n  // ?printf(\"%lld\\n\", mid);\n  for (int i = 1; i <= m; i++)\n  {\n      dis[i] = (int)1e15;\n  }\n  dis[1] = 0;\n  for (int i = 1; i <= n; i++)\n  {\n      for (int j = 1; j <= tot; j++)\n      {\n          edge e = edges[j];\n          int u = e.u, v = e.v, w = e.w, k = e.k;\n          if (dis[v] > dis[u] + k * mid + w)\n          {\n              dis[v] = dis[u] + k * mid + w;\n              pre[v] = j;\n          }\n      }\n  }\n  for (int i = 1; i <= tot; i++)\n  {\n      edge e = edges[i];\n      int u = e.u, v = e.v, w = e.w, k = e.k;\n      if (dis[v] > dis[u] + k * mid + w)\n      {\n          int head = u;\n          for (int j = 1; j <= n; j++)\n          {\n              head = edges[pre[head]].u;\n          }\n          int mid_k = edges[pre[head]].k;\n\n          for (int v_ = edges[pre[head]].u; v_ != head; v_ = edges[pre[v_]].u)\n          {\n              mid_k += edges[pre[v_]].k; // 合并统计系数\n          }\n          return (int)(mid_k > 0) * 2 - 1;\n      }\n  }\n  // 没有符合条件返回0\n  return 0;\n}\n// 二分求解上下界的函数\nint solution_r(int l, int r)\n{\n  while (l < r)\n  {\n      int mid = (l + r + 1) / 2; // 向上取整\n      int mid_k = checker(mid);\n      if (mid_k == 0)\n      {\n          l = mid;\n      }\n      else if (mid_k == 1)\n      {\n          l = mid + 1;\n      }\n      else\n      {\n          r = mid - 1;\n      }\n  }\n  return l;\n}\nint solution_l(int l, int r)\n{\n  while (l < r)\n  {\n      int mid = (l + r) / 2; // 与solution_r不同\n      int mid_k = checker(mid);\n      if (mid_k == 0)\n      {\n          r = mid; // 与solution_r不同\n      }\n      else if (mid_k == 1)\n      {\n          l = mid + 1;\n      }\n      else\n      {\n          r = mid - 1;\n      }\n  }\n  return l;\n}\nsigned main()\n{\n  read(n), read(m);\n  // 这个循环用来满足条件 dis[i+1] >= dis[i] + 1 --> dis[i]-dis[i+1] <= -1\n  for (signed i = 1; i < n; i++)\n  {\n      add(i, i + 1, -1, 0); // 加边，这里第四个参数表示的是该限制下总长度的系数正负\n  }\n  // 另外一个限制  sum >= dis[n]+1\n  add(n, 1, -1, 1);\n  // 插入全部限制条件\n  for (int i = 1; i <= m; i++)\n  {\n      signed op, s, t;\n      int l; // op表示限制类型,s、t是两个车站,l为限制长度。\n      read(op), read(s), read(t), read(l);\n      if (op == 1) // 限制长度为最短长度\n      {\n          if (s < t) // dis[t]-dis[s] >= l <---> dis[s]-dis[t] <= -l\n          {\n              add(s, t, -l, 0);\n          }\n          else // dis[s]-dis[t] <= c-l;  画个图或许就理解了？\n          {\n              add(s, t, -l, 1);\n          }\n      }\n      else\n      {\n          if (s < t) // dis[t] - dis[s] <= l\n          {\n              add(t, s, l, 0);\n          }\n          else // dis[t] - dis[s] <= l-c\n          {\n              add(t, s, l, -1);\n          }\n      }\n  }\n  int r = solution_r(0, inf);\n  if (r >= inf - 1000)\n  {\n      writeln(-1);\n      return 0;\n  }\n  int l = solution_l(0, inf);\n  writeln(r - l + 1);\n  return 0;\n}\n```\n","source":"_posts/P7624 [AHOI2021初中组] 地铁 题解.md","raw":"---\ntitle: \"P7624 [AHOI2021初中组] 地铁 题解\"\ntag: \nmathjax: true\n---\n\n# P7624 [AHOI2021初中组] 地铁 题解\n\n<!-- more -->\n\n## 题目链接\n\n[传送门](https://www.luogu.com.cn/problem/P7624)\n\n## 题目描述\n\n $B$ 市的地铁历史悠久，小雪和小可可乘坐的 $X$ 形路线，上面分布着 $n$ 个车站，**相邻两个车站之间的铁路长度为正整数**。现在小雪进行了一些观察，得到了 $m$ 条信息，第 $i$ 条信息是如下形式之一：\n\n1. 环上顺时针由 $S_i$ 到 $T_i$ 的一段距离不小于一个给定的值 $L_i$（$S_i$ 和 $T_i$ 是两个车站）；\n2. 环上顺时针由 $S_i$ 到 $T_i$ 的一段距离不大于一个给定的值 $L_i$。\n\n小雪想要你计算最后 $X$ 线地铁的总长度有多少种不同的合法取值。\n\n## 题意简述\n\n给定一个环，和一些约束条件。第 $i$ 条约束条件表示从点 $a$ 到点 $b$ 的**顺时针**距离不大于（或不小于）$L_{i}$。求环的总长度有多少种可能。\n\n---\n\n## 题目分析\n\n根据题目中信息，可以列出 $m$ 个不等关系，容易想到**差分约束**算法\n\n由于题目中给出的限制都是顺时针的，我们可以把环砍成链，然后用 $dis$ 数组储存这条链上从点 $1$ 到点 $n$ 之间的距离。我们需要求解环长，不妨设环长为 $sum$，根据题意我们可以先列出如下关系：\n\n- $dis_1 = 0$\n- $dis_{i+1} \\ge dis_{i} +1$  转化为我们需要的形式（小于等于）  $ { dis_{i} - dis_{i+1 } \\le -1}$\n- 关于总长度还有一个限制 $sum \\ge dis_{n} +1$，依旧转化为小于等于形式：$ {dis_n \\le sum-1}$\n  \n    接下来分析题目中的输入信息，输入信息分为两类，分别进行讨论，每一类仍分为两种情况：\n\n1. 对于 $type = 1$，若有 $S < T$，则有限制条件 ${ dis_{S} - dis_{T} \\le -L}$，若 $S > T$，则有限制条件 $ {dis_S - dis_T  \\le sum - L}$。\n2. 对于 $type = 2$，若有 $S < T$，则有限制条件 $ {dis_T - dis_S \\le L}$，若 $S > T$，则有限制条件 ${dis_S - dis_T  \\le  L - sum}$。\n\n由以上限制条件，我们即可获得 $sum$ 的下界 $l$ 和上界 $r$，分析单调性可知可以使用二分计算，并应该对 $sum$ 前的系数正负进行讨论。\n\n下面给出代码。\n\n```cpp\n//author yuhang-ren\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 510\nconst int inf = 2.65e11;\nsigned n, m;\nint dis[max_n], sum;\n// 以下为读入输出优化\nvoid read(int &p)\n{\n  p = 0;\n  signed k = 1;\n  char c = getchar();\n  while (c < '0' || c > '9')\n  {\n      if (c == '-')\n      {\n          k = -1;\n      }\n      c = getchar();\n  }\n  while (c >= '0' && c <= '9')\n  {\n      p = p * 10 + c - '0';\n      c = getchar();\n  }\n  p *= k;\n  return;\n}\nvoid read(signed &p)\n{\n  p = 0;\n  signed k = 1;\n  char c = getchar();\n  while (c < '0' || c > '9')\n  {\n      if (c == '-')\n      {\n          k = -1;\n      }\n      c = getchar();\n  }\n  while (c >= '0' && c <= '9')\n  {\n      p = p * 10 + c - '0';\n      c = getchar();\n  }\n  p *= k;\n  return;\n}\nvoid write_(int x)\n{\n  if (x < 0)\n  {\n      putchar('-');\n      x = -x;\n  }\n  if (x > 9)\n  {\n      write_(x / 10);\n  }\n  putchar(x % 10 + '0');\n}\nvoid write_sp(int x)\n{\n  write_(x);\n  putchar(' ');\n}\nvoid writeln(int x)\n{\n  write_(x);\n  putchar('\\n');\n}\n// 以上为读入输出优化\n// 以下为差分约束所用图论部分\nstruct edge\n{\n  signed u, v, w, k;\n} edges[max_n * 2];\nint tot, pre[max_n];\nvoid add(signed u, signed v,signed w, signed k)\n{\n  edges[++tot] = {v, u, w, k};\n}\n// 以上为差分约束所用图论部分\nint checker(int mid)\n{\n  // ?printf(\"%lld\\n\", mid);\n  for (int i = 1; i <= m; i++)\n  {\n      dis[i] = (int)1e15;\n  }\n  dis[1] = 0;\n  for (int i = 1; i <= n; i++)\n  {\n      for (int j = 1; j <= tot; j++)\n      {\n          edge e = edges[j];\n          int u = e.u, v = e.v, w = e.w, k = e.k;\n          if (dis[v] > dis[u] + k * mid + w)\n          {\n              dis[v] = dis[u] + k * mid + w;\n              pre[v] = j;\n          }\n      }\n  }\n  for (int i = 1; i <= tot; i++)\n  {\n      edge e = edges[i];\n      int u = e.u, v = e.v, w = e.w, k = e.k;\n      if (dis[v] > dis[u] + k * mid + w)\n      {\n          int head = u;\n          for (int j = 1; j <= n; j++)\n          {\n              head = edges[pre[head]].u;\n          }\n          int mid_k = edges[pre[head]].k;\n\n          for (int v_ = edges[pre[head]].u; v_ != head; v_ = edges[pre[v_]].u)\n          {\n              mid_k += edges[pre[v_]].k; // 合并统计系数\n          }\n          return (int)(mid_k > 0) * 2 - 1;\n      }\n  }\n  // 没有符合条件返回0\n  return 0;\n}\n// 二分求解上下界的函数\nint solution_r(int l, int r)\n{\n  while (l < r)\n  {\n      int mid = (l + r + 1) / 2; // 向上取整\n      int mid_k = checker(mid);\n      if (mid_k == 0)\n      {\n          l = mid;\n      }\n      else if (mid_k == 1)\n      {\n          l = mid + 1;\n      }\n      else\n      {\n          r = mid - 1;\n      }\n  }\n  return l;\n}\nint solution_l(int l, int r)\n{\n  while (l < r)\n  {\n      int mid = (l + r) / 2; // 与solution_r不同\n      int mid_k = checker(mid);\n      if (mid_k == 0)\n      {\n          r = mid; // 与solution_r不同\n      }\n      else if (mid_k == 1)\n      {\n          l = mid + 1;\n      }\n      else\n      {\n          r = mid - 1;\n      }\n  }\n  return l;\n}\nsigned main()\n{\n  read(n), read(m);\n  // 这个循环用来满足条件 dis[i+1] >= dis[i] + 1 --> dis[i]-dis[i+1] <= -1\n  for (signed i = 1; i < n; i++)\n  {\n      add(i, i + 1, -1, 0); // 加边，这里第四个参数表示的是该限制下总长度的系数正负\n  }\n  // 另外一个限制  sum >= dis[n]+1\n  add(n, 1, -1, 1);\n  // 插入全部限制条件\n  for (int i = 1; i <= m; i++)\n  {\n      signed op, s, t;\n      int l; // op表示限制类型,s、t是两个车站,l为限制长度。\n      read(op), read(s), read(t), read(l);\n      if (op == 1) // 限制长度为最短长度\n      {\n          if (s < t) // dis[t]-dis[s] >= l <---> dis[s]-dis[t] <= -l\n          {\n              add(s, t, -l, 0);\n          }\n          else // dis[s]-dis[t] <= c-l;  画个图或许就理解了？\n          {\n              add(s, t, -l, 1);\n          }\n      }\n      else\n      {\n          if (s < t) // dis[t] - dis[s] <= l\n          {\n              add(t, s, l, 0);\n          }\n          else // dis[t] - dis[s] <= l-c\n          {\n              add(t, s, l, -1);\n          }\n      }\n  }\n  int r = solution_r(0, inf);\n  if (r >= inf - 1000)\n  {\n      writeln(-1);\n      return 0;\n  }\n  int l = solution_l(0, inf);\n  writeln(r - l + 1);\n  return 0;\n}\n```\n","slug":"P7624 [AHOI2021初中组] 地铁 题解","published":1,"date":"2023-10-04T14:11:08.256Z","updated":"2023-10-04T14:11:08.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9zh0027osjagt4ecx6u","content":"<h1 id=\"p7624-ahoi2021初中组-地铁-题解\">P7624 [AHOI2021初中组] 地铁\r\n题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"题目链接\">题目链接</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/P7624\">传送门</a></p>\r\n<h2 id=\"题目描述\">题目描述</h2>\r\n<p><span class=\"math inline\">\\(B\\)</span>\r\n市的地铁历史悠久，小雪和小可可乘坐的 <span\r\nclass=\"math inline\">\\(X\\)</span> 形路线，上面分布着 <span\r\nclass=\"math inline\">\\(n\\)</span>\r\n个车站，<strong>相邻两个车站之间的铁路长度为正整数</strong>。现在小雪进行了一些观察，得到了\r\n<span class=\"math inline\">\\(m\\)</span> 条信息，第 <span\r\nclass=\"math inline\">\\(i\\)</span> 条信息是如下形式之一：</p>\r\n<ol type=\"1\">\r\n<li>环上顺时针由 <span class=\"math inline\">\\(S_i\\)</span> 到 <span\r\nclass=\"math inline\">\\(T_i\\)</span> 的一段距离不小于一个给定的值 <span\r\nclass=\"math inline\">\\(L_i\\)</span>（<span\r\nclass=\"math inline\">\\(S_i\\)</span> 和 <span\r\nclass=\"math inline\">\\(T_i\\)</span> 是两个车站）；</li>\r\n<li>环上顺时针由 <span class=\"math inline\">\\(S_i\\)</span> 到 <span\r\nclass=\"math inline\">\\(T_i\\)</span> 的一段距离不大于一个给定的值 <span\r\nclass=\"math inline\">\\(L_i\\)</span>。</li>\r\n</ol>\r\n<p>小雪想要你计算最后 <span class=\"math inline\">\\(X\\)</span>\r\n线地铁的总长度有多少种不同的合法取值。</p>\r\n<h2 id=\"题意简述\">题意简述</h2>\r\n<p>给定一个环，和一些约束条件。第 <span class=\"math inline\">\\(i\\)</span>\r\n条约束条件表示从点 <span class=\"math inline\">\\(a\\)</span> 到点 <span\r\nclass=\"math inline\">\\(b\\)</span>\r\n的<strong>顺时针</strong>距离不大于（或不小于）<span\r\nclass=\"math inline\">\\(L_{i}\\)</span>。求环的总长度有多少种可能。</p>\r\n<hr />\r\n<h2 id=\"题目分析\">题目分析</h2>\r\n<p>根据题目中信息，可以列出 <span class=\"math inline\">\\(m\\)</span>\r\n个不等关系，容易想到<strong>差分约束</strong>算法</p>\r\n<p>由于题目中给出的限制都是顺时针的，我们可以把环砍成链，然后用 <span\r\nclass=\"math inline\">\\(dis\\)</span> 数组储存这条链上从点 <span\r\nclass=\"math inline\">\\(1\\)</span> 到点 <span\r\nclass=\"math inline\">\\(n\\)</span>\r\n之间的距离。我们需要求解环长，不妨设环长为 <span\r\nclass=\"math inline\">\\(sum\\)</span>，根据题意我们可以先列出如下关系：</p>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(dis_1 = 0\\)</span></p></li>\r\n<li><p><span class=\"math inline\">\\(dis_{i+1} \\ge dis_{i} +1\\)</span>\r\n转化为我们需要的形式（小于等于） $ { dis_{i} - dis_{i+1 } }$</p></li>\r\n<li><p>关于总长度还有一个限制 <span class=\"math inline\">\\(sum \\ge\r\ndis_{n} +1\\)</span>，依旧转化为小于等于形式：$ {dis_n sum-1}$</p>\r\n<p>接下来分析题目中的输入信息，输入信息分为两类，分别进行讨论，每一类仍分为两种情况：</p></li>\r\n</ul>\r\n<ol type=\"1\">\r\n<li>对于 <span class=\"math inline\">\\(type = 1\\)</span>，若有 <span\r\nclass=\"math inline\">\\(S &lt; T\\)</span>，则有限制条件 <span\r\nclass=\"math inline\">\\({ dis_{S} - dis_{T} \\le -L}\\)</span>，若 <span\r\nclass=\"math inline\">\\(S &gt; T\\)</span>，则有限制条件 $ {dis_S - dis_T\r\nsum - L}$。</li>\r\n<li>对于 <span class=\"math inline\">\\(type = 2\\)</span>，若有 <span\r\nclass=\"math inline\">\\(S &lt; T\\)</span>，则有限制条件 $ {dis_T - dis_S\r\nL}$，若 <span class=\"math inline\">\\(S &gt; T\\)</span>，则有限制条件\r\n<span class=\"math inline\">\\({dis_S - dis_T \\le L - sum}\\)</span>。</li>\r\n</ol>\r\n<p>由以上限制条件，我们即可获得 <span class=\"math inline\">\\(sum\\)</span>\r\n的下界 <span class=\"math inline\">\\(l\\)</span> 和上界 <span\r\nclass=\"math inline\">\\(r\\)</span>，分析单调性可知可以使用二分计算，并应该对\r\n<span class=\"math inline\">\\(sum\\)</span> 前的系数正负进行讨论。</p>\r\n<p>下面给出代码。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//author yuhang-ren</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 510</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf = <span class=\"number\">2.65e11</span>;</span><br><span class=\"line\"><span class=\"type\">signed</span> n, m;</span><br><span class=\"line\"><span class=\"type\">int</span> dis[max_n], sum;</span><br><span class=\"line\"><span class=\"comment\">// 以下为读入输出优化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  p = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">signed</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">      c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  p *= k;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">signed</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  p = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">signed</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">      c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  p *= k;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">      x = -x;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_sp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">  <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">  <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 以上为读入输出优化</span></span><br><span class=\"line\"><span class=\"comment\">// 以下为差分约束所用图论部分</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">edge</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">signed</span> u, v, w, k;</span><br><span class=\"line\">&#125; edges[max_n * <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> tot, pre[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">signed</span> u, <span class=\"type\">signed</span> v,<span class=\"type\">signed</span> w, <span class=\"type\">signed</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  edges[++tot] = &#123;v, u, w, k&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 以上为差分约束所用图论部分</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">checker</span><span class=\"params\">(<span class=\"type\">int</span> mid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ?printf(&quot;%lld\\n&quot;, mid);</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      dis[i] = (<span class=\"type\">int</span>)<span class=\"number\">1e15</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dis[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= tot; j++)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          edge e = edges[j];</span><br><span class=\"line\">          <span class=\"type\">int</span> u = e.u, v = e.v, w = e.w, k = e.k;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (dis[v] &gt; dis[u] + k * mid + w)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              dis[v] = dis[u] + k * mid + w;</span><br><span class=\"line\">              pre[v] = j;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= tot; i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      edge e = edges[i];</span><br><span class=\"line\">      <span class=\"type\">int</span> u = e.u, v = e.v, w = e.w, k = e.k;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (dis[v] &gt; dis[u] + k * mid + w)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"type\">int</span> head = u;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              head = edges[pre[head]].u;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"type\">int</span> mid_k = edges[pre[head]].k;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"type\">int</span> v_ = edges[pre[head]].u; v_ != head; v_ = edges[pre[v_]].u)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              mid_k += edges[pre[v_]].k; <span class=\"comment\">// 合并统计系数</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> (<span class=\"type\">int</span>)(mid_k &gt; <span class=\"number\">0</span>) * <span class=\"number\">2</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 没有符合条件返回0</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 二分求解上下界的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">solution_r</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (l &lt; r)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> mid = (l + r + <span class=\"number\">1</span>) / <span class=\"number\">2</span>; <span class=\"comment\">// 向上取整</span></span><br><span class=\"line\">      <span class=\"type\">int</span> mid_k = <span class=\"built_in\">checker</span>(mid);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (mid_k == <span class=\"number\">0</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          l = mid;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mid_k == <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">solution_l</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (l &lt; r)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> mid = (l + r) / <span class=\"number\">2</span>; <span class=\"comment\">// 与solution_r不同</span></span><br><span class=\"line\">      <span class=\"type\">int</span> mid_k = <span class=\"built_in\">checker</span>(mid);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (mid_k == <span class=\"number\">0</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          r = mid; <span class=\"comment\">// 与solution_r不同</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mid_k == <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">read</span>(n), <span class=\"built_in\">read</span>(m);</span><br><span class=\"line\">  <span class=\"comment\">// 这个循环用来满足条件 dis[i+1] &gt;= dis[i] + 1 --&gt; dis[i]-dis[i+1] &lt;= -1</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">signed</span> i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"built_in\">add</span>(i, i + <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>); <span class=\"comment\">// 加边，这里第四个参数表示的是该限制下总长度的系数正负</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 另外一个限制  sum &gt;= dis[n]+1</span></span><br><span class=\"line\">  <span class=\"built_in\">add</span>(n, <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 插入全部限制条件</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"type\">signed</span> op, s, t;</span><br><span class=\"line\">      <span class=\"type\">int</span> l; <span class=\"comment\">// op表示限制类型,s、t是两个车站,l为限制长度。</span></span><br><span class=\"line\">      <span class=\"built_in\">read</span>(op), <span class=\"built_in\">read</span>(s), <span class=\"built_in\">read</span>(t), <span class=\"built_in\">read</span>(l);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (op == <span class=\"number\">1</span>) <span class=\"comment\">// 限制长度为最短长度</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (s &lt; t) <span class=\"comment\">// dis[t]-dis[s] &gt;= l &lt;---&gt; dis[s]-dis[t] &lt;= -l</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"built_in\">add</span>(s, t, -l, <span class=\"number\">0</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"comment\">// dis[s]-dis[t] &lt;= c-l;  画个图或许就理解了？</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"built_in\">add</span>(s, t, -l, <span class=\"number\">1</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (s &lt; t) <span class=\"comment\">// dis[t] - dis[s] &lt;= l</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"built_in\">add</span>(t, s, l, <span class=\"number\">0</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"comment\">// dis[t] - dis[s] &lt;= l-c</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"built_in\">add</span>(t, s, l, <span class=\"number\">-1</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> r = <span class=\"built_in\">solution_r</span>(<span class=\"number\">0</span>, inf);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (r &gt;= inf - <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"built_in\">writeln</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> l = <span class=\"built_in\">solution_l</span>(<span class=\"number\">0</span>, inf);</span><br><span class=\"line\">  <span class=\"built_in\">writeln</span>(r - l + <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"p7624-ahoi2021初中组-地铁-题解\">P7624 [AHOI2021初中组] 地铁\r\n题解</h1>","more":"<h2 id=\"题目链接\">题目链接</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/P7624\">传送门</a></p>\r\n<h2 id=\"题目描述\">题目描述</h2>\r\n<p><span class=\"math inline\">\\(B\\)</span>\r\n市的地铁历史悠久，小雪和小可可乘坐的 <span\r\nclass=\"math inline\">\\(X\\)</span> 形路线，上面分布着 <span\r\nclass=\"math inline\">\\(n\\)</span>\r\n个车站，<strong>相邻两个车站之间的铁路长度为正整数</strong>。现在小雪进行了一些观察，得到了\r\n<span class=\"math inline\">\\(m\\)</span> 条信息，第 <span\r\nclass=\"math inline\">\\(i\\)</span> 条信息是如下形式之一：</p>\r\n<ol type=\"1\">\r\n<li>环上顺时针由 <span class=\"math inline\">\\(S_i\\)</span> 到 <span\r\nclass=\"math inline\">\\(T_i\\)</span> 的一段距离不小于一个给定的值 <span\r\nclass=\"math inline\">\\(L_i\\)</span>（<span\r\nclass=\"math inline\">\\(S_i\\)</span> 和 <span\r\nclass=\"math inline\">\\(T_i\\)</span> 是两个车站）；</li>\r\n<li>环上顺时针由 <span class=\"math inline\">\\(S_i\\)</span> 到 <span\r\nclass=\"math inline\">\\(T_i\\)</span> 的一段距离不大于一个给定的值 <span\r\nclass=\"math inline\">\\(L_i\\)</span>。</li>\r\n</ol>\r\n<p>小雪想要你计算最后 <span class=\"math inline\">\\(X\\)</span>\r\n线地铁的总长度有多少种不同的合法取值。</p>\r\n<h2 id=\"题意简述\">题意简述</h2>\r\n<p>给定一个环，和一些约束条件。第 <span class=\"math inline\">\\(i\\)</span>\r\n条约束条件表示从点 <span class=\"math inline\">\\(a\\)</span> 到点 <span\r\nclass=\"math inline\">\\(b\\)</span>\r\n的<strong>顺时针</strong>距离不大于（或不小于）<span\r\nclass=\"math inline\">\\(L_{i}\\)</span>。求环的总长度有多少种可能。</p>\r\n<hr />\r\n<h2 id=\"题目分析\">题目分析</h2>\r\n<p>根据题目中信息，可以列出 <span class=\"math inline\">\\(m\\)</span>\r\n个不等关系，容易想到<strong>差分约束</strong>算法</p>\r\n<p>由于题目中给出的限制都是顺时针的，我们可以把环砍成链，然后用 <span\r\nclass=\"math inline\">\\(dis\\)</span> 数组储存这条链上从点 <span\r\nclass=\"math inline\">\\(1\\)</span> 到点 <span\r\nclass=\"math inline\">\\(n\\)</span>\r\n之间的距离。我们需要求解环长，不妨设环长为 <span\r\nclass=\"math inline\">\\(sum\\)</span>，根据题意我们可以先列出如下关系：</p>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(dis_1 = 0\\)</span></p></li>\r\n<li><p><span class=\"math inline\">\\(dis_{i+1} \\ge dis_{i} +1\\)</span>\r\n转化为我们需要的形式（小于等于） $ { dis_{i} - dis_{i+1 } }$</p></li>\r\n<li><p>关于总长度还有一个限制 <span class=\"math inline\">\\(sum \\ge\r\ndis_{n} +1\\)</span>，依旧转化为小于等于形式：$ {dis_n sum-1}$</p>\r\n<p>接下来分析题目中的输入信息，输入信息分为两类，分别进行讨论，每一类仍分为两种情况：</p></li>\r\n</ul>\r\n<ol type=\"1\">\r\n<li>对于 <span class=\"math inline\">\\(type = 1\\)</span>，若有 <span\r\nclass=\"math inline\">\\(S &lt; T\\)</span>，则有限制条件 <span\r\nclass=\"math inline\">\\({ dis_{S} - dis_{T} \\le -L}\\)</span>，若 <span\r\nclass=\"math inline\">\\(S &gt; T\\)</span>，则有限制条件 $ {dis_S - dis_T\r\nsum - L}$。</li>\r\n<li>对于 <span class=\"math inline\">\\(type = 2\\)</span>，若有 <span\r\nclass=\"math inline\">\\(S &lt; T\\)</span>，则有限制条件 $ {dis_T - dis_S\r\nL}$，若 <span class=\"math inline\">\\(S &gt; T\\)</span>，则有限制条件\r\n<span class=\"math inline\">\\({dis_S - dis_T \\le L - sum}\\)</span>。</li>\r\n</ol>\r\n<p>由以上限制条件，我们即可获得 <span class=\"math inline\">\\(sum\\)</span>\r\n的下界 <span class=\"math inline\">\\(l\\)</span> 和上界 <span\r\nclass=\"math inline\">\\(r\\)</span>，分析单调性可知可以使用二分计算，并应该对\r\n<span class=\"math inline\">\\(sum\\)</span> 前的系数正负进行讨论。</p>\r\n<p>下面给出代码。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//author yuhang-ren</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 510</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf = <span class=\"number\">2.65e11</span>;</span><br><span class=\"line\"><span class=\"type\">signed</span> n, m;</span><br><span class=\"line\"><span class=\"type\">int</span> dis[max_n], sum;</span><br><span class=\"line\"><span class=\"comment\">// 以下为读入输出优化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  p = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">signed</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">      c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  p *= k;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">signed</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  p = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"type\">signed</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">      c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  p *= k;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">      x = -x;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_sp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">  <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">  <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 以上为读入输出优化</span></span><br><span class=\"line\"><span class=\"comment\">// 以下为差分约束所用图论部分</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">edge</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">signed</span> u, v, w, k;</span><br><span class=\"line\">&#125; edges[max_n * <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> tot, pre[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">signed</span> u, <span class=\"type\">signed</span> v,<span class=\"type\">signed</span> w, <span class=\"type\">signed</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  edges[++tot] = &#123;v, u, w, k&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 以上为差分约束所用图论部分</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">checker</span><span class=\"params\">(<span class=\"type\">int</span> mid)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ?printf(&quot;%lld\\n&quot;, mid);</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      dis[i] = (<span class=\"type\">int</span>)<span class=\"number\">1e15</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  dis[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= tot; j++)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          edge e = edges[j];</span><br><span class=\"line\">          <span class=\"type\">int</span> u = e.u, v = e.v, w = e.w, k = e.k;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (dis[v] &gt; dis[u] + k * mid + w)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              dis[v] = dis[u] + k * mid + w;</span><br><span class=\"line\">              pre[v] = j;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= tot; i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      edge e = edges[i];</span><br><span class=\"line\">      <span class=\"type\">int</span> u = e.u, v = e.v, w = e.w, k = e.k;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (dis[v] &gt; dis[u] + k * mid + w)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"type\">int</span> head = u;</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              head = edges[pre[head]].u;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"type\">int</span> mid_k = edges[pre[head]].k;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"type\">int</span> v_ = edges[pre[head]].u; v_ != head; v_ = edges[pre[v_]].u)</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              mid_k += edges[pre[v_]].k; <span class=\"comment\">// 合并统计系数</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> (<span class=\"type\">int</span>)(mid_k &gt; <span class=\"number\">0</span>) * <span class=\"number\">2</span> - <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 没有符合条件返回0</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 二分求解上下界的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">solution_r</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (l &lt; r)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> mid = (l + r + <span class=\"number\">1</span>) / <span class=\"number\">2</span>; <span class=\"comment\">// 向上取整</span></span><br><span class=\"line\">      <span class=\"type\">int</span> mid_k = <span class=\"built_in\">checker</span>(mid);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (mid_k == <span class=\"number\">0</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          l = mid;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mid_k == <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">solution_l</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (l &lt; r)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> mid = (l + r) / <span class=\"number\">2</span>; <span class=\"comment\">// 与solution_r不同</span></span><br><span class=\"line\">      <span class=\"type\">int</span> mid_k = <span class=\"built_in\">checker</span>(mid);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (mid_k == <span class=\"number\">0</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          r = mid; <span class=\"comment\">// 与solution_r不同</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (mid_k == <span class=\"number\">1</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">read</span>(n), <span class=\"built_in\">read</span>(m);</span><br><span class=\"line\">  <span class=\"comment\">// 这个循环用来满足条件 dis[i+1] &gt;= dis[i] + 1 --&gt; dis[i]-dis[i+1] &lt;= -1</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">signed</span> i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"built_in\">add</span>(i, i + <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>); <span class=\"comment\">// 加边，这里第四个参数表示的是该限制下总长度的系数正负</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 另外一个限制  sum &gt;= dis[n]+1</span></span><br><span class=\"line\">  <span class=\"built_in\">add</span>(n, <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"comment\">// 插入全部限制条件</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"type\">signed</span> op, s, t;</span><br><span class=\"line\">      <span class=\"type\">int</span> l; <span class=\"comment\">// op表示限制类型,s、t是两个车站,l为限制长度。</span></span><br><span class=\"line\">      <span class=\"built_in\">read</span>(op), <span class=\"built_in\">read</span>(s), <span class=\"built_in\">read</span>(t), <span class=\"built_in\">read</span>(l);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (op == <span class=\"number\">1</span>) <span class=\"comment\">// 限制长度为最短长度</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (s &lt; t) <span class=\"comment\">// dis[t]-dis[s] &gt;= l &lt;---&gt; dis[s]-dis[t] &lt;= -l</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"built_in\">add</span>(s, t, -l, <span class=\"number\">0</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"comment\">// dis[s]-dis[t] &lt;= c-l;  画个图或许就理解了？</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"built_in\">add</span>(s, t, -l, <span class=\"number\">1</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (s &lt; t) <span class=\"comment\">// dis[t] - dis[s] &lt;= l</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"built_in\">add</span>(t, s, l, <span class=\"number\">0</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"comment\">// dis[t] - dis[s] &lt;= l-c</span></span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">              <span class=\"built_in\">add</span>(t, s, l, <span class=\"number\">-1</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> r = <span class=\"built_in\">solution_r</span>(<span class=\"number\">0</span>, inf);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (r &gt;= inf - <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      <span class=\"built_in\">writeln</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"type\">int</span> l = <span class=\"built_in\">solution_l</span>(<span class=\"number\">0</span>, inf);</span><br><span class=\"line\">  <span class=\"built_in\">writeln</span>(r - l + <span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P8924 题解","tag":null,"mathjax":true,"_content":"\n# 洛谷 P8924 题解\n\n<!-- more -->\n\n\n## 题目描述\n\n给你一个函数，画出它的函数图像（`*` 表示经过该点，`.` 表示不经过该点），大小为 $n\\times m$，其中 $x$ 的范围是 $[0,n-1]$，$f(x)$ 的范围是 $[0,m-1]$。\n\n---\n\n## 题目分析\n\n题目比较简单，我们看到数据范围，直接选择暴力枚举。\n\n首先开一个二维字符数组 $maps$ 记录数据。记得初始化为 `.`。（这里手动初始化，也可以选择使用 `memset`。）\n\n```cpp\nfor(int i = 0;i<500;i++)\n{\n    for(int j = 0;j<500;j++)\n    {\n        maps[i][j] = '.';\n    }\n}\n```\n\n然后处理输入，将输入的系数保存供后续使用。\n\n\n```cpp\nfor(int i = 0;i<=k;i++)\n{\n    scanf(\"%lld\",&nums[i]);\n}\n```\n\n之后循环遍历 $x$ 和 $k$，计算每一个 $x$ 对应的函数值。由于函数值可能很大，这里需要加一个特判，避免数组爆炸。\n\n```cpp\nint sum;\nfor (int x = 0; x < n; x++)\n{\n    sum = 0;\n    for (int i = 0; i <= k; i++)\n    {\n        sum += nums[i] * pow(x, i);\n    }\n    if (sum < m)\n    {\n        maps[x][sum] = '*';\n    }\n}\n```\n\n最终我们可以愉快的输出，记得纵坐标是倒序的哦。\n\n```cpp\nfor (int i = n - 1; i >= 0; i--)\n{\n    for (int j = 0; j < m; j++)\n    {\n        cout << maps[j][i];\n    }\n    cout << endl;\n}\n```\n\n## 完整 AC 代码如下\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define max_n 510\n#define int long long\nchar maps[max_n][max_n];\nint n, m, k;\nint nums[max_n];\nsigned main()\n{\n    scanf(\"%lld%lld%lld\", &n, &m, &k);\n    for (int i = 0; i < 500; i++)\n    {\n        for (int j = 0; j < 500; j++)\n        {\n            maps[i][j] = '.';\n        }\n    }\n    for (int i = 0; i <= k; i++)\n    {\n        scanf(\"%lld\", &nums[i]);\n    }\n    int sum;\n    for (int x = 0; x < n; x++)\n    {\n        sum = 0;\n        for (int i = 0; i <= k; i++)\n        {\n            sum += nums[i] * pow(x, i);\n        }\n        if (sum < m)\n        {\n            maps[x][sum] = '*';\n        }\n    }\n\n    for (int i = n - 1; i >= 0; i--)\n    {\n        for (int j = 0; j < m; j++)\n        {\n            cout << maps[j][i];\n        }\n        cout << endl;\n    }\n    return 0;\n}\n```\n\n","source":"_posts/P8924 题解.md","raw":"---\ntitle: \"P8924 题解\"\ntag: \nmathjax: true\n---\n\n# 洛谷 P8924 题解\n\n<!-- more -->\n\n\n## 题目描述\n\n给你一个函数，画出它的函数图像（`*` 表示经过该点，`.` 表示不经过该点），大小为 $n\\times m$，其中 $x$ 的范围是 $[0,n-1]$，$f(x)$ 的范围是 $[0,m-1]$。\n\n---\n\n## 题目分析\n\n题目比较简单，我们看到数据范围，直接选择暴力枚举。\n\n首先开一个二维字符数组 $maps$ 记录数据。记得初始化为 `.`。（这里手动初始化，也可以选择使用 `memset`。）\n\n```cpp\nfor(int i = 0;i<500;i++)\n{\n    for(int j = 0;j<500;j++)\n    {\n        maps[i][j] = '.';\n    }\n}\n```\n\n然后处理输入，将输入的系数保存供后续使用。\n\n\n```cpp\nfor(int i = 0;i<=k;i++)\n{\n    scanf(\"%lld\",&nums[i]);\n}\n```\n\n之后循环遍历 $x$ 和 $k$，计算每一个 $x$ 对应的函数值。由于函数值可能很大，这里需要加一个特判，避免数组爆炸。\n\n```cpp\nint sum;\nfor (int x = 0; x < n; x++)\n{\n    sum = 0;\n    for (int i = 0; i <= k; i++)\n    {\n        sum += nums[i] * pow(x, i);\n    }\n    if (sum < m)\n    {\n        maps[x][sum] = '*';\n    }\n}\n```\n\n最终我们可以愉快的输出，记得纵坐标是倒序的哦。\n\n```cpp\nfor (int i = n - 1; i >= 0; i--)\n{\n    for (int j = 0; j < m; j++)\n    {\n        cout << maps[j][i];\n    }\n    cout << endl;\n}\n```\n\n## 完整 AC 代码如下\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define max_n 510\n#define int long long\nchar maps[max_n][max_n];\nint n, m, k;\nint nums[max_n];\nsigned main()\n{\n    scanf(\"%lld%lld%lld\", &n, &m, &k);\n    for (int i = 0; i < 500; i++)\n    {\n        for (int j = 0; j < 500; j++)\n        {\n            maps[i][j] = '.';\n        }\n    }\n    for (int i = 0; i <= k; i++)\n    {\n        scanf(\"%lld\", &nums[i]);\n    }\n    int sum;\n    for (int x = 0; x < n; x++)\n    {\n        sum = 0;\n        for (int i = 0; i <= k; i++)\n        {\n            sum += nums[i] * pow(x, i);\n        }\n        if (sum < m)\n        {\n            maps[x][sum] = '*';\n        }\n    }\n\n    for (int i = n - 1; i >= 0; i--)\n    {\n        for (int j = 0; j < m; j++)\n        {\n            cout << maps[j][i];\n        }\n        cout << endl;\n    }\n    return 0;\n}\n```\n\n","slug":"P8924 题解","published":1,"date":"2023-10-04T14:11:08.256Z","updated":"2023-10-04T14:11:08.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9zi0029osja44p2fuwb","content":"<h1 id=\"洛谷-p8924-题解\">洛谷 P8924 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"题目描述\">题目描述</h2>\r\n<p>给你一个函数，画出它的函数图像（<code>*</code>\r\n表示经过该点，<code>.</code> 表示不经过该点），大小为 <span\r\nclass=\"math inline\">\\(n\\times m\\)</span>，其中 <span\r\nclass=\"math inline\">\\(x\\)</span> 的范围是 <span\r\nclass=\"math inline\">\\([0,n-1]\\)</span>，<span\r\nclass=\"math inline\">\\(f(x)\\)</span> 的范围是 <span\r\nclass=\"math inline\">\\([0,m-1]\\)</span>。</p>\r\n<hr />\r\n<h2 id=\"题目分析\">题目分析</h2>\r\n<p>题目比较简单，我们看到数据范围，直接选择暴力枚举。</p>\r\n<p>首先开一个二维字符数组 <span class=\"math inline\">\\(maps\\)</span>\r\n记录数据。记得初始化为 <code>.</code>。（这里手动初始化，也可以选择使用\r\n<code>memset</code>。）</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">500</span>;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>;j&lt;<span class=\"number\">500</span>;j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        maps[i][j] = <span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>然后处理输入，将输入的系数保存供后续使用。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i&lt;=k;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;nums[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>之后循环遍历 <span class=\"math inline\">\\(x\\)</span> 和 <span\r\nclass=\"math inline\">\\(k\\)</span>，计算每一个 <span\r\nclass=\"math inline\">\\(x\\)</span>\r\n对应的函数值。由于函数值可能很大，这里需要加一个特判，避免数组爆炸。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> sum;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x &lt; n; x++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= k; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum += nums[i] * <span class=\"built_in\">pow</span>(x, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum &lt; m)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        maps[x][sum] = <span class=\"string\">&#x27;*&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>最终我们可以愉快的输出，记得纵坐标是倒序的哦。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; maps[j][i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"完整-ac-代码如下\">完整 AC 代码如下</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 510</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"type\">char</span> maps[max_n][max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, k;</span><br><span class=\"line\"><span class=\"type\">int</span> nums[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld%lld&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">500</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">500</span>; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            maps[i][j] = <span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= k; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, &amp;nums[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x &lt; n; x++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= k; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            sum += nums[i] * <span class=\"built_in\">pow</span>(x, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum &lt; m)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            maps[x][sum] = <span class=\"string\">&#x27;*&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; maps[j][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"洛谷-p8924-题解\">洛谷 P8924 题解</h1>","more":"<h2 id=\"题目描述\">题目描述</h2>\r\n<p>给你一个函数，画出它的函数图像（<code>*</code>\r\n表示经过该点，<code>.</code> 表示不经过该点），大小为 <span\r\nclass=\"math inline\">\\(n\\times m\\)</span>，其中 <span\r\nclass=\"math inline\">\\(x\\)</span> 的范围是 <span\r\nclass=\"math inline\">\\([0,n-1]\\)</span>，<span\r\nclass=\"math inline\">\\(f(x)\\)</span> 的范围是 <span\r\nclass=\"math inline\">\\([0,m-1]\\)</span>。</p>\r\n<hr />\r\n<h2 id=\"题目分析\">题目分析</h2>\r\n<p>题目比较简单，我们看到数据范围，直接选择暴力枚举。</p>\r\n<p>首先开一个二维字符数组 <span class=\"math inline\">\\(maps\\)</span>\r\n记录数据。记得初始化为 <code>.</code>。（这里手动初始化，也可以选择使用\r\n<code>memset</code>。）</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">500</span>;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>;j&lt;<span class=\"number\">500</span>;j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        maps[i][j] = <span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>然后处理输入，将输入的系数保存供后续使用。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i&lt;=k;i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>,&amp;nums[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>之后循环遍历 <span class=\"math inline\">\\(x\\)</span> 和 <span\r\nclass=\"math inline\">\\(k\\)</span>，计算每一个 <span\r\nclass=\"math inline\">\\(x\\)</span>\r\n对应的函数值。由于函数值可能很大，这里需要加一个特判，避免数组爆炸。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> sum;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x &lt; n; x++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= k; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum += nums[i] * <span class=\"built_in\">pow</span>(x, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sum &lt; m)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        maps[x][sum] = <span class=\"string\">&#x27;*&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>最终我们可以愉快的输出，记得纵坐标是倒序的哦。</p>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cout &lt;&lt; maps[j][i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"完整-ac-代码如下\">完整 AC 代码如下</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 510</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"type\">char</span> maps[max_n][max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, k;</span><br><span class=\"line\"><span class=\"type\">int</span> nums[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld%lld&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">500</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">500</span>; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            maps[i][j] = <span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= k; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, &amp;nums[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> x = <span class=\"number\">0</span>; x &lt; n; x++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= k; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            sum += nums[i] * <span class=\"built_in\">pow</span>(x, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum &lt; m)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            maps[x][sum] = <span class=\"string\">&#x27;*&#x27;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cout &lt;&lt; maps[j][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P9033「KDOI-04」XOR Sum 题解","tag":null,"mathjax":true,"_content":"\n# P9033「KDOI-04」XOR Sum 题解\n\n<!-- more -->\n\n\n## 题目链接\n\n[传送门](https://www.luogu.com.cn/problem/P9033)\n\n## 题意简述\n\n构造一个长度为 $n$，值域为 $[0,m]$ 的异或和为 $k$ 的序列，如果不存在则输出 $-1$。\n\n## 题目分析\n\n首先很容易想到，当 $k \\le m$ 的时候，我们仅需要输出一个 $k$ 剩下的位置全部填 $0$ 即可。\n\n而当 $k > m$ 时，我们至少需要两个数，因此在此时判断 $n$ 是否等于 $1$，若不等于 $1$，根据异或不进位原理，我们还需判断 $k$ 和 $m$ 的二进制位数关系。设 $l_k,l_m$ 分别为  $k,m$ 的二进制位数。\n\n- 若 $l_m < l_k$ 则无解。\n- 反之，我们可以让一个数是 $2^{l_k}$，此时再构造出 $k - 2^{l_k}$ 即可，可以证明 $k - 2^{l_k} \\le m$ 因此只需两个数 $2^{l_k},k-2^{l_k}$ 即可，剩余部位补零。\n\n## Codes\n\n```cpp\n//author: yuhang-ren\n#include <bits/stdc++.h>\nusing namespace std;\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if(x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if(x>9)\n    {\n        write_(x/10);\n    }\n    putchar(x%10+'0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T,n,m,k;\nsigned main()\n{\n    #if _clang_\n        freopen(\"1.in\",\"r\",stdin);\n        freopen(\"1.out\",\"w\",stdout);\n    #endif \n    read(T);\n    for(int t = 1;t<=T;t++)\n    {\n        read(n),read(k),read(m);\n        if(k <= m)\n        {\n            writesp(k);\n            for(int i = 2;i<=n;i++)\n            {\n                writesp(0);\n            }\n            puts(\"\");\n            continue;\n        }\n        else\n        {\n            int l_k = 0,l_m = 0;\n            int k_ = k;//k后面还需要用到，所以用k_代替k进行运算。\n            for(;k_;k_>>=1)\n            {\n                l_k++;\n            }\n            for(;m;m>>=1)\n            {\n                l_m++;\n            }\n            if(n == 1)\n            {\n                writeln(-1);\n                continue;\n            }\n            if(l_k > l_m)\n            {\n                writeln(-1);\n                continue;\n            }\n            writesp((1<<(l_k-1)));\n            writesp((k - (1<<(l_k-1))));\n            for(int i = 3;i<=n;i++)\n            {\n                writesp(0);\n            }\n            puts(\"\");\n        }\n    }\n    return 0;\n}\n\n```\n","source":"_posts/P9033「KDOI-04」XOR Sum 题解.md","raw":"---\ntitle: \"P9033「KDOI-04」XOR Sum 题解\"\ntag: \nmathjax: true\n---\n\n# P9033「KDOI-04」XOR Sum 题解\n\n<!-- more -->\n\n\n## 题目链接\n\n[传送门](https://www.luogu.com.cn/problem/P9033)\n\n## 题意简述\n\n构造一个长度为 $n$，值域为 $[0,m]$ 的异或和为 $k$ 的序列，如果不存在则输出 $-1$。\n\n## 题目分析\n\n首先很容易想到，当 $k \\le m$ 的时候，我们仅需要输出一个 $k$ 剩下的位置全部填 $0$ 即可。\n\n而当 $k > m$ 时，我们至少需要两个数，因此在此时判断 $n$ 是否等于 $1$，若不等于 $1$，根据异或不进位原理，我们还需判断 $k$ 和 $m$ 的二进制位数关系。设 $l_k,l_m$ 分别为  $k,m$ 的二进制位数。\n\n- 若 $l_m < l_k$ 则无解。\n- 反之，我们可以让一个数是 $2^{l_k}$，此时再构造出 $k - 2^{l_k}$ 即可，可以证明 $k - 2^{l_k} \\le m$ 因此只需两个数 $2^{l_k},k-2^{l_k}$ 即可，剩余部位补零。\n\n## Codes\n\n```cpp\n//author: yuhang-ren\n#include <bits/stdc++.h>\nusing namespace std;\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if(x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if(x>9)\n    {\n        write_(x/10);\n    }\n    putchar(x%10+'0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T,n,m,k;\nsigned main()\n{\n    #if _clang_\n        freopen(\"1.in\",\"r\",stdin);\n        freopen(\"1.out\",\"w\",stdout);\n    #endif \n    read(T);\n    for(int t = 1;t<=T;t++)\n    {\n        read(n),read(k),read(m);\n        if(k <= m)\n        {\n            writesp(k);\n            for(int i = 2;i<=n;i++)\n            {\n                writesp(0);\n            }\n            puts(\"\");\n            continue;\n        }\n        else\n        {\n            int l_k = 0,l_m = 0;\n            int k_ = k;//k后面还需要用到，所以用k_代替k进行运算。\n            for(;k_;k_>>=1)\n            {\n                l_k++;\n            }\n            for(;m;m>>=1)\n            {\n                l_m++;\n            }\n            if(n == 1)\n            {\n                writeln(-1);\n                continue;\n            }\n            if(l_k > l_m)\n            {\n                writeln(-1);\n                continue;\n            }\n            writesp((1<<(l_k-1)));\n            writesp((k - (1<<(l_k-1))));\n            for(int i = 3;i<=n;i++)\n            {\n                writesp(0);\n            }\n            puts(\"\");\n        }\n    }\n    return 0;\n}\n\n```\n","slug":"P9033「KDOI-04」XOR Sum 题解","published":1,"date":"2023-10-04T14:11:08.257Z","updated":"2023-10-04T14:11:08.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9zj002bosjagb802rqi","content":"<h1 id=\"p9033kdoi-04xor-sum-题解\">P9033「KDOI-04」XOR Sum 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"题目链接\">题目链接</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/P9033\">传送门</a></p>\r\n<h2 id=\"题意简述\">题意简述</h2>\r\n<p>构造一个长度为 <span class=\"math inline\">\\(n\\)</span>，值域为 <span\r\nclass=\"math inline\">\\([0,m]\\)</span> 的异或和为 <span\r\nclass=\"math inline\">\\(k\\)</span> 的序列，如果不存在则输出 <span\r\nclass=\"math inline\">\\(-1\\)</span>。</p>\r\n<h2 id=\"题目分析\">题目分析</h2>\r\n<p>首先很容易想到，当 <span class=\"math inline\">\\(k \\le m\\)</span>\r\n的时候，我们仅需要输出一个 <span class=\"math inline\">\\(k\\)</span>\r\n剩下的位置全部填 <span class=\"math inline\">\\(0\\)</span> 即可。</p>\r\n<p>而当 <span class=\"math inline\">\\(k &gt; m\\)</span>\r\n时，我们至少需要两个数，因此在此时判断 <span\r\nclass=\"math inline\">\\(n\\)</span> 是否等于 <span\r\nclass=\"math inline\">\\(1\\)</span>，若不等于 <span\r\nclass=\"math inline\">\\(1\\)</span>，根据异或不进位原理，我们还需判断 <span\r\nclass=\"math inline\">\\(k\\)</span> 和 <span\r\nclass=\"math inline\">\\(m\\)</span> 的二进制位数关系。设 <span\r\nclass=\"math inline\">\\(l_k,l_m\\)</span> 分别为 <span\r\nclass=\"math inline\">\\(k,m\\)</span> 的二进制位数。</p>\r\n<ul>\r\n<li>若 <span class=\"math inline\">\\(l_m &lt; l_k\\)</span> 则无解。</li>\r\n<li>反之，我们可以让一个数是 <span\r\nclass=\"math inline\">\\(2^{l_k}\\)</span>，此时再构造出 <span\r\nclass=\"math inline\">\\(k - 2^{l_k}\\)</span> 即可，可以证明 <span\r\nclass=\"math inline\">\\(k - 2^{l_k} \\le m\\)</span> 因此只需两个数 <span\r\nclass=\"math inline\">\\(2^{l_k},k-2^{l_k}\\)</span>\r\n即可，剩余部位补零。</li>\r\n</ul>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//author: yuhang-ren</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;<span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x/<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x%<span class=\"number\">10</span>+<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,m,k;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,stdin);</span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">endif</span> </span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> t = <span class=\"number\">1</span>;t&lt;=T;t++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(n),<span class=\"built_in\">read</span>(k),<span class=\"built_in\">read</span>(m);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k &lt;= m)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">writesp</span>(k);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>;i&lt;=n;i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">writesp</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l_k = <span class=\"number\">0</span>,l_m = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> k_ = k;<span class=\"comment\">//k后面还需要用到，所以用k_代替k进行运算。</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;k_;k_&gt;&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                l_k++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;m;m&gt;&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                l_m++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">writeln</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l_k &gt; l_m)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">writeln</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">writesp</span>((<span class=\"number\">1</span>&lt;&lt;(l_k<span class=\"number\">-1</span>)));</span><br><span class=\"line\">            <span class=\"built_in\">writesp</span>((k - (<span class=\"number\">1</span>&lt;&lt;(l_k<span class=\"number\">-1</span>))));</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">3</span>;i&lt;=n;i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">writesp</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"p9033kdoi-04xor-sum-题解\">P9033「KDOI-04」XOR Sum 题解</h1>","more":"<h2 id=\"题目链接\">题目链接</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/P9033\">传送门</a></p>\r\n<h2 id=\"题意简述\">题意简述</h2>\r\n<p>构造一个长度为 <span class=\"math inline\">\\(n\\)</span>，值域为 <span\r\nclass=\"math inline\">\\([0,m]\\)</span> 的异或和为 <span\r\nclass=\"math inline\">\\(k\\)</span> 的序列，如果不存在则输出 <span\r\nclass=\"math inline\">\\(-1\\)</span>。</p>\r\n<h2 id=\"题目分析\">题目分析</h2>\r\n<p>首先很容易想到，当 <span class=\"math inline\">\\(k \\le m\\)</span>\r\n的时候，我们仅需要输出一个 <span class=\"math inline\">\\(k\\)</span>\r\n剩下的位置全部填 <span class=\"math inline\">\\(0\\)</span> 即可。</p>\r\n<p>而当 <span class=\"math inline\">\\(k &gt; m\\)</span>\r\n时，我们至少需要两个数，因此在此时判断 <span\r\nclass=\"math inline\">\\(n\\)</span> 是否等于 <span\r\nclass=\"math inline\">\\(1\\)</span>，若不等于 <span\r\nclass=\"math inline\">\\(1\\)</span>，根据异或不进位原理，我们还需判断 <span\r\nclass=\"math inline\">\\(k\\)</span> 和 <span\r\nclass=\"math inline\">\\(m\\)</span> 的二进制位数关系。设 <span\r\nclass=\"math inline\">\\(l_k,l_m\\)</span> 分别为 <span\r\nclass=\"math inline\">\\(k,m\\)</span> 的二进制位数。</p>\r\n<ul>\r\n<li>若 <span class=\"math inline\">\\(l_m &lt; l_k\\)</span> 则无解。</li>\r\n<li>反之，我们可以让一个数是 <span\r\nclass=\"math inline\">\\(2^{l_k}\\)</span>，此时再构造出 <span\r\nclass=\"math inline\">\\(k - 2^{l_k}\\)</span> 即可，可以证明 <span\r\nclass=\"math inline\">\\(k - 2^{l_k} \\le m\\)</span> 因此只需两个数 <span\r\nclass=\"math inline\">\\(2^{l_k},k-2^{l_k}\\)</span>\r\n即可，剩余部位补零。</li>\r\n</ul>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//author: yuhang-ren</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x&gt;<span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x/<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x%<span class=\"number\">10</span>+<span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T,n,m,k;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>,<span class=\"string\">&quot;r&quot;</span>,stdin);</span><br><span class=\"line\">        <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>,<span class=\"string\">&quot;w&quot;</span>,stdout);</span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"keyword\">endif</span> </span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> t = <span class=\"number\">1</span>;t&lt;=T;t++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(n),<span class=\"built_in\">read</span>(k),<span class=\"built_in\">read</span>(m);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k &lt;= m)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">writesp</span>(k);</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>;i&lt;=n;i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">writesp</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l_k = <span class=\"number\">0</span>,l_m = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> k_ = k;<span class=\"comment\">//k后面还需要用到，所以用k_代替k进行运算。</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;k_;k_&gt;&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                l_k++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(;m;m&gt;&gt;=<span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                l_m++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">writeln</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l_k &gt; l_m)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">writeln</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">writesp</span>((<span class=\"number\">1</span>&lt;&lt;(l_k<span class=\"number\">-1</span>)));</span><br><span class=\"line\">            <span class=\"built_in\">writesp</span>((k - (<span class=\"number\">1</span>&lt;&lt;(l_k<span class=\"number\">-1</span>))));</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">3</span>;i&lt;=n;i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">writesp</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"P9504 『MGOI』Simple Round I | C. 魔法禁林 题解","tag":null,"mathjax":true,"_content":"\n# P9504 『MGOI』Simple Round I | C. 魔法禁林 题解\n\n<!-- more -->\n\n\n赛时常数大，没过，赛后就被讨论区大佬薄纱。\n\n**Warning：这篇题解运用了拆点的思路，该思路常用于网络流，用在这题有点小题大作。如果实力不是很强并且只是想学习这题的普通最短路或 dp 可以看其他题解。**\n\n## Solution\n\n逆向考虑，从 $t$ 出发逐渐累加生命值和魔力值。\n\n根据题目，我们可以把一个点拆成 $102$ 个点，点 $u_{i}$ 表示从 $t$ 到达 $u$ 时累加了 $i$ **魔力值**，魔力值大于 $100$ 的都归到点 $u_{101}$ 上，因为这些点剩余路程都不需要多累加生命值，没有差别。那么原来的连边就变为了 $\\forall i \\in [0,100],u_{i} \\to v_{i + 1},v_{i} \\to u_{i + 1}$。\n\n\n于是这个东西顺利转化为一个有向无环图（DAG），原因是每次行走魔力值都增加，不可能回到原点。在 DAG 上跑 Dijkstra 或者拓扑排序都可以，赛事写了 Dijkstra 并因为常数大被卡了，因此建议写拓扑排序。\n\nDijkstra 复杂度 $O(m\\log\\left(m\\right))$\n\n代码有一些卡常的细节。\n\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define max_n 2040001\n#define min(AA,BB) ((AA<BB)?(AA):(BB))\n#define id(AA,BB) ((AA - 1) * 102 + BB + 1)\ninline void read(int &p)\n{\n    p = 0;\n    register int k = 1;\n    register char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\ninline void write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\ninline void writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\ninline void writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint n,m,s,t,ans;\nstruct node\n{\n    int to,nxt,val;\n}edge[max_n * 8];\nint head[max_n],tot;\nvoid add(int u,int v,int w)\n{\n    edge[++tot].to = v;\n    edge[tot].nxt = head[u];\n    edge[tot].val = w;\n    head[u] = tot;\n}\npriority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> que;\nnamespace check_pp\n{\n    vector<pair<int,int>> edge[20003];\n    int dis[20003], vis[20003];\n    void jk()\n    {\n        for (int i = 1; i <= n; ++i)\n        {\n            dis[i] = 9999999;\n        }\n        que.push({0, t});\n        dis[t] = 0;\n        while (!que.empty())\n        {\n            int u = que.top().second;\n            que.pop();\n            if(vis[u])\n            {\n                continue;\n            }\n            vis[u] = 1;\n            for (int i = 0; i < edge[u].size(); ++i)\n            {\n                int v = edge[u][i].first, w = edge[u][i].second;\n                if (dis[v] > dis[u] + w)\n                {\n                    dis[v] = dis[u] + w;\n                    {\n                        que.push({dis[v], v});\n                    }\n                }\n            }\n        }\n        return;\n    }\n}\nint dis[max_n], vis[max_n];\nvoid dijkstra()\n{\n    for (register int i = 1; i <= id(n,101); ++i)\n    {\n        dis[i] = (1LL << 20) - 1;\n    }\n    que.push({0, id(t,0)});\n    dis[id(t,0)] = 0;\n    register int u;\n    while (!que.empty())\n    {\n        u = que.top().second;\n        que.pop();\n        if (vis[u])\n        {\n            continue;\n        }\n        vis[u] = 1;\n        for (register int i = head[u]; i; i = edge[i].nxt)\n        {\n            int v = edge[i].to, w = edge[i].val;\n            if((v - 1) % 102 <= (u - 1) % 102)\n            {\n                continue;\n            }\n            if (dis[v] > dis[u] + w)\n            {\n                dis[v] = dis[u] + w;\n                que.push({dis[v], v});\n            }\n        }\n    }\n    return;\n}\nstruct Line\n{\n    int u,v,w;\n}Lines[41010];\nsigned main()\n{\n    read(n),read(m),read(s),read(t);\n    for(int i = 1,u,v,w;i <= m;i++)\n    {\n        read(u),read(v),read(w);\n        Lines[i] = {u,v,w};\n        check_pp::edge[u].push_back({v,1});\n        check_pp::edge[v].push_back({u,1});\n\n    }\n    check_pp::jk();\n\n    for(int i = 1;i <= m;++i)\n    {\n        int u = Lines[i].u,v = Lines[i].v,w = Lines[i].w;\n        if(check_pp::dis[u] > 110 || check_pp::dis[v] > 110)\n        {\n            continue;\n        }\n        for(int j = 0;j <= 100;j++) // 到 u 的时候魔力值为 j\n        {\n            add(id(u,j),id(v,j + 1),w / (j + 1));\n        }\n        for(int j = 1;j <= 101;j++)// 到 u 的时候魔力值为 j\n        {\n            add(id(v,j - 1),id(u,j),w / j);\n        }\n    }\n    ans = 999999999;\n    dijkstra();\n    for(int i = 1;i <= n;++i)\n    {\n        ans = min(ans,dis[id(i,101)]);\n    }\n    for(int i = 1;i <= 101;++i)\n    {\n        ans = min(ans,dis[id(s,i)]);\n    }\n    writeln(ans);\n    return 0;\n}\n```","source":"_posts/P9504 『MGOI』Simple Round I _ C. 魔法禁林 题解.md","raw":"---\ntitle: \"P9504 『MGOI』Simple Round I | C. 魔法禁林 题解\"\ntag: \nmathjax: true\n---\n\n# P9504 『MGOI』Simple Round I | C. 魔法禁林 题解\n\n<!-- more -->\n\n\n赛时常数大，没过，赛后就被讨论区大佬薄纱。\n\n**Warning：这篇题解运用了拆点的思路，该思路常用于网络流，用在这题有点小题大作。如果实力不是很强并且只是想学习这题的普通最短路或 dp 可以看其他题解。**\n\n## Solution\n\n逆向考虑，从 $t$ 出发逐渐累加生命值和魔力值。\n\n根据题目，我们可以把一个点拆成 $102$ 个点，点 $u_{i}$ 表示从 $t$ 到达 $u$ 时累加了 $i$ **魔力值**，魔力值大于 $100$ 的都归到点 $u_{101}$ 上，因为这些点剩余路程都不需要多累加生命值，没有差别。那么原来的连边就变为了 $\\forall i \\in [0,100],u_{i} \\to v_{i + 1},v_{i} \\to u_{i + 1}$。\n\n\n于是这个东西顺利转化为一个有向无环图（DAG），原因是每次行走魔力值都增加，不可能回到原点。在 DAG 上跑 Dijkstra 或者拓扑排序都可以，赛事写了 Dijkstra 并因为常数大被卡了，因此建议写拓扑排序。\n\nDijkstra 复杂度 $O(m\\log\\left(m\\right))$\n\n代码有一些卡常的细节。\n\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define max_n 2040001\n#define min(AA,BB) ((AA<BB)?(AA):(BB))\n#define id(AA,BB) ((AA - 1) * 102 + BB + 1)\ninline void read(int &p)\n{\n    p = 0;\n    register int k = 1;\n    register char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\ninline void write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\ninline void writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\ninline void writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint n,m,s,t,ans;\nstruct node\n{\n    int to,nxt,val;\n}edge[max_n * 8];\nint head[max_n],tot;\nvoid add(int u,int v,int w)\n{\n    edge[++tot].to = v;\n    edge[tot].nxt = head[u];\n    edge[tot].val = w;\n    head[u] = tot;\n}\npriority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> que;\nnamespace check_pp\n{\n    vector<pair<int,int>> edge[20003];\n    int dis[20003], vis[20003];\n    void jk()\n    {\n        for (int i = 1; i <= n; ++i)\n        {\n            dis[i] = 9999999;\n        }\n        que.push({0, t});\n        dis[t] = 0;\n        while (!que.empty())\n        {\n            int u = que.top().second;\n            que.pop();\n            if(vis[u])\n            {\n                continue;\n            }\n            vis[u] = 1;\n            for (int i = 0; i < edge[u].size(); ++i)\n            {\n                int v = edge[u][i].first, w = edge[u][i].second;\n                if (dis[v] > dis[u] + w)\n                {\n                    dis[v] = dis[u] + w;\n                    {\n                        que.push({dis[v], v});\n                    }\n                }\n            }\n        }\n        return;\n    }\n}\nint dis[max_n], vis[max_n];\nvoid dijkstra()\n{\n    for (register int i = 1; i <= id(n,101); ++i)\n    {\n        dis[i] = (1LL << 20) - 1;\n    }\n    que.push({0, id(t,0)});\n    dis[id(t,0)] = 0;\n    register int u;\n    while (!que.empty())\n    {\n        u = que.top().second;\n        que.pop();\n        if (vis[u])\n        {\n            continue;\n        }\n        vis[u] = 1;\n        for (register int i = head[u]; i; i = edge[i].nxt)\n        {\n            int v = edge[i].to, w = edge[i].val;\n            if((v - 1) % 102 <= (u - 1) % 102)\n            {\n                continue;\n            }\n            if (dis[v] > dis[u] + w)\n            {\n                dis[v] = dis[u] + w;\n                que.push({dis[v], v});\n            }\n        }\n    }\n    return;\n}\nstruct Line\n{\n    int u,v,w;\n}Lines[41010];\nsigned main()\n{\n    read(n),read(m),read(s),read(t);\n    for(int i = 1,u,v,w;i <= m;i++)\n    {\n        read(u),read(v),read(w);\n        Lines[i] = {u,v,w};\n        check_pp::edge[u].push_back({v,1});\n        check_pp::edge[v].push_back({u,1});\n\n    }\n    check_pp::jk();\n\n    for(int i = 1;i <= m;++i)\n    {\n        int u = Lines[i].u,v = Lines[i].v,w = Lines[i].w;\n        if(check_pp::dis[u] > 110 || check_pp::dis[v] > 110)\n        {\n            continue;\n        }\n        for(int j = 0;j <= 100;j++) // 到 u 的时候魔力值为 j\n        {\n            add(id(u,j),id(v,j + 1),w / (j + 1));\n        }\n        for(int j = 1;j <= 101;j++)// 到 u 的时候魔力值为 j\n        {\n            add(id(v,j - 1),id(u,j),w / j);\n        }\n    }\n    ans = 999999999;\n    dijkstra();\n    for(int i = 1;i <= n;++i)\n    {\n        ans = min(ans,dis[id(i,101)]);\n    }\n    for(int i = 1;i <= 101;++i)\n    {\n        ans = min(ans,dis[id(s,i)]);\n    }\n    writeln(ans);\n    return 0;\n}\n```","slug":"P9504 『MGOI』Simple Round I _ C. 魔法禁林 题解","published":1,"date":"2023-10-04T14:11:08.257Z","updated":"2023-10-04T14:11:08.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9zk002cosjaf5nx2x4q","content":"<h1 id=\"p9504-mgoisimple-round-i-c.-魔法禁林-题解\">P9504 『MGOI』Simple\r\nRound I | C. 魔法禁林 题解</h1>\r\n<span id=\"more\"></span>\r\n<p>赛时常数大，没过，赛后就被讨论区大佬薄纱。</p>\r\n<p><strong>Warning：这篇题解运用了拆点的思路，该思路常用于网络流，用在这题有点小题大作。如果实力不是很强并且只是想学习这题的普通最短路或\r\ndp 可以看其他题解。</strong></p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>逆向考虑，从 <span class=\"math inline\">\\(t\\)</span>\r\n出发逐渐累加生命值和魔力值。</p>\r\n<p>根据题目，我们可以把一个点拆成 <span\r\nclass=\"math inline\">\\(102\\)</span> 个点，点 <span\r\nclass=\"math inline\">\\(u_{i}\\)</span> 表示从 <span\r\nclass=\"math inline\">\\(t\\)</span> 到达 <span\r\nclass=\"math inline\">\\(u\\)</span> 时累加了 <span\r\nclass=\"math inline\">\\(i\\)</span> <strong>魔力值</strong>，魔力值大于\r\n<span class=\"math inline\">\\(100\\)</span> 的都归到点 <span\r\nclass=\"math inline\">\\(u_{101}\\)</span>\r\n上，因为这些点剩余路程都不需要多累加生命值，没有差别。那么原来的连边就变为了\r\n<span class=\"math inline\">\\(\\forall i \\in [0,100],u_{i} \\to v_{i +\r\n1},v_{i} \\to u_{i + 1}\\)</span>。</p>\r\n<p>于是这个东西顺利转化为一个有向无环图（DAG），原因是每次行走魔力值都增加，不可能回到原点。在\r\nDAG 上跑 Dijkstra 或者拓扑排序都可以，赛事写了 Dijkstra\r\n并因为常数大被卡了，因此建议写拓扑排序。</p>\r\n<p>Dijkstra 复杂度 <span\r\nclass=\"math inline\">\\(O(m\\log\\left(m\\right))\\)</span></p>\r\n<p>代码有一些卡常的细节。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 2040001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> min(AA,BB) ((AA&lt;BB)?(AA):(BB))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> id(AA,BB) ((AA - 1) * 102 + BB + 1)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,s,t,ans;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> to,nxt,val;</span><br><span class=\"line\">&#125;edge[max_n * <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> head[max_n],tot;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> v,<span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edge[++tot].to = v;</span><br><span class=\"line\">    edge[tot].nxt = head[u];</span><br><span class=\"line\">    edge[tot].val = w;</span><br><span class=\"line\">    head[u] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">priority_queue&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;, vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;, greater&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;&gt; que;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> check_pp</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    vector&lt;pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt;&gt; edge[<span class=\"number\">20003</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> dis[<span class=\"number\">20003</span>], vis[<span class=\"number\">20003</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">jk</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dis[i] = <span class=\"number\">9999999</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        que.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>, t&#125;);</span><br><span class=\"line\">        dis[t] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!que.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> u = que.<span class=\"built_in\">top</span>().second;</span><br><span class=\"line\">            que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(vis[u])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; edge[u].<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> v = edge[u][i].first, w = edge[u][i].second;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dis[v] &gt; dis[u] + w)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dis[v] = dis[u] + w;</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(&#123;dis[v], v&#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> dis[max_n], vis[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"built_in\">id</span>(n,<span class=\"number\">101</span>); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dis[i] = (<span class=\"number\">1LL</span> &lt;&lt; <span class=\"number\">20</span>) - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    que.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>, <span class=\"built_in\">id</span>(t,<span class=\"number\">0</span>)&#125;);</span><br><span class=\"line\">    dis[<span class=\"built_in\">id</span>(t,<span class=\"number\">0</span>)] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"type\">int</span> u;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!que.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        u = que.<span class=\"built_in\">top</span>().second;</span><br><span class=\"line\">        que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vis[u])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"type\">int</span> i = head[u]; i; i = edge[i].nxt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> v = edge[i].to, w = edge[i].val;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((v - <span class=\"number\">1</span>) % <span class=\"number\">102</span> &lt;= (u - <span class=\"number\">1</span>) % <span class=\"number\">102</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dis[v] &gt; dis[u] + w)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dis[v] = dis[u] + w;</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(&#123;dis[v], v&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Line</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> u,v,w;</span><br><span class=\"line\">&#125;Lines[<span class=\"number\">41010</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n),<span class=\"built_in\">read</span>(m),<span class=\"built_in\">read</span>(s),<span class=\"built_in\">read</span>(t);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>,u,v,w;i &lt;= m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(u),<span class=\"built_in\">read</span>(v),<span class=\"built_in\">read</span>(w);</span><br><span class=\"line\">        Lines[i] = &#123;u,v,w&#125;;</span><br><span class=\"line\">        check_pp::edge[u].<span class=\"built_in\">push_back</span>(&#123;v,<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">        check_pp::edge[v].<span class=\"built_in\">push_back</span>(&#123;u,<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    check_pp::<span class=\"built_in\">jk</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u = Lines[i].u,v = Lines[i].v,w = Lines[i].w;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(check_pp::dis[u] &gt; <span class=\"number\">110</span> || check_pp::dis[v] &gt; <span class=\"number\">110</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>;j &lt;= <span class=\"number\">100</span>;j++) <span class=\"comment\">// 到 u 的时候魔力值为 j</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(<span class=\"built_in\">id</span>(u,j),<span class=\"built_in\">id</span>(v,j + <span class=\"number\">1</span>),w / (j + <span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>;j &lt;= <span class=\"number\">101</span>;j++)<span class=\"comment\">// 到 u 的时候魔力值为 j</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(<span class=\"built_in\">id</span>(v,j - <span class=\"number\">1</span>),<span class=\"built_in\">id</span>(u,j),w / j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans = <span class=\"number\">999999999</span>;</span><br><span class=\"line\">    <span class=\"built_in\">dijkstra</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans = <span class=\"built_in\">min</span>(ans,dis[<span class=\"built_in\">id</span>(i,<span class=\"number\">101</span>)]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= <span class=\"number\">101</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans = <span class=\"built_in\">min</span>(ans,dis[<span class=\"built_in\">id</span>(s,i)]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"p9504-mgoisimple-round-i-c.-魔法禁林-题解\">P9504 『MGOI』Simple\r\nRound I | C. 魔法禁林 题解</h1>","more":"<p>赛时常数大，没过，赛后就被讨论区大佬薄纱。</p>\r\n<p><strong>Warning：这篇题解运用了拆点的思路，该思路常用于网络流，用在这题有点小题大作。如果实力不是很强并且只是想学习这题的普通最短路或\r\ndp 可以看其他题解。</strong></p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>逆向考虑，从 <span class=\"math inline\">\\(t\\)</span>\r\n出发逐渐累加生命值和魔力值。</p>\r\n<p>根据题目，我们可以把一个点拆成 <span\r\nclass=\"math inline\">\\(102\\)</span> 个点，点 <span\r\nclass=\"math inline\">\\(u_{i}\\)</span> 表示从 <span\r\nclass=\"math inline\">\\(t\\)</span> 到达 <span\r\nclass=\"math inline\">\\(u\\)</span> 时累加了 <span\r\nclass=\"math inline\">\\(i\\)</span> <strong>魔力值</strong>，魔力值大于\r\n<span class=\"math inline\">\\(100\\)</span> 的都归到点 <span\r\nclass=\"math inline\">\\(u_{101}\\)</span>\r\n上，因为这些点剩余路程都不需要多累加生命值，没有差别。那么原来的连边就变为了\r\n<span class=\"math inline\">\\(\\forall i \\in [0,100],u_{i} \\to v_{i +\r\n1},v_{i} \\to u_{i + 1}\\)</span>。</p>\r\n<p>于是这个东西顺利转化为一个有向无环图（DAG），原因是每次行走魔力值都增加，不可能回到原点。在\r\nDAG 上跑 Dijkstra 或者拓扑排序都可以，赛事写了 Dijkstra\r\n并因为常数大被卡了，因此建议写拓扑排序。</p>\r\n<p>Dijkstra 复杂度 <span\r\nclass=\"math inline\">\\(O(m\\log\\left(m\\right))\\)</span></p>\r\n<p>代码有一些卡常的细节。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 2040001</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> min(AA,BB) ((AA&lt;BB)?(AA):(BB))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> id(AA,BB) ((AA - 1) * 102 + BB + 1)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n,m,s,t,ans;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> to,nxt,val;</span><br><span class=\"line\">&#125;edge[max_n * <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> head[max_n],tot;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> u,<span class=\"type\">int</span> v,<span class=\"type\">int</span> w)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    edge[++tot].to = v;</span><br><span class=\"line\">    edge[tot].nxt = head[u];</span><br><span class=\"line\">    edge[tot].val = w;</span><br><span class=\"line\">    head[u] = tot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">priority_queue&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;, vector&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;, greater&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;&gt;&gt; que;</span><br><span class=\"line\"><span class=\"keyword\">namespace</span> check_pp</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    vector&lt;pair&lt;<span class=\"type\">int</span>,<span class=\"type\">int</span>&gt;&gt; edge[<span class=\"number\">20003</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> dis[<span class=\"number\">20003</span>], vis[<span class=\"number\">20003</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">jk</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            dis[i] = <span class=\"number\">9999999</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        que.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>, t&#125;);</span><br><span class=\"line\">        dis[t] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!que.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> u = que.<span class=\"built_in\">top</span>().second;</span><br><span class=\"line\">            que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(vis[u])</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; edge[u].<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"type\">int</span> v = edge[u][i].first, w = edge[u][i].second;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dis[v] &gt; dis[u] + w)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dis[v] = dis[u] + w;</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        que.<span class=\"built_in\">push</span>(&#123;dis[v], v&#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> dis[max_n], vis[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dijkstra</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"built_in\">id</span>(n,<span class=\"number\">101</span>); ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        dis[i] = (<span class=\"number\">1LL</span> &lt;&lt; <span class=\"number\">20</span>) - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    que.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>, <span class=\"built_in\">id</span>(t,<span class=\"number\">0</span>)&#125;);</span><br><span class=\"line\">    dis[<span class=\"built_in\">id</span>(t,<span class=\"number\">0</span>)] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">register</span> <span class=\"type\">int</span> u;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!que.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        u = que.<span class=\"built_in\">top</span>().second;</span><br><span class=\"line\">        que.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vis[u])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        vis[u] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">register</span> <span class=\"type\">int</span> i = head[u]; i; i = edge[i].nxt)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> v = edge[i].to, w = edge[i].val;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((v - <span class=\"number\">1</span>) % <span class=\"number\">102</span> &lt;= (u - <span class=\"number\">1</span>) % <span class=\"number\">102</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dis[v] &gt; dis[u] + w)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dis[v] = dis[u] + w;</span><br><span class=\"line\">                que.<span class=\"built_in\">push</span>(&#123;dis[v], v&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Line</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> u,v,w;</span><br><span class=\"line\">&#125;Lines[<span class=\"number\">41010</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n),<span class=\"built_in\">read</span>(m),<span class=\"built_in\">read</span>(s),<span class=\"built_in\">read</span>(t);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>,u,v,w;i &lt;= m;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(u),<span class=\"built_in\">read</span>(v),<span class=\"built_in\">read</span>(w);</span><br><span class=\"line\">        Lines[i] = &#123;u,v,w&#125;;</span><br><span class=\"line\">        check_pp::edge[u].<span class=\"built_in\">push_back</span>(&#123;v,<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">        check_pp::edge[v].<span class=\"built_in\">push_back</span>(&#123;u,<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    check_pp::<span class=\"built_in\">jk</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= m;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u = Lines[i].u,v = Lines[i].v,w = Lines[i].w;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(check_pp::dis[u] &gt; <span class=\"number\">110</span> || check_pp::dis[v] &gt; <span class=\"number\">110</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>;j &lt;= <span class=\"number\">100</span>;j++) <span class=\"comment\">// 到 u 的时候魔力值为 j</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(<span class=\"built_in\">id</span>(u,j),<span class=\"built_in\">id</span>(v,j + <span class=\"number\">1</span>),w / (j + <span class=\"number\">1</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>;j &lt;= <span class=\"number\">101</span>;j++)<span class=\"comment\">// 到 u 的时候魔力值为 j</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">add</span>(<span class=\"built_in\">id</span>(v,j - <span class=\"number\">1</span>),<span class=\"built_in\">id</span>(u,j),w / j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans = <span class=\"number\">999999999</span>;</span><br><span class=\"line\">    <span class=\"built_in\">dijkstra</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= n;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans = <span class=\"built_in\">min</span>(ans,dis[<span class=\"built_in\">id</span>(i,<span class=\"number\">101</span>)]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= <span class=\"number\">101</span>;++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ans = <span class=\"built_in\">min</span>(ans,dis[<span class=\"built_in\">id</span>(s,i)]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"P9538 「AWOI Round 2 A」最大和 题解","tag":null,"mathjax":true,"_content":"\n# P9538 「AWOI Round 2 A」最大和 题解\n\n<!-- more -->\n\n\n\n## Solution\n\n很简单的一道贪心题，由于是从低位向高位操作，后面的操作必然不会影响前面的操作，分类讨论一下。\n\n- 当前位为 $0$，需要减 $1$，该位为 $9$，前一位减 $1$。\n\n- 当前为 $1 \\sim 8$，直接加 $1$。\n\n- 当前为 $9$，不操作。\n\n注意在操作时 $n$ 的位数可能发生变化。\n\n\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint T,n;\nvoid solution()\n{\n    read(n);\n    if(n == 0)\n    {\n        writeln(1);\n        return ;\n    }\n    int ans = 0;\n    while(n)\n    {\n        if(n % 10 == 9)\n        {\n            ans += 9;\n        }\n        else if(n % 10 == 0)\n        {\n            n--;\n            ans += 9;\n        }\n        else\n        {\n            n++;\n            ans += n % 10;\n        }\n        n /= 10;\n    }\n    writeln(ans);\n}\nsigned main()\n{\n    read(T);\n    while(T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```","source":"_posts/P9538 「AWOI Round 2 A」最大和 题解.md","raw":"---\ntitle: \"P9538 「AWOI Round 2 A」最大和 题解\"\ntag: \nmathjax: true\n---\n\n# P9538 「AWOI Round 2 A」最大和 题解\n\n<!-- more -->\n\n\n\n## Solution\n\n很简单的一道贪心题，由于是从低位向高位操作，后面的操作必然不会影响前面的操作，分类讨论一下。\n\n- 当前位为 $0$，需要减 $1$，该位为 $9$，前一位减 $1$。\n\n- 当前为 $1 \\sim 8$，直接加 $1$。\n\n- 当前为 $9$，不操作。\n\n注意在操作时 $n$ 的位数可能发生变化。\n\n\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    puts(\"\");\n}\nint T,n;\nvoid solution()\n{\n    read(n);\n    if(n == 0)\n    {\n        writeln(1);\n        return ;\n    }\n    int ans = 0;\n    while(n)\n    {\n        if(n % 10 == 9)\n        {\n            ans += 9;\n        }\n        else if(n % 10 == 0)\n        {\n            n--;\n            ans += 9;\n        }\n        else\n        {\n            n++;\n            ans += n % 10;\n        }\n        n /= 10;\n    }\n    writeln(ans);\n}\nsigned main()\n{\n    read(T);\n    while(T--)\n    {\n        solution();\n    }\n    return 0;\n}\n```","slug":"P9538 「AWOI Round 2 A」最大和 题解","published":1,"date":"2023-10-04T14:11:08.258Z","updated":"2023-10-04T14:11:08.258Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9zl002dosja7qbq1r05","content":"<h1 id=\"p9538-awoi-round-2-a最大和-题解\">P9538 「AWOI Round 2 A」最大和\r\n题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>很简单的一道贪心题，由于是从低位向高位操作，后面的操作必然不会影响前面的操作，分类讨论一下。</p>\r\n<ul>\r\n<li><p>当前位为 <span class=\"math inline\">\\(0\\)</span>，需要减 <span\r\nclass=\"math inline\">\\(1\\)</span>，该位为 <span\r\nclass=\"math inline\">\\(9\\)</span>，前一位减 <span\r\nclass=\"math inline\">\\(1\\)</span>。</p></li>\r\n<li><p>当前为 <span class=\"math inline\">\\(1 \\sim 8\\)</span>，直接加\r\n<span class=\"math inline\">\\(1\\)</span>。</p></li>\r\n<li><p>当前为 <span class=\"math inline\">\\(9\\)</span>，不操作。</p></li>\r\n</ul>\r\n<p>注意在操作时 <span class=\"math inline\">\\(n\\)</span>\r\n的位数可能发生变化。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T,n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">writeln</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n % <span class=\"number\">10</span> == <span class=\"number\">9</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans += <span class=\"number\">9</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n % <span class=\"number\">10</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            n--;</span><br><span class=\"line\">            ans += <span class=\"number\">9</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            n++;</span><br><span class=\"line\">            ans += n % <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"p9538-awoi-round-2-a最大和-题解\">P9538 「AWOI Round 2 A」最大和\r\n题解</h1>","more":"<h2 id=\"solution\">Solution</h2>\r\n<p>很简单的一道贪心题，由于是从低位向高位操作，后面的操作必然不会影响前面的操作，分类讨论一下。</p>\r\n<ul>\r\n<li><p>当前位为 <span class=\"math inline\">\\(0\\)</span>，需要减 <span\r\nclass=\"math inline\">\\(1\\)</span>，该位为 <span\r\nclass=\"math inline\">\\(9\\)</span>，前一位减 <span\r\nclass=\"math inline\">\\(1\\)</span>。</p></li>\r\n<li><p>当前为 <span class=\"math inline\">\\(1 \\sim 8\\)</span>，直接加\r\n<span class=\"math inline\">\\(1\\)</span>。</p></li>\r\n<li><p>当前为 <span class=\"math inline\">\\(9\\)</span>，不操作。</p></li>\r\n</ul>\r\n<p>注意在操作时 <span class=\"math inline\">\\(n\\)</span>\r\n的位数可能发生变化。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T,n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solution</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">writeln</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n % <span class=\"number\">10</span> == <span class=\"number\">9</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans += <span class=\"number\">9</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n % <span class=\"number\">10</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            n--;</span><br><span class=\"line\">            ans += <span class=\"number\">9</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            n++;</span><br><span class=\"line\">            ans += n % <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        n /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">solution</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"[ABC301C] AtCoder Cards 题解","tag":null,"mathjax":true,"_content":"\n# [ABC301C] AtCoder Cards 题解\n\n<!-- more -->\n\n## Links\n\n\n[Luogu](https://www.luogu.com.cn/problem/AT_abc301_c)\n\n[AtCoder](https://atcoder.jp/contests/abc301/tasks/abc301_c)\n\n## Description\n\n给定两个等长的字符串，只包含小写字母和 `@` 字符。\n\n判断能否通过重新排列某一字符串并将 `@` 换为任意 `a`，`t`，`c`，`o`，`d`，`e`，`r` 中的字符使得两个字符串变得完全相同。\n\n## Solution\n\n统计两个字符串中各个字符的数量，若数量不等的不是 `a`，`t`，`c`，`o`，`d`，`e`，`r` 中的字符则不能完成。否则判断 `@` 字符是否够用即可，若数量少于差异数量则无法完成。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 210101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nchar s1[max_n], s2[max_n];\nint cnt1[max_n], cnt2[max_n];\nmap<char, int> mp;\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    scanf(\"%s\", s1 + 1);\n    scanf(\"%s\", s2 + 1);\n    mp['a'] = 1;\n    mp['t'] = 1;\n    mp['c'] = 1;\n    mp['o'] = 1;\n    mp['d'] = 1;\n    mp['e'] = 1;\n    mp['r'] = 1;\n    int n = strlen(s1 + 1);\n    for (int i = 1; i <= n; i++)\n    {\n        if (s1[i] == '@')\n        {\n            ++cnt1[0];\n        }\n        if (s2[i] == '@')\n        {\n            ++cnt1[0];\n        }\n        cnt1[s2[i]]--;\n        cnt1[s1[i]]++;\n    }\n    for (char c = 'a'; c <= 'z'; c++)\n    {\n        if (mp[c])\n        {\n            cnt1[0] -= abs(cnt1[c]);\n        }\n        else if (cnt1[c] != 0)\n        {\n            puts(\"No\");\n            return 0;\n        }\n    }\n    if (cnt1[0] < 0)\n    {\n        puts(\"No\");\n    }\n    else\n    {\n        puts(\"Yes\");\n    }\n    return 0;\n}\n```\n","source":"_posts/[ABC301C] AtCoder Cards 题解.md","raw":"---\ntitle: \"[ABC301C] AtCoder Cards 题解\"\ntag: \nmathjax: true\n---\n\n# [ABC301C] AtCoder Cards 题解\n\n<!-- more -->\n\n## Links\n\n\n[Luogu](https://www.luogu.com.cn/problem/AT_abc301_c)\n\n[AtCoder](https://atcoder.jp/contests/abc301/tasks/abc301_c)\n\n## Description\n\n给定两个等长的字符串，只包含小写字母和 `@` 字符。\n\n判断能否通过重新排列某一字符串并将 `@` 换为任意 `a`，`t`，`c`，`o`，`d`，`e`，`r` 中的字符使得两个字符串变得完全相同。\n\n## Solution\n\n统计两个字符串中各个字符的数量，若数量不等的不是 `a`，`t`，`c`，`o`，`d`，`e`，`r` 中的字符则不能完成。否则判断 `@` 字符是否够用即可，若数量少于差异数量则无法完成。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 210101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nchar s1[max_n], s2[max_n];\nint cnt1[max_n], cnt2[max_n];\nmap<char, int> mp;\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    scanf(\"%s\", s1 + 1);\n    scanf(\"%s\", s2 + 1);\n    mp['a'] = 1;\n    mp['t'] = 1;\n    mp['c'] = 1;\n    mp['o'] = 1;\n    mp['d'] = 1;\n    mp['e'] = 1;\n    mp['r'] = 1;\n    int n = strlen(s1 + 1);\n    for (int i = 1; i <= n; i++)\n    {\n        if (s1[i] == '@')\n        {\n            ++cnt1[0];\n        }\n        if (s2[i] == '@')\n        {\n            ++cnt1[0];\n        }\n        cnt1[s2[i]]--;\n        cnt1[s1[i]]++;\n    }\n    for (char c = 'a'; c <= 'z'; c++)\n    {\n        if (mp[c])\n        {\n            cnt1[0] -= abs(cnt1[c]);\n        }\n        else if (cnt1[c] != 0)\n        {\n            puts(\"No\");\n            return 0;\n        }\n    }\n    if (cnt1[0] < 0)\n    {\n        puts(\"No\");\n    }\n    else\n    {\n        puts(\"Yes\");\n    }\n    return 0;\n}\n```\n","slug":"[ABC301C] AtCoder Cards 题解","published":1,"date":"2023-10-04T14:11:08.258Z","updated":"2023-10-04T14:21:35.664Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9zm002eosjafoizf7wb","content":"<h1 id=\"abc301c-atcoder-cards-题解\">[ABC301C] AtCoder Cards 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_abc301_c\">Luogu</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/abc301/tasks/abc301_c\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定两个等长的字符串，只包含小写字母和 <code>@</code> 字符。</p>\r\n<p>判断能否通过重新排列某一字符串并将 <code>@</code> 换为任意\r\n<code>a</code>，<code>t</code>，<code>c</code>，<code>o</code>，<code>d</code>，<code>e</code>，<code>r</code>\r\n中的字符使得两个字符串变得完全相同。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>统计两个字符串中各个字符的数量，若数量不等的不是\r\n<code>a</code>，<code>t</code>，<code>c</code>，<code>o</code>，<code>d</code>，<code>e</code>，<code>r</code>\r\n中的字符则不能完成。否则判断 <code>@</code>\r\n字符是否够用即可，若数量少于差异数量则无法完成。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 210101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">char</span> s1[max_n], s2[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> cnt1[max_n], cnt2[max_n];</span><br><span class=\"line\">map&lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; mp;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, s1 + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, s2 + <span class=\"number\">1</span>);</span><br><span class=\"line\">    mp[<span class=\"string\">&#x27;a&#x27;</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    mp[<span class=\"string\">&#x27;t&#x27;</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    mp[<span class=\"string\">&#x27;c&#x27;</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    mp[<span class=\"string\">&#x27;o&#x27;</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    mp[<span class=\"string\">&#x27;d&#x27;</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    mp[<span class=\"string\">&#x27;e&#x27;</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    mp[<span class=\"string\">&#x27;r&#x27;</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"built_in\">strlen</span>(s1 + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s1[i] == <span class=\"string\">&#x27;@&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++cnt1[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s2[i] == <span class=\"string\">&#x27;@&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++cnt1[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cnt1[s2[i]]--;</span><br><span class=\"line\">        cnt1[s1[i]]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c = <span class=\"string\">&#x27;a&#x27;</span>; c &lt;= <span class=\"string\">&#x27;z&#x27;</span>; c++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mp[c])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cnt1[<span class=\"number\">0</span>] -= <span class=\"built_in\">abs</span>(cnt1[c]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cnt1[c] != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cnt1[<span class=\"number\">0</span>] &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"abc301c-atcoder-cards-题解\">[ABC301C] AtCoder Cards 题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_abc301_c\">Luogu</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/abc301/tasks/abc301_c\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定两个等长的字符串，只包含小写字母和 <code>@</code> 字符。</p>\r\n<p>判断能否通过重新排列某一字符串并将 <code>@</code> 换为任意\r\n<code>a</code>，<code>t</code>，<code>c</code>，<code>o</code>，<code>d</code>，<code>e</code>，<code>r</code>\r\n中的字符使得两个字符串变得完全相同。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>统计两个字符串中各个字符的数量，若数量不等的不是\r\n<code>a</code>，<code>t</code>，<code>c</code>，<code>o</code>，<code>d</code>，<code>e</code>，<code>r</code>\r\n中的字符则不能完成。否则判断 <code>@</code>\r\n字符是否够用即可，若数量少于差异数量则无法完成。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 210101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">char</span> s1[max_n], s2[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> cnt1[max_n], cnt2[max_n];</span><br><span class=\"line\">map&lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; mp;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, s1 + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, s2 + <span class=\"number\">1</span>);</span><br><span class=\"line\">    mp[<span class=\"string\">&#x27;a&#x27;</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    mp[<span class=\"string\">&#x27;t&#x27;</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    mp[<span class=\"string\">&#x27;c&#x27;</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    mp[<span class=\"string\">&#x27;o&#x27;</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    mp[<span class=\"string\">&#x27;d&#x27;</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    mp[<span class=\"string\">&#x27;e&#x27;</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    mp[<span class=\"string\">&#x27;r&#x27;</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = <span class=\"built_in\">strlen</span>(s1 + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s1[i] == <span class=\"string\">&#x27;@&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++cnt1[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s2[i] == <span class=\"string\">&#x27;@&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ++cnt1[<span class=\"number\">0</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cnt1[s2[i]]--;</span><br><span class=\"line\">        cnt1[s1[i]]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c = <span class=\"string\">&#x27;a&#x27;</span>; c &lt;= <span class=\"string\">&#x27;z&#x27;</span>; c++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mp[c])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cnt1[<span class=\"number\">0</span>] -= <span class=\"built_in\">abs</span>(cnt1[c]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cnt1[c] != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (cnt1[<span class=\"number\">0</span>] &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"[ABC301D] Bitmask 题解","tag":null,"mathjax":true,"_content":"\n# [ABC301D] Bitmask 题解\n\n<!-- more -->\n\n\n## Links\n\n[Luogu](https://www.luogu.com.cn/problem/AT_abc301_d)\n\n[AtCoder](https://atcoder.jp/contests/abc301/tasks/abc301_d)\n\n## Description\n\n给你一个包含 `?` 的 01 串，将每个 `?` 替换为 `0` 或 `1`。找到对应的二进制数小于 $n$ 的最大值或判断无解。\n\n## Solution\n\n首先将所有 `?` 视为 `0`，此时计算出的值若大于 $n$ 则无解，否则从高位向低位枚举，判断是否能换为 `1`。根据倍增 LCA 和贪心的思想，此时一定可得到最优解策略。理由：若某高位能切换为 `1`，后面还有某低位在不考虑该高位时能切换为 `1`，分两种情况讨论。\n\n- 若可同时替换为 `1`，第一个一定选。\n- 如只能选择一个，则选第一个对答案贡献更大。\n\n综上：策略为从高位开始，能换为 `1` 则换为 `1`。注意开 `long long`。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint n;\nchar s[70];\nint now_cnt = 0;\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    scanf(\"%s\", s + 1);\n    int l = strlen(s + 1);\n    cin >> n;\n    for (int i = 1; i <= l; i++)\n    {\n        now_cnt <<= 1LL;\n        if (s[i] == '1')\n        {\n            now_cnt++;\n        }\n    }\n    if (now_cnt > n)\n    {\n        writeln(-1);\n        return 0;\n    }\n    for (int i = 1; i <= l; i++)\n    {\n        if (s[i] == '?')\n        {\n            if (now_cnt + (1LL << (l - i)) <= n)\n            {\n                now_cnt += (1LL << (l - i));\n            }\n        }\n    }\n    writeln(now_cnt);\n    return 0;\n}\n```\n","source":"_posts/[ABC301D] Bitmask 题解.md","raw":"---\ntitle: \"[ABC301D] Bitmask 题解\"\ntag: \nmathjax: true\n---\n\n# [ABC301D] Bitmask 题解\n\n<!-- more -->\n\n\n## Links\n\n[Luogu](https://www.luogu.com.cn/problem/AT_abc301_d)\n\n[AtCoder](https://atcoder.jp/contests/abc301/tasks/abc301_d)\n\n## Description\n\n给你一个包含 `?` 的 01 串，将每个 `?` 替换为 `0` 或 `1`。找到对应的二进制数小于 $n$ 的最大值或判断无解。\n\n## Solution\n\n首先将所有 `?` 视为 `0`，此时计算出的值若大于 $n$ 则无解，否则从高位向低位枚举，判断是否能换为 `1`。根据倍增 LCA 和贪心的思想，此时一定可得到最优解策略。理由：若某高位能切换为 `1`，后面还有某低位在不考虑该高位时能切换为 `1`，分两种情况讨论。\n\n- 若可同时替换为 `1`，第一个一定选。\n- 如只能选择一个，则选第一个对答案贡献更大。\n\n综上：策略为从高位开始，能换为 `1` 则换为 `1`。注意开 `long long`。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint n;\nchar s[70];\nint now_cnt = 0;\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    scanf(\"%s\", s + 1);\n    int l = strlen(s + 1);\n    cin >> n;\n    for (int i = 1; i <= l; i++)\n    {\n        now_cnt <<= 1LL;\n        if (s[i] == '1')\n        {\n            now_cnt++;\n        }\n    }\n    if (now_cnt > n)\n    {\n        writeln(-1);\n        return 0;\n    }\n    for (int i = 1; i <= l; i++)\n    {\n        if (s[i] == '?')\n        {\n            if (now_cnt + (1LL << (l - i)) <= n)\n            {\n                now_cnt += (1LL << (l - i));\n            }\n        }\n    }\n    writeln(now_cnt);\n    return 0;\n}\n```\n","slug":"[ABC301D] Bitmask 题解","published":1,"date":"2023-10-04T14:11:08.258Z","updated":"2023-10-04T14:11:08.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9zn002fosja2281aw0t","content":"<h1 id=\"abc301d-bitmask-题解\">[ABC301D] Bitmask 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_abc301_d\">Luogu</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/abc301/tasks/abc301_d\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给你一个包含 <code>?</code> 的 01 串，将每个 <code>?</code> 替换为\r\n<code>0</code> 或 <code>1</code>。找到对应的二进制数小于 <span\r\nclass=\"math inline\">\\(n\\)</span> 的最大值或判断无解。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>首先将所有 <code>?</code> 视为 <code>0</code>，此时计算出的值若大于\r\n<span class=\"math inline\">\\(n\\)</span>\r\n则无解，否则从高位向低位枚举，判断是否能换为 <code>1</code>。根据倍增\r\nLCA 和贪心的思想，此时一定可得到最优解策略。理由：若某高位能切换为\r\n<code>1</code>，后面还有某低位在不考虑该高位时能切换为\r\n<code>1</code>，分两种情况讨论。</p>\r\n<ul>\r\n<li>若可同时替换为 <code>1</code>，第一个一定选。</li>\r\n<li>如只能选择一个，则选第一个对答案贡献更大。</li>\r\n</ul>\r\n<p>综上：策略为从高位开始，能换为 <code>1</code> 则换为\r\n<code>1</code>。注意开 <code>long long</code>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">char</span> s[<span class=\"number\">70</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> now_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, s + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> l = <span class=\"built_in\">strlen</span>(s + <span class=\"number\">1</span>);</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= l; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        now_cnt &lt;&lt;= <span class=\"number\">1LL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            now_cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (now_cnt &gt; n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">writeln</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= l; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;?&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (now_cnt + (<span class=\"number\">1LL</span> &lt;&lt; (l - i)) &lt;= n)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                now_cnt += (<span class=\"number\">1LL</span> &lt;&lt; (l - i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(now_cnt);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"abc301d-bitmask-题解\">[ABC301D] Bitmask 题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_abc301_d\">Luogu</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/abc301/tasks/abc301_d\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给你一个包含 <code>?</code> 的 01 串，将每个 <code>?</code> 替换为\r\n<code>0</code> 或 <code>1</code>。找到对应的二进制数小于 <span\r\nclass=\"math inline\">\\(n\\)</span> 的最大值或判断无解。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>首先将所有 <code>?</code> 视为 <code>0</code>，此时计算出的值若大于\r\n<span class=\"math inline\">\\(n\\)</span>\r\n则无解，否则从高位向低位枚举，判断是否能换为 <code>1</code>。根据倍增\r\nLCA 和贪心的思想，此时一定可得到最优解策略。理由：若某高位能切换为\r\n<code>1</code>，后面还有某低位在不考虑该高位时能切换为\r\n<code>1</code>，分两种情况讨论。</p>\r\n<ul>\r\n<li>若可同时替换为 <code>1</code>，第一个一定选。</li>\r\n<li>如只能选择一个，则选第一个对答案贡献更大。</li>\r\n</ul>\r\n<p>综上：策略为从高位开始，能换为 <code>1</code> 则换为\r\n<code>1</code>。注意开 <code>long long</code>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">char</span> s[<span class=\"number\">70</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> now_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, s + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> l = <span class=\"built_in\">strlen</span>(s + <span class=\"number\">1</span>);</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= l; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        now_cnt &lt;&lt;= <span class=\"number\">1LL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            now_cnt++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (now_cnt &gt; n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">writeln</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= l; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;?&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (now_cnt + (<span class=\"number\">1LL</span> &lt;&lt; (l - i)) &lt;= n)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                now_cnt += (<span class=\"number\">1LL</span> &lt;&lt; (l - i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(now_cnt);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"[ARC133E] Cyclic Medians 题解","tag":null,"mathjax":true,"_content":"\n# [ARC133E] Cyclic Medians 题解\n\n<!-- more -->\n\n\n## Links\n\n[Luogu](https://www.luogu.com.cn/problem/AT_arc133_e)\n\n[AtCoder](https://atcoder.jp/contests/arc133/tasks/arc133_e)\n\n## Description\n\n给你四个整数 $N,M,V,A$。\n\n选择两个序列 $x$ 和 $y$，其中 $x$ 的长度为 $n$，$y$ 的长度为 $m$。两个序列中数的值域均为 $[1,V]$。\n\n定义变量 $a$，初始值为 $A$。\n\n依次对所有 $i \\in [0, N \\times M - 1]$，将 $a$ 替换为 $x_{\\left ( i \\bmod n \\right ) + 1},a,x_{\\left ( i \\bmod m \\right ) + 1}$ 的 **中位数**。\n\n你需要求出对于所有满足条件的序列 $x,y$，经过 $N \\times M$ 次操作之后 $a$ 的值之和，答案对 $998\\,244\\,353$ 取模。\n\n\n数据范围：\n\n$1 \\leq N,M \\leq 2 \\times 10 ^ {5}$，$1 \\leq A \\leq 2 \\times 10^{5}$。\n\n## Solution\n\n\n在讲解这道题目之前先**引理：**给定一个长度为 $n$ 的序列 $A$，设最大值为 $mx$，序列中元素和为 $sum$。则有 $\\sum_{i = 0}^{mx - 1}{\\sum_{j = 1}^{n} \\left [A_{j} > i \\right]} = sum$。\n\n引理的证明可以自己画一个该序列的柱状图，用一条线从小到大扫描。\n\n接下来考虑这道题，显然对于所有序列，最终的 $a \\in [1,V]$。因此我们可以按照上面的方法枚举来统计所有最后的 $a$ 的和。\n\n设最终大于 $k$ 的 $a$ 的数量为 $cnt_{k}$，则答案为 $ \\sum_{i = 0}^{V - 1} cnt_{i}$。\n\n接下来我们只需要考虑如何求出所有 $cnt_{i}$ 即可。可以对两个序列进行 0-1 重写（当然，我们并不需要真的重写这个数组，只是用于思考），若当前计算的为 $cnt_k$，大于等于 $k$ 的标为 $1$，否则标为 $0$。\n\n可以发现只要出现了一次 $\\left (k,0,0\\right)$ 或 $\\left(k,1,1\\right)$，最终的答案就与 $k$ 无关。且由于相反性，$k = k_{1}$ 时最后一次操作时两个序列所选的为 $\\left (0,0\\right)$ 和 $k = V - k_{1}$ 时最后一次操作时两个序列所选的为 $\\left (1,1\\right)$ 的个数是相同的。因此计算出序列数除二即为这部分的答案。\n\n接下来考虑没有出现从两个序列中选取相同数的情况，此时最终答案全为 $A$（即初始值），也即该部分对 $k < A$ 的 $cnt_{k}$ 有贡献。\n\n手模一下在两个序列中取数的过程，令 $G = \\gcd(n,m)$，则对于 $x_{(i + t_{1} \\cdot G)}$（$1 \\leq i < G,0\\leq t_{1} < \\frac{n}{G}$）只会取到 $y_{(i + t_{2} \\cdot G)}$（$1 \\leq i < G,0\\leq t_{2} < \\frac{m}{G}$）。因此，满足的条件为 $\\forall i \\in [1,G)$：\n\n- $x_{i} = x_{(i + t_{1} \\cdot G)}$（$0\\leq t_{1} < \\frac{n}{G}$）。\n\n- $y_{i} = y_{(i + t_{2} \\cdot G)}$（$0\\leq t_{2} < \\frac{m}{G}$）。\n\n- $x_{i} \\neq y_{i}$。\n\n分别计算 $x_{i}$ 转换后为 $0$ 和转换后为 $1$ 的数量即可。方案数为 $k^{\\frac{m}{g}}(V - k)^{\\frac{n}{g}} + k^{\\frac{n}{g}}(V - k)^{\\frac{m}{g}} $。利用快速幂求解即可。除了这些数量，剩余的就是出现相同的数量，注意根据上面的推导需要除二，本题有取模，要求 $2$ 的逆元。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define mo 998244353\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint n, m, V, A, ans, gcd__;\nint ksm(int a, int b)\n{\n    int res = 1;\n    for (; b; b >>= 1, a = (a * a) % mo)\n    {\n        if (b & 1)\n        {\n            res = (res * a) % mo;\n        }\n    }\n    return res;\n}\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(n), read(m), read(V), read(A);\n    ans = ksm(V, n + m), gcd__ = __gcd(n, m);\n    for (int i = 1; i < V; i++)\n    {\n        int now = ksm((ksm(i, n / gcd__) * ksm(V - i, m / gcd__) % mo + ksm(V - i, n / gcd__) * ksm(i, m / gcd__) % mo) % mo, gcd__);\n        if (A > i) // 满足初始值 > i 的条件才有贡献。\n        {\n            ans = (ans + now) % mo;\n        }\n        int all = ksm(V, n + m);\n        now = (all - now + mo) % mo;\n        ans = (ans + now * ksm(2, mo - 2) % mo) % mo;\n    }\n    writeln(ans);\n    return 0;\n}\n```","source":"_posts/[ARC133E] Cyclic Medians 题解.md","raw":"---\ntitle: \"[ARC133E] Cyclic Medians 题解\"\ntag: \nmathjax: true\n---\n\n# [ARC133E] Cyclic Medians 题解\n\n<!-- more -->\n\n\n## Links\n\n[Luogu](https://www.luogu.com.cn/problem/AT_arc133_e)\n\n[AtCoder](https://atcoder.jp/contests/arc133/tasks/arc133_e)\n\n## Description\n\n给你四个整数 $N,M,V,A$。\n\n选择两个序列 $x$ 和 $y$，其中 $x$ 的长度为 $n$，$y$ 的长度为 $m$。两个序列中数的值域均为 $[1,V]$。\n\n定义变量 $a$，初始值为 $A$。\n\n依次对所有 $i \\in [0, N \\times M - 1]$，将 $a$ 替换为 $x_{\\left ( i \\bmod n \\right ) + 1},a,x_{\\left ( i \\bmod m \\right ) + 1}$ 的 **中位数**。\n\n你需要求出对于所有满足条件的序列 $x,y$，经过 $N \\times M$ 次操作之后 $a$ 的值之和，答案对 $998\\,244\\,353$ 取模。\n\n\n数据范围：\n\n$1 \\leq N,M \\leq 2 \\times 10 ^ {5}$，$1 \\leq A \\leq 2 \\times 10^{5}$。\n\n## Solution\n\n\n在讲解这道题目之前先**引理：**给定一个长度为 $n$ 的序列 $A$，设最大值为 $mx$，序列中元素和为 $sum$。则有 $\\sum_{i = 0}^{mx - 1}{\\sum_{j = 1}^{n} \\left [A_{j} > i \\right]} = sum$。\n\n引理的证明可以自己画一个该序列的柱状图，用一条线从小到大扫描。\n\n接下来考虑这道题，显然对于所有序列，最终的 $a \\in [1,V]$。因此我们可以按照上面的方法枚举来统计所有最后的 $a$ 的和。\n\n设最终大于 $k$ 的 $a$ 的数量为 $cnt_{k}$，则答案为 $ \\sum_{i = 0}^{V - 1} cnt_{i}$。\n\n接下来我们只需要考虑如何求出所有 $cnt_{i}$ 即可。可以对两个序列进行 0-1 重写（当然，我们并不需要真的重写这个数组，只是用于思考），若当前计算的为 $cnt_k$，大于等于 $k$ 的标为 $1$，否则标为 $0$。\n\n可以发现只要出现了一次 $\\left (k,0,0\\right)$ 或 $\\left(k,1,1\\right)$，最终的答案就与 $k$ 无关。且由于相反性，$k = k_{1}$ 时最后一次操作时两个序列所选的为 $\\left (0,0\\right)$ 和 $k = V - k_{1}$ 时最后一次操作时两个序列所选的为 $\\left (1,1\\right)$ 的个数是相同的。因此计算出序列数除二即为这部分的答案。\n\n接下来考虑没有出现从两个序列中选取相同数的情况，此时最终答案全为 $A$（即初始值），也即该部分对 $k < A$ 的 $cnt_{k}$ 有贡献。\n\n手模一下在两个序列中取数的过程，令 $G = \\gcd(n,m)$，则对于 $x_{(i + t_{1} \\cdot G)}$（$1 \\leq i < G,0\\leq t_{1} < \\frac{n}{G}$）只会取到 $y_{(i + t_{2} \\cdot G)}$（$1 \\leq i < G,0\\leq t_{2} < \\frac{m}{G}$）。因此，满足的条件为 $\\forall i \\in [1,G)$：\n\n- $x_{i} = x_{(i + t_{1} \\cdot G)}$（$0\\leq t_{1} < \\frac{n}{G}$）。\n\n- $y_{i} = y_{(i + t_{2} \\cdot G)}$（$0\\leq t_{2} < \\frac{m}{G}$）。\n\n- $x_{i} \\neq y_{i}$。\n\n分别计算 $x_{i}$ 转换后为 $0$ 和转换后为 $1$ 的数量即可。方案数为 $k^{\\frac{m}{g}}(V - k)^{\\frac{n}{g}} + k^{\\frac{n}{g}}(V - k)^{\\frac{m}{g}} $。利用快速幂求解即可。除了这些数量，剩余的就是出现相同的数量，注意根据上面的推导需要除二，本题有取模，要求 $2$ 的逆元。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define mo 998244353\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint n, m, V, A, ans, gcd__;\nint ksm(int a, int b)\n{\n    int res = 1;\n    for (; b; b >>= 1, a = (a * a) % mo)\n    {\n        if (b & 1)\n        {\n            res = (res * a) % mo;\n        }\n    }\n    return res;\n}\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(n), read(m), read(V), read(A);\n    ans = ksm(V, n + m), gcd__ = __gcd(n, m);\n    for (int i = 1; i < V; i++)\n    {\n        int now = ksm((ksm(i, n / gcd__) * ksm(V - i, m / gcd__) % mo + ksm(V - i, n / gcd__) * ksm(i, m / gcd__) % mo) % mo, gcd__);\n        if (A > i) // 满足初始值 > i 的条件才有贡献。\n        {\n            ans = (ans + now) % mo;\n        }\n        int all = ksm(V, n + m);\n        now = (all - now + mo) % mo;\n        ans = (ans + now * ksm(2, mo - 2) % mo) % mo;\n    }\n    writeln(ans);\n    return 0;\n}\n```","slug":"[ARC133E] Cyclic Medians 题解","published":1,"date":"2023-10-04T14:11:08.259Z","updated":"2023-10-04T14:11:08.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9zo002gosjaduws41wt","content":"<h1 id=\"arc133e-cyclic-medians-题解\">[ARC133E] Cyclic Medians 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_arc133_e\">Luogu</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/arc133/tasks/arc133_e\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给你四个整数 <span class=\"math inline\">\\(N,M,V,A\\)</span>。</p>\r\n<p>选择两个序列 <span class=\"math inline\">\\(x\\)</span> 和 <span\r\nclass=\"math inline\">\\(y\\)</span>，其中 <span\r\nclass=\"math inline\">\\(x\\)</span> 的长度为 <span\r\nclass=\"math inline\">\\(n\\)</span>，<span class=\"math inline\">\\(y\\)</span>\r\n的长度为 <span class=\"math inline\">\\(m\\)</span>。两个序列中数的值域均为\r\n<span class=\"math inline\">\\([1,V]\\)</span>。</p>\r\n<p>定义变量 <span class=\"math inline\">\\(a\\)</span>，初始值为 <span\r\nclass=\"math inline\">\\(A\\)</span>。</p>\r\n<p>依次对所有 <span class=\"math inline\">\\(i \\in [0, N \\times M -\r\n1]\\)</span>，将 <span class=\"math inline\">\\(a\\)</span> 替换为 <span\r\nclass=\"math inline\">\\(x_{\\left ( i \\bmod n \\right ) + 1},a,x_{\\left ( i\r\n\\bmod m \\right ) + 1}\\)</span> 的 <strong>中位数</strong>。</p>\r\n<p>你需要求出对于所有满足条件的序列 <span\r\nclass=\"math inline\">\\(x,y\\)</span>，经过 <span class=\"math inline\">\\(N\r\n\\times M\\)</span> 次操作之后 <span class=\"math inline\">\\(a\\)</span>\r\n的值之和，答案对 <span class=\"math inline\">\\(998\\,244\\,353\\)</span>\r\n取模。</p>\r\n<p>数据范围：</p>\r\n<p><span class=\"math inline\">\\(1 \\leq N,M \\leq 2 \\times 10 ^\r\n{5}\\)</span>，<span class=\"math inline\">\\(1 \\leq A \\leq 2 \\times\r\n10^{5}\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>在讲解这道题目之前先<strong>引理：</strong>给定一个长度为 <span\r\nclass=\"math inline\">\\(n\\)</span> 的序列 <span\r\nclass=\"math inline\">\\(A\\)</span>，设最大值为 <span\r\nclass=\"math inline\">\\(mx\\)</span>，序列中元素和为 <span\r\nclass=\"math inline\">\\(sum\\)</span>。则有 <span\r\nclass=\"math inline\">\\(\\sum_{i = 0}^{mx - 1}{\\sum_{j = 1}^{n} \\left\r\n[A_{j} &gt; i \\right]} = sum\\)</span>。</p>\r\n<p>引理的证明可以自己画一个该序列的柱状图，用一条线从小到大扫描。</p>\r\n<p>接下来考虑这道题，显然对于所有序列，最终的 <span\r\nclass=\"math inline\">\\(a \\in\r\n[1,V]\\)</span>。因此我们可以按照上面的方法枚举来统计所有最后的 <span\r\nclass=\"math inline\">\\(a\\)</span> 的和。</p>\r\n<p>设最终大于 <span class=\"math inline\">\\(k\\)</span> 的 <span\r\nclass=\"math inline\">\\(a\\)</span> 的数量为 <span\r\nclass=\"math inline\">\\(cnt_{k}\\)</span>，则答案为 $ <em>{i = 0}^{V - 1}\r\ncnt</em>{i}$。</p>\r\n<p>接下来我们只需要考虑如何求出所有 <span\r\nclass=\"math inline\">\\(cnt_{i}\\)</span> 即可。可以对两个序列进行 0-1\r\n重写（当然，我们并不需要真的重写这个数组，只是用于思考），若当前计算的为\r\n<span class=\"math inline\">\\(cnt_k\\)</span>，大于等于 <span\r\nclass=\"math inline\">\\(k\\)</span> 的标为 <span\r\nclass=\"math inline\">\\(1\\)</span>，否则标为 <span\r\nclass=\"math inline\">\\(0\\)</span>。</p>\r\n<p>可以发现只要出现了一次 <span class=\"math inline\">\\(\\left\r\n(k,0,0\\right)\\)</span> 或 <span\r\nclass=\"math inline\">\\(\\left(k,1,1\\right)\\)</span>，最终的答案就与 <span\r\nclass=\"math inline\">\\(k\\)</span> 无关。且由于相反性，<span\r\nclass=\"math inline\">\\(k = k_{1}\\)</span>\r\n时最后一次操作时两个序列所选的为 <span class=\"math inline\">\\(\\left\r\n(0,0\\right)\\)</span> 和 <span class=\"math inline\">\\(k = V -\r\nk_{1}\\)</span> 时最后一次操作时两个序列所选的为 <span\r\nclass=\"math inline\">\\(\\left (1,1\\right)\\)</span>\r\n的个数是相同的。因此计算出序列数除二即为这部分的答案。</p>\r\n<p>接下来考虑没有出现从两个序列中选取相同数的情况，此时最终答案全为\r\n<span class=\"math inline\">\\(A\\)</span>（即初始值），也即该部分对 <span\r\nclass=\"math inline\">\\(k &lt; A\\)</span> 的 <span\r\nclass=\"math inline\">\\(cnt_{k}\\)</span> 有贡献。</p>\r\n<p>手模一下在两个序列中取数的过程，令 <span class=\"math inline\">\\(G =\r\n\\gcd(n,m)\\)</span>，则对于 <span class=\"math inline\">\\(x_{(i + t_{1}\r\n\\cdot G)}\\)</span>（<span class=\"math inline\">\\(1 \\leq i &lt; G,0\\leq\r\nt_{1} &lt; \\frac{n}{G}\\)</span>）只会取到 <span\r\nclass=\"math inline\">\\(y_{(i + t_{2} \\cdot G)}\\)</span>（<span\r\nclass=\"math inline\">\\(1 \\leq i &lt; G,0\\leq t_{2} &lt;\r\n\\frac{m}{G}\\)</span>）。因此，满足的条件为 <span\r\nclass=\"math inline\">\\(\\forall i \\in [1,G)\\)</span>：</p>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(x_{i} = x_{(i + t_{1} \\cdot\r\nG)}\\)</span>（<span class=\"math inline\">\\(0\\leq t_{1} &lt;\r\n\\frac{n}{G}\\)</span>）。</p></li>\r\n<li><p><span class=\"math inline\">\\(y_{i} = y_{(i + t_{2} \\cdot\r\nG)}\\)</span>（<span class=\"math inline\">\\(0\\leq t_{2} &lt;\r\n\\frac{m}{G}\\)</span>）。</p></li>\r\n<li><p><span class=\"math inline\">\\(x_{i} \\neq y_{i}\\)</span>。</p></li>\r\n</ul>\r\n<p>分别计算 <span class=\"math inline\">\\(x_{i}\\)</span> 转换后为 <span\r\nclass=\"math inline\">\\(0\\)</span> 和转换后为 <span\r\nclass=\"math inline\">\\(1\\)</span> 的数量即可。方案数为 $k^{}(V - k)^{} +\r\nk^{}(V - k)^{}\r\n$。利用快速幂求解即可。除了这些数量，剩余的就是出现相同的数量，注意根据上面的推导需要除二，本题有取模，要求\r\n<span class=\"math inline\">\\(2\\)</span> 的逆元。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mo 998244353</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, V, A, ans, gcd__;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ksm</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; b; b &gt;&gt;= <span class=\"number\">1</span>, a = (a * a) % mo)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res = (res * a) % mo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n), <span class=\"built_in\">read</span>(m), <span class=\"built_in\">read</span>(V), <span class=\"built_in\">read</span>(A);</span><br><span class=\"line\">    ans = <span class=\"built_in\">ksm</span>(V, n + m), gcd__ = __gcd(n, m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; V; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> now = <span class=\"built_in\">ksm</span>((<span class=\"built_in\">ksm</span>(i, n / gcd__) * <span class=\"built_in\">ksm</span>(V - i, m / gcd__) % mo + <span class=\"built_in\">ksm</span>(V - i, n / gcd__) * <span class=\"built_in\">ksm</span>(i, m / gcd__) % mo) % mo, gcd__);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A &gt; i) <span class=\"comment\">// 满足初始值 &gt; i 的条件才有贡献。</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans = (ans + now) % mo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> all = <span class=\"built_in\">ksm</span>(V, n + m);</span><br><span class=\"line\">        now = (all - now + mo) % mo;</span><br><span class=\"line\">        ans = (ans + now * <span class=\"built_in\">ksm</span>(<span class=\"number\">2</span>, mo - <span class=\"number\">2</span>) % mo) % mo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"arc133e-cyclic-medians-题解\">[ARC133E] Cyclic Medians 题解</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_arc133_e\">Luogu</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/arc133/tasks/arc133_e\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给你四个整数 <span class=\"math inline\">\\(N,M,V,A\\)</span>。</p>\r\n<p>选择两个序列 <span class=\"math inline\">\\(x\\)</span> 和 <span\r\nclass=\"math inline\">\\(y\\)</span>，其中 <span\r\nclass=\"math inline\">\\(x\\)</span> 的长度为 <span\r\nclass=\"math inline\">\\(n\\)</span>，<span class=\"math inline\">\\(y\\)</span>\r\n的长度为 <span class=\"math inline\">\\(m\\)</span>。两个序列中数的值域均为\r\n<span class=\"math inline\">\\([1,V]\\)</span>。</p>\r\n<p>定义变量 <span class=\"math inline\">\\(a\\)</span>，初始值为 <span\r\nclass=\"math inline\">\\(A\\)</span>。</p>\r\n<p>依次对所有 <span class=\"math inline\">\\(i \\in [0, N \\times M -\r\n1]\\)</span>，将 <span class=\"math inline\">\\(a\\)</span> 替换为 <span\r\nclass=\"math inline\">\\(x_{\\left ( i \\bmod n \\right ) + 1},a,x_{\\left ( i\r\n\\bmod m \\right ) + 1}\\)</span> 的 <strong>中位数</strong>。</p>\r\n<p>你需要求出对于所有满足条件的序列 <span\r\nclass=\"math inline\">\\(x,y\\)</span>，经过 <span class=\"math inline\">\\(N\r\n\\times M\\)</span> 次操作之后 <span class=\"math inline\">\\(a\\)</span>\r\n的值之和，答案对 <span class=\"math inline\">\\(998\\,244\\,353\\)</span>\r\n取模。</p>\r\n<p>数据范围：</p>\r\n<p><span class=\"math inline\">\\(1 \\leq N,M \\leq 2 \\times 10 ^\r\n{5}\\)</span>，<span class=\"math inline\">\\(1 \\leq A \\leq 2 \\times\r\n10^{5}\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>在讲解这道题目之前先<strong>引理：</strong>给定一个长度为 <span\r\nclass=\"math inline\">\\(n\\)</span> 的序列 <span\r\nclass=\"math inline\">\\(A\\)</span>，设最大值为 <span\r\nclass=\"math inline\">\\(mx\\)</span>，序列中元素和为 <span\r\nclass=\"math inline\">\\(sum\\)</span>。则有 <span\r\nclass=\"math inline\">\\(\\sum_{i = 0}^{mx - 1}{\\sum_{j = 1}^{n} \\left\r\n[A_{j} &gt; i \\right]} = sum\\)</span>。</p>\r\n<p>引理的证明可以自己画一个该序列的柱状图，用一条线从小到大扫描。</p>\r\n<p>接下来考虑这道题，显然对于所有序列，最终的 <span\r\nclass=\"math inline\">\\(a \\in\r\n[1,V]\\)</span>。因此我们可以按照上面的方法枚举来统计所有最后的 <span\r\nclass=\"math inline\">\\(a\\)</span> 的和。</p>\r\n<p>设最终大于 <span class=\"math inline\">\\(k\\)</span> 的 <span\r\nclass=\"math inline\">\\(a\\)</span> 的数量为 <span\r\nclass=\"math inline\">\\(cnt_{k}\\)</span>，则答案为 $ <em>{i = 0}^{V - 1}\r\ncnt</em>{i}$。</p>\r\n<p>接下来我们只需要考虑如何求出所有 <span\r\nclass=\"math inline\">\\(cnt_{i}\\)</span> 即可。可以对两个序列进行 0-1\r\n重写（当然，我们并不需要真的重写这个数组，只是用于思考），若当前计算的为\r\n<span class=\"math inline\">\\(cnt_k\\)</span>，大于等于 <span\r\nclass=\"math inline\">\\(k\\)</span> 的标为 <span\r\nclass=\"math inline\">\\(1\\)</span>，否则标为 <span\r\nclass=\"math inline\">\\(0\\)</span>。</p>\r\n<p>可以发现只要出现了一次 <span class=\"math inline\">\\(\\left\r\n(k,0,0\\right)\\)</span> 或 <span\r\nclass=\"math inline\">\\(\\left(k,1,1\\right)\\)</span>，最终的答案就与 <span\r\nclass=\"math inline\">\\(k\\)</span> 无关。且由于相反性，<span\r\nclass=\"math inline\">\\(k = k_{1}\\)</span>\r\n时最后一次操作时两个序列所选的为 <span class=\"math inline\">\\(\\left\r\n(0,0\\right)\\)</span> 和 <span class=\"math inline\">\\(k = V -\r\nk_{1}\\)</span> 时最后一次操作时两个序列所选的为 <span\r\nclass=\"math inline\">\\(\\left (1,1\\right)\\)</span>\r\n的个数是相同的。因此计算出序列数除二即为这部分的答案。</p>\r\n<p>接下来考虑没有出现从两个序列中选取相同数的情况，此时最终答案全为\r\n<span class=\"math inline\">\\(A\\)</span>（即初始值），也即该部分对 <span\r\nclass=\"math inline\">\\(k &lt; A\\)</span> 的 <span\r\nclass=\"math inline\">\\(cnt_{k}\\)</span> 有贡献。</p>\r\n<p>手模一下在两个序列中取数的过程，令 <span class=\"math inline\">\\(G =\r\n\\gcd(n,m)\\)</span>，则对于 <span class=\"math inline\">\\(x_{(i + t_{1}\r\n\\cdot G)}\\)</span>（<span class=\"math inline\">\\(1 \\leq i &lt; G,0\\leq\r\nt_{1} &lt; \\frac{n}{G}\\)</span>）只会取到 <span\r\nclass=\"math inline\">\\(y_{(i + t_{2} \\cdot G)}\\)</span>（<span\r\nclass=\"math inline\">\\(1 \\leq i &lt; G,0\\leq t_{2} &lt;\r\n\\frac{m}{G}\\)</span>）。因此，满足的条件为 <span\r\nclass=\"math inline\">\\(\\forall i \\in [1,G)\\)</span>：</p>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(x_{i} = x_{(i + t_{1} \\cdot\r\nG)}\\)</span>（<span class=\"math inline\">\\(0\\leq t_{1} &lt;\r\n\\frac{n}{G}\\)</span>）。</p></li>\r\n<li><p><span class=\"math inline\">\\(y_{i} = y_{(i + t_{2} \\cdot\r\nG)}\\)</span>（<span class=\"math inline\">\\(0\\leq t_{2} &lt;\r\n\\frac{m}{G}\\)</span>）。</p></li>\r\n<li><p><span class=\"math inline\">\\(x_{i} \\neq y_{i}\\)</span>。</p></li>\r\n</ul>\r\n<p>分别计算 <span class=\"math inline\">\\(x_{i}\\)</span> 转换后为 <span\r\nclass=\"math inline\">\\(0\\)</span> 和转换后为 <span\r\nclass=\"math inline\">\\(1\\)</span> 的数量即可。方案数为 $k^{}(V - k)^{} +\r\nk^{}(V - k)^{}\r\n$。利用快速幂求解即可。除了这些数量，剩余的就是出现相同的数量，注意根据上面的推导需要除二，本题有取模，要求\r\n<span class=\"math inline\">\\(2\\)</span> 的逆元。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mo 998244353</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n, m, V, A, ans, gcd__;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ksm</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (; b; b &gt;&gt;= <span class=\"number\">1</span>, a = (a * a) % mo)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (b &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res = (res * a) % mo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n), <span class=\"built_in\">read</span>(m), <span class=\"built_in\">read</span>(V), <span class=\"built_in\">read</span>(A);</span><br><span class=\"line\">    ans = <span class=\"built_in\">ksm</span>(V, n + m), gcd__ = __gcd(n, m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; V; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> now = <span class=\"built_in\">ksm</span>((<span class=\"built_in\">ksm</span>(i, n / gcd__) * <span class=\"built_in\">ksm</span>(V - i, m / gcd__) % mo + <span class=\"built_in\">ksm</span>(V - i, n / gcd__) * <span class=\"built_in\">ksm</span>(i, m / gcd__) % mo) % mo, gcd__);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A &gt; i) <span class=\"comment\">// 满足初始值 &gt; i 的条件才有贡献。</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans = (ans + now) % mo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> all = <span class=\"built_in\">ksm</span>(V, n + m);</span><br><span class=\"line\">        now = (all - now + mo) % mo;</span><br><span class=\"line\">        ans = (ans + now * <span class=\"built_in\">ksm</span>(<span class=\"number\">2</span>, mo - <span class=\"number\">2</span>) % mo) % mo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"[ARC160B] Triple Pair 题解","tag":null,"mathjax":true,"_content":"\n# [ARC160B] Triple Pair\n\n<!-- more -->\n\n\n## Link\n\n[Luogu](https://www.luogu.com.cn/problem/AT_arc160_b)\n\n[AtCoder](https://atcoder.jp/contests/arc160/tasks/arc160_b)\n\n## Description\n\n**本题单测试点多组测试数据。**\n\n每次给出一个正整数 $n$。求满足 $x,y,z \\in N_{+}$ 且 $xy,xz,yz \\leq n$ 有序三元组 $(x,y,z)$ 的个数，并输出答案对 $998244353$ 取模的结果。\n\n## Solution\n\nUpdate 2023.8.1：更正了两处笔误。\n\n根据乘法的性质，若 $x \\times y \\leq n$，则 $x,y$ 中至多有一个大于 $\\sqrt{n}$。设满足条件的三元组为 $\\left (x,y,z \\right )$。令 $x \\leq y \\leq z$。根据上述结论可以发现 $1 \\leq y \\leq \\sqrt{n}$。我们可以枚举 $y$，根据题目限制得出 $1 \\leq x \\leq y \\leq  \\left \\lfloor \\frac{n}{y} \\right \\rfloor$。\n\n根据乘法原理，据此得到的答案数量为 $y \\times y \\times \\left ( \\left \\lfloor \\frac{n}{y} \\right \\rfloor - y\\right )$。注意此时的 $x,y,z$ 是有大小关系的。\n\n考虑如何据此计算正确答案，进行分类讨论：\n\n- $x = y = z$ 时，排列只有一种。\n\n- 有两个相同时，排列有三种。\n\n- 全都不同时，排列有六种。\n\n回到上面 $x,y,z$ 的范围：三者相同只有一种情况，$x = y$ 有 $\\left \\lfloor \\frac{n}{y} \\right \\rfloor - y$ 种情况 $y = z$ 有 $y$ 种情况，剩余为三者不同。最终答案为即为 $\\sum_{y = 1}^{\\sqrt{n}}\\left (6 \\times \\left  ( \\left \\lfloor \\frac{n}{y} \\right \\rfloor - y \\right ) \\times \\left (y - 1 \\right )+ 3 \\times  \\left (\\left \\lfloor \\frac{n}{y} \\right \\rfloor - 1 \\right ) + 1 \\right )$。\n\n时间复杂度为 $O(\\sum{ \\sqrt{n}})$。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define mo 998244353\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T, n;\nsigned main()\n{\n\n    read(T);\n    while (T--)\n    {\n        read(n);\n        int ans = 0;\n        for (int i = 1; i <= sqrt(n); i++) // 枚举中间的数\n        {\n            int mx = n / i; // 最大的数\n            ans = (ans + (mx - i) * (i - 1) * 6 % mo + 3 * (mx - 1) + 1) % mo;\n        }\n        writeln(ans);\n    }\n    return 0;\n}\n```\n","source":"_posts/[ARC160B] Triple Pair 题解.md","raw":"---\ntitle: \"[ARC160B] Triple Pair 题解\"\ntag: \nmathjax: true\n---\n\n# [ARC160B] Triple Pair\n\n<!-- more -->\n\n\n## Link\n\n[Luogu](https://www.luogu.com.cn/problem/AT_arc160_b)\n\n[AtCoder](https://atcoder.jp/contests/arc160/tasks/arc160_b)\n\n## Description\n\n**本题单测试点多组测试数据。**\n\n每次给出一个正整数 $n$。求满足 $x,y,z \\in N_{+}$ 且 $xy,xz,yz \\leq n$ 有序三元组 $(x,y,z)$ 的个数，并输出答案对 $998244353$ 取模的结果。\n\n## Solution\n\nUpdate 2023.8.1：更正了两处笔误。\n\n根据乘法的性质，若 $x \\times y \\leq n$，则 $x,y$ 中至多有一个大于 $\\sqrt{n}$。设满足条件的三元组为 $\\left (x,y,z \\right )$。令 $x \\leq y \\leq z$。根据上述结论可以发现 $1 \\leq y \\leq \\sqrt{n}$。我们可以枚举 $y$，根据题目限制得出 $1 \\leq x \\leq y \\leq  \\left \\lfloor \\frac{n}{y} \\right \\rfloor$。\n\n根据乘法原理，据此得到的答案数量为 $y \\times y \\times \\left ( \\left \\lfloor \\frac{n}{y} \\right \\rfloor - y\\right )$。注意此时的 $x,y,z$ 是有大小关系的。\n\n考虑如何据此计算正确答案，进行分类讨论：\n\n- $x = y = z$ 时，排列只有一种。\n\n- 有两个相同时，排列有三种。\n\n- 全都不同时，排列有六种。\n\n回到上面 $x,y,z$ 的范围：三者相同只有一种情况，$x = y$ 有 $\\left \\lfloor \\frac{n}{y} \\right \\rfloor - y$ 种情况 $y = z$ 有 $y$ 种情况，剩余为三者不同。最终答案为即为 $\\sum_{y = 1}^{\\sqrt{n}}\\left (6 \\times \\left  ( \\left \\lfloor \\frac{n}{y} \\right \\rfloor - y \\right ) \\times \\left (y - 1 \\right )+ 3 \\times  \\left (\\left \\lfloor \\frac{n}{y} \\right \\rfloor - 1 \\right ) + 1 \\right )$。\n\n时间复杂度为 $O(\\sum{ \\sqrt{n}})$。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define mo 998244353\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T, n;\nsigned main()\n{\n\n    read(T);\n    while (T--)\n    {\n        read(n);\n        int ans = 0;\n        for (int i = 1; i <= sqrt(n); i++) // 枚举中间的数\n        {\n            int mx = n / i; // 最大的数\n            ans = (ans + (mx - i) * (i - 1) * 6 % mo + 3 * (mx - 1) + 1) % mo;\n        }\n        writeln(ans);\n    }\n    return 0;\n}\n```\n","slug":"[ARC160B] Triple Pair 题解","published":1,"date":"2023-10-04T14:11:08.259Z","updated":"2023-10-04T14:11:08.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9zp002hosjac2s9exdh","content":"<h1 id=\"arc160b-triple-pair\">[ARC160B] Triple Pair</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"link\">Link</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_arc160_b\">Luogu</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/arc160/tasks/arc160_b\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p><strong>本题单测试点多组测试数据。</strong></p>\r\n<p>每次给出一个正整数 <span class=\"math inline\">\\(n\\)</span>。求满足\r\n<span class=\"math inline\">\\(x,y,z \\in N_{+}\\)</span> 且 <span\r\nclass=\"math inline\">\\(xy,xz,yz \\leq n\\)</span> 有序三元组 <span\r\nclass=\"math inline\">\\((x,y,z)\\)</span> 的个数，并输出答案对 <span\r\nclass=\"math inline\">\\(998244353\\)</span> 取模的结果。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>Update 2023.8.1：更正了两处笔误。</p>\r\n<p>根据乘法的性质，若 <span class=\"math inline\">\\(x \\times y \\leq\r\nn\\)</span>，则 <span class=\"math inline\">\\(x,y\\)</span> 中至多有一个大于\r\n<span class=\"math inline\">\\(\\sqrt{n}\\)</span>。设满足条件的三元组为\r\n<span class=\"math inline\">\\(\\left (x,y,z \\right )\\)</span>。令 <span\r\nclass=\"math inline\">\\(x \\leq y \\leq z\\)</span>。根据上述结论可以发现\r\n<span class=\"math inline\">\\(1 \\leq y \\leq\r\n\\sqrt{n}\\)</span>。我们可以枚举 <span\r\nclass=\"math inline\">\\(y\\)</span>，根据题目限制得出 <span\r\nclass=\"math inline\">\\(1 \\leq x \\leq y \\leq \\left \\lfloor \\frac{n}{y}\r\n\\right \\rfloor\\)</span>。</p>\r\n<p>根据乘法原理，据此得到的答案数量为 <span class=\"math inline\">\\(y\r\n\\times y \\times \\left ( \\left \\lfloor \\frac{n}{y} \\right \\rfloor -\r\ny\\right )\\)</span>。注意此时的 <span\r\nclass=\"math inline\">\\(x,y,z\\)</span> 是有大小关系的。</p>\r\n<p>考虑如何据此计算正确答案，进行分类讨论：</p>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(x = y = z\\)</span>\r\n时，排列只有一种。</p></li>\r\n<li><p>有两个相同时，排列有三种。</p></li>\r\n<li><p>全都不同时，排列有六种。</p></li>\r\n</ul>\r\n<p>回到上面 <span class=\"math inline\">\\(x,y,z\\)</span>\r\n的范围：三者相同只有一种情况，<span class=\"math inline\">\\(x = y\\)</span>\r\n有 <span class=\"math inline\">\\(\\left \\lfloor \\frac{n}{y} \\right \\rfloor\r\n- y\\)</span> 种情况 <span class=\"math inline\">\\(y = z\\)</span> 有 <span\r\nclass=\"math inline\">\\(y\\)</span> 种情况，剩余为三者不同。最终答案为即为\r\n<span class=\"math inline\">\\(\\sum_{y = 1}^{\\sqrt{n}}\\left (6 \\times \\left\r\n( \\left \\lfloor \\frac{n}{y} \\right \\rfloor - y \\right ) \\times \\left (y\r\n- 1 \\right )+ 3 \\times \\left (\\left \\lfloor \\frac{n}{y} \\right \\rfloor -\r\n1 \\right ) + 1 \\right )\\)</span>。</p>\r\n<p>时间复杂度为 <span class=\"math inline\">\\(O(\\sum{\r\n\\sqrt{n}})\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mo 998244353</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T, n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"built_in\">sqrt</span>(n); i++) <span class=\"comment\">// 枚举中间的数</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mx = n / i; <span class=\"comment\">// 最大的数</span></span><br><span class=\"line\">            ans = (ans + (mx - i) * (i - <span class=\"number\">1</span>) * <span class=\"number\">6</span> % mo + <span class=\"number\">3</span> * (mx - <span class=\"number\">1</span>) + <span class=\"number\">1</span>) % mo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"arc160b-triple-pair\">[ARC160B] Triple Pair</h1>","more":"<h2 id=\"link\">Link</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_arc160_b\">Luogu</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/arc160/tasks/arc160_b\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p><strong>本题单测试点多组测试数据。</strong></p>\r\n<p>每次给出一个正整数 <span class=\"math inline\">\\(n\\)</span>。求满足\r\n<span class=\"math inline\">\\(x,y,z \\in N_{+}\\)</span> 且 <span\r\nclass=\"math inline\">\\(xy,xz,yz \\leq n\\)</span> 有序三元组 <span\r\nclass=\"math inline\">\\((x,y,z)\\)</span> 的个数，并输出答案对 <span\r\nclass=\"math inline\">\\(998244353\\)</span> 取模的结果。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>Update 2023.8.1：更正了两处笔误。</p>\r\n<p>根据乘法的性质，若 <span class=\"math inline\">\\(x \\times y \\leq\r\nn\\)</span>，则 <span class=\"math inline\">\\(x,y\\)</span> 中至多有一个大于\r\n<span class=\"math inline\">\\(\\sqrt{n}\\)</span>。设满足条件的三元组为\r\n<span class=\"math inline\">\\(\\left (x,y,z \\right )\\)</span>。令 <span\r\nclass=\"math inline\">\\(x \\leq y \\leq z\\)</span>。根据上述结论可以发现\r\n<span class=\"math inline\">\\(1 \\leq y \\leq\r\n\\sqrt{n}\\)</span>。我们可以枚举 <span\r\nclass=\"math inline\">\\(y\\)</span>，根据题目限制得出 <span\r\nclass=\"math inline\">\\(1 \\leq x \\leq y \\leq \\left \\lfloor \\frac{n}{y}\r\n\\right \\rfloor\\)</span>。</p>\r\n<p>根据乘法原理，据此得到的答案数量为 <span class=\"math inline\">\\(y\r\n\\times y \\times \\left ( \\left \\lfloor \\frac{n}{y} \\right \\rfloor -\r\ny\\right )\\)</span>。注意此时的 <span\r\nclass=\"math inline\">\\(x,y,z\\)</span> 是有大小关系的。</p>\r\n<p>考虑如何据此计算正确答案，进行分类讨论：</p>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(x = y = z\\)</span>\r\n时，排列只有一种。</p></li>\r\n<li><p>有两个相同时，排列有三种。</p></li>\r\n<li><p>全都不同时，排列有六种。</p></li>\r\n</ul>\r\n<p>回到上面 <span class=\"math inline\">\\(x,y,z\\)</span>\r\n的范围：三者相同只有一种情况，<span class=\"math inline\">\\(x = y\\)</span>\r\n有 <span class=\"math inline\">\\(\\left \\lfloor \\frac{n}{y} \\right \\rfloor\r\n- y\\)</span> 种情况 <span class=\"math inline\">\\(y = z\\)</span> 有 <span\r\nclass=\"math inline\">\\(y\\)</span> 种情况，剩余为三者不同。最终答案为即为\r\n<span class=\"math inline\">\\(\\sum_{y = 1}^{\\sqrt{n}}\\left (6 \\times \\left\r\n( \\left \\lfloor \\frac{n}{y} \\right \\rfloor - y \\right ) \\times \\left (y\r\n- 1 \\right )+ 3 \\times \\left (\\left \\lfloor \\frac{n}{y} \\right \\rfloor -\r\n1 \\right ) + 1 \\right )\\)</span>。</p>\r\n<p>时间复杂度为 <span class=\"math inline\">\\(O(\\sum{\r\n\\sqrt{n}})\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mo 998244353</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T, n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"built_in\">sqrt</span>(n); i++) <span class=\"comment\">// 枚举中间的数</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mx = n / i; <span class=\"comment\">// 最大的数</span></span><br><span class=\"line\">            ans = (ans + (mx - i) * (i - <span class=\"number\">1</span>) * <span class=\"number\">6</span> % mo + <span class=\"number\">3</span> * (mx - <span class=\"number\">1</span>) + <span class=\"number\">1</span>) % mo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">writeln</span>(ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"[ARC161A] Make M 题解","tag":null,"mathjax":true,"_content":"\n# [ARC161A] Make M 题解\n\n<!-- more -->\n\n\n## Link\n\n[洛谷](https://www.luogu.com.cn/problem/AT_arc161_a)\n\n[AtCoder](https://atcoder.jp/contests/arc161/tasks/arc161_a)\n\n## Description\n\n给定长度为 $n$ 的整数序列 $S$，其中 $n$ 为奇数。问能否重新排列该序列，使得对于所有偶数下标 $i$，有 $S_{i} > S_{i - 1}$ 且 $S_{i} > S_{i + 1}$。\n\n## Solution\n\n根据题目，可以想到将最大的几个数从大到小放在下标为偶数的位置。剩余的数按照从大到小的顺序放在其他位置。\n\n简单证明合理性：若有 $i,j,x,y$ 满足 $S_{i} > S_{j}$，$S_{x} > S_{y}$ 且 $S_{x},S_{y}$ 均不在序列中前 $\\lfloor \\frac{n}{2} \\rfloor$ 大，$S_{i},S_{j}$ 放在新数列中偶数下标位置，$S_{x},S_{y}$ 放在新数列中奇数下标位置，若原来将 $S_{x}$ 放在 $S_{j}$ 旁满足条件，则 $S_{i} > S_{j} > S_{x} > S_{y}$。则交换后一定满足条件。\n\n因此将序列排序之后按照如上规则制造结果序列，最后判断一次即可，时间复杂度 $O(n \\log n)$。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 200101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint n;\nint nums[max_n];\nint ans[max_n];\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(n);\n    for (int i = 1; i <= n; i++)\n    {\n        read(nums[i]);\n    }\n    sort(nums + 1, nums + n + 1);\n    int mid = n / 2 + 1, r = n;\n    for (int i = 1; i <= n; i++)\n    {\n        if (i % 2)\n        {\n            ans[i] = nums[mid--];\n        }\n        else\n        {\n            ans[i] = nums[r--];\n        }\n    }\n    for (int i = 2; i < n; i += 2)\n    {\n        if (ans[i] <= ans[i - 1] || ans[i] <= ans[i + 1])\n        {\n            puts(\"No\");\n            return 0;\n        }\n    }\n    puts(\"Yes\");\n    return 0;\n}\n```\n","source":"_posts/[ARC161A] Make M 题解.md","raw":"---\ntitle: \"[ARC161A] Make M 题解\"\ntag: \nmathjax: true\n---\n\n# [ARC161A] Make M 题解\n\n<!-- more -->\n\n\n## Link\n\n[洛谷](https://www.luogu.com.cn/problem/AT_arc161_a)\n\n[AtCoder](https://atcoder.jp/contests/arc161/tasks/arc161_a)\n\n## Description\n\n给定长度为 $n$ 的整数序列 $S$，其中 $n$ 为奇数。问能否重新排列该序列，使得对于所有偶数下标 $i$，有 $S_{i} > S_{i - 1}$ 且 $S_{i} > S_{i + 1}$。\n\n## Solution\n\n根据题目，可以想到将最大的几个数从大到小放在下标为偶数的位置。剩余的数按照从大到小的顺序放在其他位置。\n\n简单证明合理性：若有 $i,j,x,y$ 满足 $S_{i} > S_{j}$，$S_{x} > S_{y}$ 且 $S_{x},S_{y}$ 均不在序列中前 $\\lfloor \\frac{n}{2} \\rfloor$ 大，$S_{i},S_{j}$ 放在新数列中偶数下标位置，$S_{x},S_{y}$ 放在新数列中奇数下标位置，若原来将 $S_{x}$ 放在 $S_{j}$ 旁满足条件，则 $S_{i} > S_{j} > S_{x} > S_{y}$。则交换后一定满足条件。\n\n因此将序列排序之后按照如上规则制造结果序列，最后判断一次即可，时间复杂度 $O(n \\log n)$。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 200101\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint n;\nint nums[max_n];\nint ans[max_n];\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(n);\n    for (int i = 1; i <= n; i++)\n    {\n        read(nums[i]);\n    }\n    sort(nums + 1, nums + n + 1);\n    int mid = n / 2 + 1, r = n;\n    for (int i = 1; i <= n; i++)\n    {\n        if (i % 2)\n        {\n            ans[i] = nums[mid--];\n        }\n        else\n        {\n            ans[i] = nums[r--];\n        }\n    }\n    for (int i = 2; i < n; i += 2)\n    {\n        if (ans[i] <= ans[i - 1] || ans[i] <= ans[i + 1])\n        {\n            puts(\"No\");\n            return 0;\n        }\n    }\n    puts(\"Yes\");\n    return 0;\n}\n```\n","slug":"[ARC161A] Make M 题解","published":1,"date":"2023-10-04T14:11:08.259Z","updated":"2023-10-04T14:11:08.259Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9zp002iosja58oqc4p6","content":"<h1 id=\"arc161a-make-m-题解\">[ARC161A] Make M 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"link\">Link</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_arc161_a\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/arc161/tasks/arc161_a\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定长度为 <span class=\"math inline\">\\(n\\)</span> 的整数序列 <span\r\nclass=\"math inline\">\\(S\\)</span>，其中 <span\r\nclass=\"math inline\">\\(n\\)</span>\r\n为奇数。问能否重新排列该序列，使得对于所有偶数下标 <span\r\nclass=\"math inline\">\\(i\\)</span>，有 <span class=\"math inline\">\\(S_{i}\r\n&gt; S_{i - 1}\\)</span> 且 <span class=\"math inline\">\\(S_{i} &gt; S_{i +\r\n1}\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>根据题目，可以想到将最大的几个数从大到小放在下标为偶数的位置。剩余的数按照从大到小的顺序放在其他位置。</p>\r\n<p>简单证明合理性：若有 <span class=\"math inline\">\\(i,j,x,y\\)</span>\r\n满足 <span class=\"math inline\">\\(S_{i} &gt; S_{j}\\)</span>，<span\r\nclass=\"math inline\">\\(S_{x} &gt; S_{y}\\)</span> 且 <span\r\nclass=\"math inline\">\\(S_{x},S_{y}\\)</span> 均不在序列中前 <span\r\nclass=\"math inline\">\\(\\lfloor \\frac{n}{2} \\rfloor\\)</span> 大，<span\r\nclass=\"math inline\">\\(S_{i},S_{j}\\)</span>\r\n放在新数列中偶数下标位置，<span\r\nclass=\"math inline\">\\(S_{x},S_{y}\\)</span>\r\n放在新数列中奇数下标位置，若原来将 <span\r\nclass=\"math inline\">\\(S_{x}\\)</span> 放在 <span\r\nclass=\"math inline\">\\(S_{j}\\)</span> 旁满足条件，则 <span\r\nclass=\"math inline\">\\(S_{i} &gt; S_{j} &gt; S_{x} &gt;\r\nS_{y}\\)</span>。则交换后一定满足条件。</p>\r\n<p>因此将序列排序之后按照如上规则制造结果序列，最后判断一次即可，时间复杂度\r\n<span class=\"math inline\">\\(O(n \\log n)\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 200101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> nums[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> ans[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(nums + <span class=\"number\">1</span>, nums + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = n / <span class=\"number\">2</span> + <span class=\"number\">1</span>, r = n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans[i] = nums[mid--];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans[i] = nums[r--];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt; n; i += <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans[i] &lt;= ans[i - <span class=\"number\">1</span>] || ans[i] &lt;= ans[i + <span class=\"number\">1</span>])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"arc161a-make-m-题解\">[ARC161A] Make M 题解</h1>","more":"<h2 id=\"link\">Link</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_arc161_a\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/arc161/tasks/arc161_a\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给定长度为 <span class=\"math inline\">\\(n\\)</span> 的整数序列 <span\r\nclass=\"math inline\">\\(S\\)</span>，其中 <span\r\nclass=\"math inline\">\\(n\\)</span>\r\n为奇数。问能否重新排列该序列，使得对于所有偶数下标 <span\r\nclass=\"math inline\">\\(i\\)</span>，有 <span class=\"math inline\">\\(S_{i}\r\n&gt; S_{i - 1}\\)</span> 且 <span class=\"math inline\">\\(S_{i} &gt; S_{i +\r\n1}\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>根据题目，可以想到将最大的几个数从大到小放在下标为偶数的位置。剩余的数按照从大到小的顺序放在其他位置。</p>\r\n<p>简单证明合理性：若有 <span class=\"math inline\">\\(i,j,x,y\\)</span>\r\n满足 <span class=\"math inline\">\\(S_{i} &gt; S_{j}\\)</span>，<span\r\nclass=\"math inline\">\\(S_{x} &gt; S_{y}\\)</span> 且 <span\r\nclass=\"math inline\">\\(S_{x},S_{y}\\)</span> 均不在序列中前 <span\r\nclass=\"math inline\">\\(\\lfloor \\frac{n}{2} \\rfloor\\)</span> 大，<span\r\nclass=\"math inline\">\\(S_{i},S_{j}\\)</span>\r\n放在新数列中偶数下标位置，<span\r\nclass=\"math inline\">\\(S_{x},S_{y}\\)</span>\r\n放在新数列中奇数下标位置，若原来将 <span\r\nclass=\"math inline\">\\(S_{x}\\)</span> 放在 <span\r\nclass=\"math inline\">\\(S_{j}\\)</span> 旁满足条件，则 <span\r\nclass=\"math inline\">\\(S_{i} &gt; S_{j} &gt; S_{x} &gt;\r\nS_{y}\\)</span>。则交换后一定满足条件。</p>\r\n<p>因此将序列排序之后按照如上规则制造结果序列，最后判断一次即可，时间复杂度\r\n<span class=\"math inline\">\\(O(n \\log n)\\)</span>。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 200101</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"type\">int</span> nums[max_n];</span><br><span class=\"line\"><span class=\"type\">int</span> ans[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(nums[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(nums + <span class=\"number\">1</span>, nums + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> mid = n / <span class=\"number\">2</span> + <span class=\"number\">1</span>, r = n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans[i] = nums[mid--];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ans[i] = nums[r--];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt; n; i += <span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans[i] &lt;= ans[i - <span class=\"number\">1</span>] || ans[i] &lt;= ans[i + <span class=\"number\">1</span>])</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"[ARC161B] Exactly Three Bits 题解","tag":null,"mathjax":true,"_content":"\n# [ARC161B] Exactly Three Bits 题解\n\n<!-- more -->\n\n\n## Link\n\n[洛谷](https://www.luogu.com.cn/problem/AT_arc161_b)\n\n[AtCoder](https://atcoder.jp/contests/arc161/tasks/arc161_b)\n\n## Description\n\n找到不大于 $n$ 的最大正整数 $x$ 满足 $x$ 的二进制表示中恰好有 $3$ 位为 $1$。\n\n## Solution\n\n进行分类讨论：\n\n- 当 $n$ 的二进制表示中有不少于 $3$ 位是 $1$ 是直接选择前三个，剩下的填 $0$。\n\n- 当 $n$ 的二进制表示有 $2$ 位是 $1$ 时，无法通过全取 $1$ 满足条件，那么应该将第二个 $1$ 变为 $0$，然后取后面的两个 $1$，可以这么做的条件是第二个 $1$ 后面至少有两位。如不满足则须将第一个 $1$ 变为 $0$，在后面选连续三个 $1$，条件是后面至少有 $3$ 位，仍不满足只能输出 $-1$。\n\n- 当 $n$ 的二进制表示有 $1$ 位是 $1$ 时，无法通过全取 $1$ 满足条件，则须将第一个 $1$ 变为 $0$，在后面选连续三个 $1$，条件是后面至少有 $3$ 位，仍不满足只能输出 $-1$。\n\n**注意位运算的手动 `1LL`**，我在这里 WA 了三次。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T, n;\nint ans[1000];\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(T);\n    while (T--)\n    {\n        read(n);\n        int cnt = 0, p = 0, nd = 0;\n        while (n)\n        {\n            if (n & 1)\n            {\n                nd++;\n            }\n            ans[++cnt] = (n & 1);\n            n >>= 1;\n        }\n\n        int res = 0, tot = 0;\n        if (nd >= 3)\n        {\n            for (int i = cnt; i >= 1; i--)\n            {\n                res <<= 1LL;\n                if (ans[i] == 1 && tot < 3)\n                {\n                    res |= 1LL;\n                    tot++;\n                }\n            }\n            writeln(res);\n        }\n        else\n        {\n            int p[3] = {0, 0, 0};\n            int ct = 0;\n            for (int i = cnt; i; i--)\n            {\n                if (ans[i] == 1)\n                {\n                    p[++ct] = i;\n                }\n            }\n            if (ct == 1 || p[2] <= 2)\n            {\n                if (p[1] <= 3)\n                {\n                    puts(\"-1\");\n                }\n                else\n                {\n                    writeln((1LL << (p[1] - 2)) + (1LL << (p[1] - 3)) + (1LL << (p[1] - 4)));\n                }\n                continue;\n            }\n            else\n            {\n                writeln((1LL << (p[1] - 1)) + (1LL << (p[2] - 2)) + (1LL << (p[2] - 3)));\n            }\n        }\n    }\n    return 0;\n}\n```\n","source":"_posts/[ARC161B] Exactly Three Bits 题解.md","raw":"---\ntitle: \"[ARC161B] Exactly Three Bits 题解\"\ntag: \nmathjax: true\n---\n\n# [ARC161B] Exactly Three Bits 题解\n\n<!-- more -->\n\n\n## Link\n\n[洛谷](https://www.luogu.com.cn/problem/AT_arc161_b)\n\n[AtCoder](https://atcoder.jp/contests/arc161/tasks/arc161_b)\n\n## Description\n\n找到不大于 $n$ 的最大正整数 $x$ 满足 $x$ 的二进制表示中恰好有 $3$ 位为 $1$。\n\n## Solution\n\n进行分类讨论：\n\n- 当 $n$ 的二进制表示中有不少于 $3$ 位是 $1$ 是直接选择前三个，剩下的填 $0$。\n\n- 当 $n$ 的二进制表示有 $2$ 位是 $1$ 时，无法通过全取 $1$ 满足条件，那么应该将第二个 $1$ 变为 $0$，然后取后面的两个 $1$，可以这么做的条件是第二个 $1$ 后面至少有两位。如不满足则须将第一个 $1$ 变为 $0$，在后面选连续三个 $1$，条件是后面至少有 $3$ 位，仍不满足只能输出 $-1$。\n\n- 当 $n$ 的二进制表示有 $1$ 位是 $1$ 时，无法通过全取 $1$ 满足条件，则须将第一个 $1$ 变为 $0$，在后面选连续三个 $1$，条件是后面至少有 $3$ 位，仍不满足只能输出 $-1$。\n\n**注意位运算的手动 `1LL`**，我在这里 WA 了三次。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T, n;\nint ans[1000];\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(T);\n    while (T--)\n    {\n        read(n);\n        int cnt = 0, p = 0, nd = 0;\n        while (n)\n        {\n            if (n & 1)\n            {\n                nd++;\n            }\n            ans[++cnt] = (n & 1);\n            n >>= 1;\n        }\n\n        int res = 0, tot = 0;\n        if (nd >= 3)\n        {\n            for (int i = cnt; i >= 1; i--)\n            {\n                res <<= 1LL;\n                if (ans[i] == 1 && tot < 3)\n                {\n                    res |= 1LL;\n                    tot++;\n                }\n            }\n            writeln(res);\n        }\n        else\n        {\n            int p[3] = {0, 0, 0};\n            int ct = 0;\n            for (int i = cnt; i; i--)\n            {\n                if (ans[i] == 1)\n                {\n                    p[++ct] = i;\n                }\n            }\n            if (ct == 1 || p[2] <= 2)\n            {\n                if (p[1] <= 3)\n                {\n                    puts(\"-1\");\n                }\n                else\n                {\n                    writeln((1LL << (p[1] - 2)) + (1LL << (p[1] - 3)) + (1LL << (p[1] - 4)));\n                }\n                continue;\n            }\n            else\n            {\n                writeln((1LL << (p[1] - 1)) + (1LL << (p[2] - 2)) + (1LL << (p[2] - 3)));\n            }\n        }\n    }\n    return 0;\n}\n```\n","slug":"[ARC161B] Exactly Three Bits 题解","published":1,"date":"2023-10-04T14:11:08.260Z","updated":"2023-10-04T14:11:08.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9zq002josjagjahf42q","content":"<h1 id=\"arc161b-exactly-three-bits-题解\">[ARC161B] Exactly Three Bits\r\n题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"link\">Link</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_arc161_b\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/arc161/tasks/arc161_b\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>找到不大于 <span class=\"math inline\">\\(n\\)</span> 的最大正整数 <span\r\nclass=\"math inline\">\\(x\\)</span> 满足 <span\r\nclass=\"math inline\">\\(x\\)</span> 的二进制表示中恰好有 <span\r\nclass=\"math inline\">\\(3\\)</span> 位为 <span\r\nclass=\"math inline\">\\(1\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>进行分类讨论：</p>\r\n<ul>\r\n<li><p>当 <span class=\"math inline\">\\(n\\)</span> 的二进制表示中有不少于\r\n<span class=\"math inline\">\\(3\\)</span> 位是 <span\r\nclass=\"math inline\">\\(1\\)</span> 是直接选择前三个，剩下的填 <span\r\nclass=\"math inline\">\\(0\\)</span>。</p></li>\r\n<li><p>当 <span class=\"math inline\">\\(n\\)</span> 的二进制表示有 <span\r\nclass=\"math inline\">\\(2\\)</span> 位是 <span\r\nclass=\"math inline\">\\(1\\)</span> 时，无法通过全取 <span\r\nclass=\"math inline\">\\(1\\)</span> 满足条件，那么应该将第二个 <span\r\nclass=\"math inline\">\\(1\\)</span> 变为 <span\r\nclass=\"math inline\">\\(0\\)</span>，然后取后面的两个 <span\r\nclass=\"math inline\">\\(1\\)</span>，可以这么做的条件是第二个 <span\r\nclass=\"math inline\">\\(1\\)</span> 后面至少有两位。如不满足则须将第一个\r\n<span class=\"math inline\">\\(1\\)</span> 变为 <span\r\nclass=\"math inline\">\\(0\\)</span>，在后面选连续三个 <span\r\nclass=\"math inline\">\\(1\\)</span>，条件是后面至少有 <span\r\nclass=\"math inline\">\\(3\\)</span> 位，仍不满足只能输出 <span\r\nclass=\"math inline\">\\(-1\\)</span>。</p></li>\r\n<li><p>当 <span class=\"math inline\">\\(n\\)</span> 的二进制表示有 <span\r\nclass=\"math inline\">\\(1\\)</span> 位是 <span\r\nclass=\"math inline\">\\(1\\)</span> 时，无法通过全取 <span\r\nclass=\"math inline\">\\(1\\)</span> 满足条件，则须将第一个 <span\r\nclass=\"math inline\">\\(1\\)</span> 变为 <span\r\nclass=\"math inline\">\\(0\\)</span>，在后面选连续三个 <span\r\nclass=\"math inline\">\\(1\\)</span>，条件是后面至少有 <span\r\nclass=\"math inline\">\\(3\\)</span> 位，仍不满足只能输出 <span\r\nclass=\"math inline\">\\(-1\\)</span>。</p></li>\r\n</ul>\r\n<p><strong>注意位运算的手动 <code>1LL</code></strong>，我在这里 WA\r\n了三次。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T, n;</span><br><span class=\"line\"><span class=\"type\">int</span> ans[<span class=\"number\">1000</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">        <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>, p = <span class=\"number\">0</span>, nd = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                nd++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans[++cnt] = (n &amp; <span class=\"number\">1</span>);</span><br><span class=\"line\">            n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>, tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nd &gt;= <span class=\"number\">3</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = cnt; i &gt;= <span class=\"number\">1</span>; i--)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                res &lt;&lt;= <span class=\"number\">1LL</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ans[i] == <span class=\"number\">1</span> &amp;&amp; tot &lt; <span class=\"number\">3</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    res |= <span class=\"number\">1LL</span>;</span><br><span class=\"line\">                    tot++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">writeln</span>(res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> p[<span class=\"number\">3</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">            <span class=\"type\">int</span> ct = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = cnt; i; i--)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ans[i] == <span class=\"number\">1</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    p[++ct] = i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ct == <span class=\"number\">1</span> || p[<span class=\"number\">2</span>] &lt;= <span class=\"number\">2</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p[<span class=\"number\">1</span>] &lt;= <span class=\"number\">3</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">writeln</span>((<span class=\"number\">1LL</span> &lt;&lt; (p[<span class=\"number\">1</span>] - <span class=\"number\">2</span>)) + (<span class=\"number\">1LL</span> &lt;&lt; (p[<span class=\"number\">1</span>] - <span class=\"number\">3</span>)) + (<span class=\"number\">1LL</span> &lt;&lt; (p[<span class=\"number\">1</span>] - <span class=\"number\">4</span>)));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">writeln</span>((<span class=\"number\">1LL</span> &lt;&lt; (p[<span class=\"number\">1</span>] - <span class=\"number\">1</span>)) + (<span class=\"number\">1LL</span> &lt;&lt; (p[<span class=\"number\">2</span>] - <span class=\"number\">2</span>)) + (<span class=\"number\">1LL</span> &lt;&lt; (p[<span class=\"number\">2</span>] - <span class=\"number\">3</span>)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"arc161b-exactly-three-bits-题解\">[ARC161B] Exactly Three Bits\r\n题解</h1>","more":"<h2 id=\"link\">Link</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_arc161_b\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://atcoder.jp/contests/arc161/tasks/arc161_b\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>找到不大于 <span class=\"math inline\">\\(n\\)</span> 的最大正整数 <span\r\nclass=\"math inline\">\\(x\\)</span> 满足 <span\r\nclass=\"math inline\">\\(x\\)</span> 的二进制表示中恰好有 <span\r\nclass=\"math inline\">\\(3\\)</span> 位为 <span\r\nclass=\"math inline\">\\(1\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>进行分类讨论：</p>\r\n<ul>\r\n<li><p>当 <span class=\"math inline\">\\(n\\)</span> 的二进制表示中有不少于\r\n<span class=\"math inline\">\\(3\\)</span> 位是 <span\r\nclass=\"math inline\">\\(1\\)</span> 是直接选择前三个，剩下的填 <span\r\nclass=\"math inline\">\\(0\\)</span>。</p></li>\r\n<li><p>当 <span class=\"math inline\">\\(n\\)</span> 的二进制表示有 <span\r\nclass=\"math inline\">\\(2\\)</span> 位是 <span\r\nclass=\"math inline\">\\(1\\)</span> 时，无法通过全取 <span\r\nclass=\"math inline\">\\(1\\)</span> 满足条件，那么应该将第二个 <span\r\nclass=\"math inline\">\\(1\\)</span> 变为 <span\r\nclass=\"math inline\">\\(0\\)</span>，然后取后面的两个 <span\r\nclass=\"math inline\">\\(1\\)</span>，可以这么做的条件是第二个 <span\r\nclass=\"math inline\">\\(1\\)</span> 后面至少有两位。如不满足则须将第一个\r\n<span class=\"math inline\">\\(1\\)</span> 变为 <span\r\nclass=\"math inline\">\\(0\\)</span>，在后面选连续三个 <span\r\nclass=\"math inline\">\\(1\\)</span>，条件是后面至少有 <span\r\nclass=\"math inline\">\\(3\\)</span> 位，仍不满足只能输出 <span\r\nclass=\"math inline\">\\(-1\\)</span>。</p></li>\r\n<li><p>当 <span class=\"math inline\">\\(n\\)</span> 的二进制表示有 <span\r\nclass=\"math inline\">\\(1\\)</span> 位是 <span\r\nclass=\"math inline\">\\(1\\)</span> 时，无法通过全取 <span\r\nclass=\"math inline\">\\(1\\)</span> 满足条件，则须将第一个 <span\r\nclass=\"math inline\">\\(1\\)</span> 变为 <span\r\nclass=\"math inline\">\\(0\\)</span>，在后面选连续三个 <span\r\nclass=\"math inline\">\\(1\\)</span>，条件是后面至少有 <span\r\nclass=\"math inline\">\\(3\\)</span> 位，仍不满足只能输出 <span\r\nclass=\"math inline\">\\(-1\\)</span>。</p></li>\r\n</ul>\r\n<p><strong>注意位运算的手动 <code>1LL</code></strong>，我在这里 WA\r\n了三次。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T, n;</span><br><span class=\"line\"><span class=\"type\">int</span> ans[<span class=\"number\">1000</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">        <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>, p = <span class=\"number\">0</span>, nd = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                nd++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans[++cnt] = (n &amp; <span class=\"number\">1</span>);</span><br><span class=\"line\">            n &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>, tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nd &gt;= <span class=\"number\">3</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = cnt; i &gt;= <span class=\"number\">1</span>; i--)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                res &lt;&lt;= <span class=\"number\">1LL</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ans[i] == <span class=\"number\">1</span> &amp;&amp; tot &lt; <span class=\"number\">3</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    res |= <span class=\"number\">1LL</span>;</span><br><span class=\"line\">                    tot++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">writeln</span>(res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> p[<span class=\"number\">3</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">            <span class=\"type\">int</span> ct = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = cnt; i; i--)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ans[i] == <span class=\"number\">1</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    p[++ct] = i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (ct == <span class=\"number\">1</span> || p[<span class=\"number\">2</span>] &lt;= <span class=\"number\">2</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (p[<span class=\"number\">1</span>] &lt;= <span class=\"number\">3</span>)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"built_in\">writeln</span>((<span class=\"number\">1LL</span> &lt;&lt; (p[<span class=\"number\">1</span>] - <span class=\"number\">2</span>)) + (<span class=\"number\">1LL</span> &lt;&lt; (p[<span class=\"number\">1</span>] - <span class=\"number\">3</span>)) + (<span class=\"number\">1LL</span> &lt;&lt; (p[<span class=\"number\">1</span>] - <span class=\"number\">4</span>)));</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">writeln</span>((<span class=\"number\">1LL</span> &lt;&lt; (p[<span class=\"number\">1</span>] - <span class=\"number\">1</span>)) + (<span class=\"number\">1LL</span> &lt;&lt; (p[<span class=\"number\">2</span>] - <span class=\"number\">2</span>)) + (<span class=\"number\">1LL</span> &lt;&lt; (p[<span class=\"number\">2</span>] - <span class=\"number\">3</span>)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"[ARC165A] Sum equals LCM 题解","tag":null,"mathjax":true,"_content":"\n# [ARC165A] Sum equals LCM\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/AT_arc165_a)\n\n[AtCoder](https://www.luogu.com.cn/problem/AT_arc165_a)\n\n## Description\n\n**单测试点存在多组测试数据。**\n\n给定整数 $x$，判断是否有 $n$（$n \\geq 2$）个数的和为 $x$，最小公倍数也为 $x$。\n\n$1 \\leq T \\leq 100$，$2 \\leq x \\leq 10^{9}$。\n\n## Solution\n\n首先我们考虑到 $1$ 对最大公因数不会造成贡献，因此，如果我们找到了 $p \\leq n$ 个数的和 $sum \\leq x$ 且最小公倍数 $\\operatorname{LCM} = x$ 时，我们可以通过补充 $1$ 来满足题目条件。\n\n在 $a,b \\geq 2$ 时，我们可以证明 $a + b \\leq a \\times b$。\n\n$$\\texttt{当}\\ a,b \\geq 2\\ \\texttt{时显然}\\ \\frac{1}{a} + \\frac{1}{b} \\leq 1$$\n$$\\texttt{两边同时乘}\\ a\\times b\\ \\texttt{得}\\ a+b\\leq a\\times b$$\n\n于是我们只需要知道 $x$ 能否分解为**不同因数**的 $\\operatorname{LCM}$ 即可，也就是存在不同的质因数。\n\n直接写一个复杂度 $\\sqrt n$ 的分解质因数即可，复杂度 $O(\\sum \\sqrt{n})$。","source":"_posts/[ARC165A] Sum equals LCM 题解.md","raw":"---\ntitle: \"[ARC165A] Sum equals LCM 题解\"\ntag: \nmathjax: true\n---\n\n# [ARC165A] Sum equals LCM\n\n<!-- more -->\n\n\n## Links\n\n[洛谷](https://www.luogu.com.cn/problem/AT_arc165_a)\n\n[AtCoder](https://www.luogu.com.cn/problem/AT_arc165_a)\n\n## Description\n\n**单测试点存在多组测试数据。**\n\n给定整数 $x$，判断是否有 $n$（$n \\geq 2$）个数的和为 $x$，最小公倍数也为 $x$。\n\n$1 \\leq T \\leq 100$，$2 \\leq x \\leq 10^{9}$。\n\n## Solution\n\n首先我们考虑到 $1$ 对最大公因数不会造成贡献，因此，如果我们找到了 $p \\leq n$ 个数的和 $sum \\leq x$ 且最小公倍数 $\\operatorname{LCM} = x$ 时，我们可以通过补充 $1$ 来满足题目条件。\n\n在 $a,b \\geq 2$ 时，我们可以证明 $a + b \\leq a \\times b$。\n\n$$\\texttt{当}\\ a,b \\geq 2\\ \\texttt{时显然}\\ \\frac{1}{a} + \\frac{1}{b} \\leq 1$$\n$$\\texttt{两边同时乘}\\ a\\times b\\ \\texttt{得}\\ a+b\\leq a\\times b$$\n\n于是我们只需要知道 $x$ 能否分解为**不同因数**的 $\\operatorname{LCM}$ 即可，也就是存在不同的质因数。\n\n直接写一个复杂度 $\\sqrt n$ 的分解质因数即可，复杂度 $O(\\sum \\sqrt{n})$。","slug":"[ARC165A] Sum equals LCM 题解","published":1,"date":"2023-10-04T14:11:08.260Z","updated":"2023-10-04T14:11:08.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9zr002kosja0c8hdcq1","content":"<h1 id=\"arc165a-sum-equals-lcm\">[ARC165A] Sum equals LCM</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_arc165_a\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://www.luogu.com.cn/problem/AT_arc165_a\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p><strong>单测试点存在多组测试数据。</strong></p>\r\n<p>给定整数 <span class=\"math inline\">\\(x\\)</span>，判断是否有 <span\r\nclass=\"math inline\">\\(n\\)</span>（<span class=\"math inline\">\\(n \\geq\r\n2\\)</span>）个数的和为 <span\r\nclass=\"math inline\">\\(x\\)</span>，最小公倍数也为 <span\r\nclass=\"math inline\">\\(x\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(1 \\leq T \\leq 100\\)</span>，<span\r\nclass=\"math inline\">\\(2 \\leq x \\leq 10^{9}\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>首先我们考虑到 <span class=\"math inline\">\\(1\\)</span>\r\n对最大公因数不会造成贡献，因此，如果我们找到了 <span\r\nclass=\"math inline\">\\(p \\leq n\\)</span> 个数的和 <span\r\nclass=\"math inline\">\\(sum \\leq x\\)</span> 且最小公倍数 <span\r\nclass=\"math inline\">\\(\\operatorname{LCM} = x\\)</span>\r\n时，我们可以通过补充 <span class=\"math inline\">\\(1\\)</span>\r\n来满足题目条件。</p>\r\n<p>在 <span class=\"math inline\">\\(a,b \\geq 2\\)</span> 时，我们可以证明\r\n<span class=\"math inline\">\\(a + b \\leq a \\times b\\)</span>。</p>\r\n<p><span class=\"math display\">\\[\\texttt{当}\\ a,b \\geq 2\\\r\n\\texttt{时显然}\\ \\frac{1}{a} + \\frac{1}{b} \\leq 1\\]</span> <span\r\nclass=\"math display\">\\[\\texttt{两边同时乘}\\ a\\times b\\ \\texttt{得}\\\r\na+b\\leq a\\times b\\]</span></p>\r\n<p>于是我们只需要知道 <span class=\"math inline\">\\(x\\)</span>\r\n能否分解为<strong>不同因数</strong>的 <span\r\nclass=\"math inline\">\\(\\operatorname{LCM}\\)</span>\r\n即可，也就是存在不同的质因数。</p>\r\n<p>直接写一个复杂度 <span class=\"math inline\">\\(\\sqrt n\\)</span>\r\n的分解质因数即可，复杂度 <span class=\"math inline\">\\(O(\\sum\r\n\\sqrt{n})\\)</span>。</p>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"arc165a-sum-equals-lcm\">[ARC165A] Sum equals LCM</h1>","more":"<h2 id=\"links\">Links</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/AT_arc165_a\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://www.luogu.com.cn/problem/AT_arc165_a\">AtCoder</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p><strong>单测试点存在多组测试数据。</strong></p>\r\n<p>给定整数 <span class=\"math inline\">\\(x\\)</span>，判断是否有 <span\r\nclass=\"math inline\">\\(n\\)</span>（<span class=\"math inline\">\\(n \\geq\r\n2\\)</span>）个数的和为 <span\r\nclass=\"math inline\">\\(x\\)</span>，最小公倍数也为 <span\r\nclass=\"math inline\">\\(x\\)</span>。</p>\r\n<p><span class=\"math inline\">\\(1 \\leq T \\leq 100\\)</span>，<span\r\nclass=\"math inline\">\\(2 \\leq x \\leq 10^{9}\\)</span>。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>首先我们考虑到 <span class=\"math inline\">\\(1\\)</span>\r\n对最大公因数不会造成贡献，因此，如果我们找到了 <span\r\nclass=\"math inline\">\\(p \\leq n\\)</span> 个数的和 <span\r\nclass=\"math inline\">\\(sum \\leq x\\)</span> 且最小公倍数 <span\r\nclass=\"math inline\">\\(\\operatorname{LCM} = x\\)</span>\r\n时，我们可以通过补充 <span class=\"math inline\">\\(1\\)</span>\r\n来满足题目条件。</p>\r\n<p>在 <span class=\"math inline\">\\(a,b \\geq 2\\)</span> 时，我们可以证明\r\n<span class=\"math inline\">\\(a + b \\leq a \\times b\\)</span>。</p>\r\n<p><span class=\"math display\">\\[\\texttt{当}\\ a,b \\geq 2\\\r\n\\texttt{时显然}\\ \\frac{1}{a} + \\frac{1}{b} \\leq 1\\]</span> <span\r\nclass=\"math display\">\\[\\texttt{两边同时乘}\\ a\\times b\\ \\texttt{得}\\\r\na+b\\leq a\\times b\\]</span></p>\r\n<p>于是我们只需要知道 <span class=\"math inline\">\\(x\\)</span>\r\n能否分解为<strong>不同因数</strong>的 <span\r\nclass=\"math inline\">\\(\\operatorname{LCM}\\)</span>\r\n即可，也就是存在不同的质因数。</p>\r\n<p>直接写一个复杂度 <span class=\"math inline\">\\(\\sqrt n\\)</span>\r\n的分解质因数即可，复杂度 <span class=\"math inline\">\\(O(\\sum\r\n\\sqrt{n})\\)</span>。</p>"},{"title":"[CF1582C] Grandma Capa Knits a Scarf 题解","mathjax":true,"_content":"\n# Grandma Capa Knits a Scarf 题解\n\n<!-- more -->\n\n##  Link\n\n[洛谷](https://www.luogu.com.cn/problem/CF1582C)\n\n[Codeforces](https://codeforces.com/problemset/problem/1582/C)\n\n## Description\n\n给一个由小写字母组成的字符串 $s$，选择一个字母，删去这个字符串中任意个这个字母，使这个字符串变成回文的。\n\n如果存在多个答案，输出删除的字母个数最少的答案。\n\n## Solution\n\n发现字符只有`a`~`z`，数据范围非常小，可以暴力枚举删除的字符，记这个字符为 $S$，记删除字符为 $S$ 时需要删除的字符个数为 $res$，最终结果为 $ans$。\n\n在确定删除的字符后，利用双指针扫描，找到需要删除的个数。设双指针为 $l,r$。\n\n- 若 $s_{l} = s_{r}$，无需删除，`++l`，`--r`即可。\n\n- 若 $s_{l} \\ne s_{r}$，需要删除。\n  - $s_{l} = S$，删除 $s_{l}$，操作为  `++l`，`++res`。\n\n  - $s_{r} = S$，删除 $s_{r}$，操作为  `--l`，`++res`。\n  \n  - $s_{l} \\ne S \\text{且} s_{r} \\ne S$，无法删除，记录 $res = INT\\_MAX$，返回即可。\n\n每次取 $ans = \\min (ans,res)$，最终答案即为 $ans$。\n\n小优化：$ans = 1$ 时可直接输出，无需继续枚举。证明：若答案为 $0$，则当 $S$ 为任意字符时 $res$ 都为 $0$，不可能出现 $1$。因此 $ans = 1$ 即为最优解。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 101000\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T, n;\nchar s[max_n];\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(T);\n    while (T--)\n    {\n        read(n);\n        scanf(\"%s\", s + 1);\n        int ans = 998244353; // 随便写的，开的大于1e5就行\n        int l = 1, r = n;\n        for (int i = 1; i <= 26; i++) // 枚举删除的字符\n        {\n            int res = 0;\n            l = 1, r = n;\n            while (l < r)\n            {\n                if (s[l] == s[r])\n                {\n                    ++l, --r;\n                }\n                else if (s[l] - 'a' + 1 == i)\n                {\n                    ++res;\n                    ++l;\n                }\n                else if (s[r] - 'a' + 1 == i)\n                {\n                    ++res, --r;\n                }\n                else\n                {\n                    res = INT_MAX;\n                    break;\n                }\n            }\n            ans = min(ans, res);\n        }\n        writeln(ans < 998244353 ? ans : -1);\n    }\n    return 0;\n}\n```\n\n---\n\n[![Page Views Count](https://badges.toozhao.com/badges/01GXQDDFCB85TTEA1PQXXYPZQT/blue.svg)](https://badges.toozhao.com/stats/01GXQDDFCB85TTEA1PQXXYPZQT \"Get your own page views count badge on badges.toozhao.com\")\n","source":"_posts/[CF1582C] Grandma Capa Knits a Scarf 题解.md","raw":"---\ntitle: \"[CF1582C] Grandma Capa Knits a Scarf 题解\"\ntag: Codeforces\nmathjax: true\n---\n\n# Grandma Capa Knits a Scarf 题解\n\n<!-- more -->\n\n##  Link\n\n[洛谷](https://www.luogu.com.cn/problem/CF1582C)\n\n[Codeforces](https://codeforces.com/problemset/problem/1582/C)\n\n## Description\n\n给一个由小写字母组成的字符串 $s$，选择一个字母，删去这个字符串中任意个这个字母，使这个字符串变成回文的。\n\n如果存在多个答案，输出删除的字母个数最少的答案。\n\n## Solution\n\n发现字符只有`a`~`z`，数据范围非常小，可以暴力枚举删除的字符，记这个字符为 $S$，记删除字符为 $S$ 时需要删除的字符个数为 $res$，最终结果为 $ans$。\n\n在确定删除的字符后，利用双指针扫描，找到需要删除的个数。设双指针为 $l,r$。\n\n- 若 $s_{l} = s_{r}$，无需删除，`++l`，`--r`即可。\n\n- 若 $s_{l} \\ne s_{r}$，需要删除。\n  - $s_{l} = S$，删除 $s_{l}$，操作为  `++l`，`++res`。\n\n  - $s_{r} = S$，删除 $s_{r}$，操作为  `--l`，`++res`。\n  \n  - $s_{l} \\ne S \\text{且} s_{r} \\ne S$，无法删除，记录 $res = INT\\_MAX$，返回即可。\n\n每次取 $ans = \\min (ans,res)$，最终答案即为 $ans$。\n\n小优化：$ans = 1$ 时可直接输出，无需继续枚举。证明：若答案为 $0$，则当 $S$ 为任意字符时 $res$ 都为 $0$，不可能出现 $1$。因此 $ans = 1$ 即为最优解。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define max_n 101000\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint T, n;\nchar s[max_n];\nsigned main()\n{\n#if _clang_\n    freopen(\"1.in\", \"r\", stdin);\n    freopen(\"1.out\", \"w\", stdout);\n#endif\n    read(T);\n    while (T--)\n    {\n        read(n);\n        scanf(\"%s\", s + 1);\n        int ans = 998244353; // 随便写的，开的大于1e5就行\n        int l = 1, r = n;\n        for (int i = 1; i <= 26; i++) // 枚举删除的字符\n        {\n            int res = 0;\n            l = 1, r = n;\n            while (l < r)\n            {\n                if (s[l] == s[r])\n                {\n                    ++l, --r;\n                }\n                else if (s[l] - 'a' + 1 == i)\n                {\n                    ++res;\n                    ++l;\n                }\n                else if (s[r] - 'a' + 1 == i)\n                {\n                    ++res, --r;\n                }\n                else\n                {\n                    res = INT_MAX;\n                    break;\n                }\n            }\n            ans = min(ans, res);\n        }\n        writeln(ans < 998244353 ? ans : -1);\n    }\n    return 0;\n}\n```\n\n---\n\n[![Page Views Count](https://badges.toozhao.com/badges/01GXQDDFCB85TTEA1PQXXYPZQT/blue.svg)](https://badges.toozhao.com/stats/01GXQDDFCB85TTEA1PQXXYPZQT \"Get your own page views count badge on badges.toozhao.com\")\n","slug":"[CF1582C] Grandma Capa Knits a Scarf 题解","published":1,"date":"2023-10-04T14:11:08.260Z","updated":"2023-10-04T14:11:08.261Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9zt002losja9e9hhqbk","content":"<h1 id=\"grandma-capa-knits-a-scarf-题解\">Grandma Capa Knits a Scarf\r\n题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"link\">Link</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1582C\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1582/C\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给一个由小写字母组成的字符串 <span\r\nclass=\"math inline\">\\(s\\)</span>，选择一个字母，删去这个字符串中任意个这个字母，使这个字符串变成回文的。</p>\r\n<p>如果存在多个答案，输出删除的字母个数最少的答案。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>发现字符只有<code>a</code>~<code>z</code>，数据范围非常小，可以暴力枚举删除的字符，记这个字符为\r\n<span class=\"math inline\">\\(S\\)</span>，记删除字符为 <span\r\nclass=\"math inline\">\\(S\\)</span> 时需要删除的字符个数为 <span\r\nclass=\"math inline\">\\(res\\)</span>，最终结果为 <span\r\nclass=\"math inline\">\\(ans\\)</span>。</p>\r\n<p>在确定删除的字符后，利用双指针扫描，找到需要删除的个数。设双指针为\r\n<span class=\"math inline\">\\(l,r\\)</span>。</p>\r\n<ul>\r\n<li><p>若 <span class=\"math inline\">\\(s_{l} =\r\ns_{r}\\)</span>，无需删除，<code>++l</code>，<code>--r</code>即可。</p></li>\r\n<li><p>若 <span class=\"math inline\">\\(s_{l} \\ne\r\ns_{r}\\)</span>，需要删除。</p>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(s_{l} = S\\)</span>，删除 <span\r\nclass=\"math inline\">\\(s_{l}\\)</span>，操作为\r\n<code>++l</code>，<code>++res</code>。</p></li>\r\n<li><p><span class=\"math inline\">\\(s_{r} = S\\)</span>，删除 <span\r\nclass=\"math inline\">\\(s_{r}\\)</span>，操作为\r\n<code>--l</code>，<code>++res</code>。</p></li>\r\n<li><p><span class=\"math inline\">\\(s_{l} \\ne S \\text{且} s_{r} \\ne\r\nS\\)</span>，无法删除，记录 <span class=\"math inline\">\\(res =\r\nINT\\_MAX\\)</span>，返回即可。</p></li>\r\n</ul></li>\r\n</ul>\r\n<p>每次取 <span class=\"math inline\">\\(ans = \\min\r\n(ans,res)\\)</span>，最终答案即为 <span\r\nclass=\"math inline\">\\(ans\\)</span>。</p>\r\n<p>小优化：<span class=\"math inline\">\\(ans = 1\\)</span>\r\n时可直接输出，无需继续枚举。证明：若答案为 <span\r\nclass=\"math inline\">\\(0\\)</span>，则当 <span\r\nclass=\"math inline\">\\(S\\)</span> 为任意字符时 <span\r\nclass=\"math inline\">\\(res\\)</span> 都为 <span\r\nclass=\"math inline\">\\(0\\)</span>，不可能出现 <span\r\nclass=\"math inline\">\\(1\\)</span>。因此 <span class=\"math inline\">\\(ans =\r\n1\\)</span> 即为最优解。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 101000</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T, n;</span><br><span class=\"line\"><span class=\"type\">char</span> s[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, s + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">998244353</span>; <span class=\"comment\">// 随便写的，开的大于1e5就行</span></span><br><span class=\"line\">        <span class=\"type\">int</span> l = <span class=\"number\">1</span>, r = n;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">26</span>; i++) <span class=\"comment\">// 枚举删除的字符</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">            l = <span class=\"number\">1</span>, r = n;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (l &lt; r)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s[l] == s[r])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ++l, --r;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[l] - <span class=\"string\">&#x27;a&#x27;</span> + <span class=\"number\">1</span> == i)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ++res;</span><br><span class=\"line\">                    ++l;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[r] - <span class=\"string\">&#x27;a&#x27;</span> + <span class=\"number\">1</span> == i)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ++res, --r;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    res = INT_MAX;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans = <span class=\"built_in\">min</span>(ans, res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">writeln</span>(ans &lt; <span class=\"number\">998244353</span> ? ans : <span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<hr />\r\n<p><a href=\"https://badges.toozhao.com/stats/01GXQDDFCB85TTEA1PQXXYPZQT\"\r\ntitle=\"Get your own page views count badge on badges.toozhao.com\"><img\r\nsrc=\"https://badges.toozhao.com/badges/01GXQDDFCB85TTEA1PQXXYPZQT/blue.svg\"\r\nalt=\"Page Views Count\" /></a></p>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"grandma-capa-knits-a-scarf-题解\">Grandma Capa Knits a Scarf\r\n题解</h1>","more":"<h2 id=\"link\">Link</h2>\r\n<p><a href=\"https://www.luogu.com.cn/problem/CF1582C\">洛谷</a></p>\r\n<p><a\r\nhref=\"https://codeforces.com/problemset/problem/1582/C\">Codeforces</a></p>\r\n<h2 id=\"description\">Description</h2>\r\n<p>给一个由小写字母组成的字符串 <span\r\nclass=\"math inline\">\\(s\\)</span>，选择一个字母，删去这个字符串中任意个这个字母，使这个字符串变成回文的。</p>\r\n<p>如果存在多个答案，输出删除的字母个数最少的答案。</p>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>发现字符只有<code>a</code>~<code>z</code>，数据范围非常小，可以暴力枚举删除的字符，记这个字符为\r\n<span class=\"math inline\">\\(S\\)</span>，记删除字符为 <span\r\nclass=\"math inline\">\\(S\\)</span> 时需要删除的字符个数为 <span\r\nclass=\"math inline\">\\(res\\)</span>，最终结果为 <span\r\nclass=\"math inline\">\\(ans\\)</span>。</p>\r\n<p>在确定删除的字符后，利用双指针扫描，找到需要删除的个数。设双指针为\r\n<span class=\"math inline\">\\(l,r\\)</span>。</p>\r\n<ul>\r\n<li><p>若 <span class=\"math inline\">\\(s_{l} =\r\ns_{r}\\)</span>，无需删除，<code>++l</code>，<code>--r</code>即可。</p></li>\r\n<li><p>若 <span class=\"math inline\">\\(s_{l} \\ne\r\ns_{r}\\)</span>，需要删除。</p>\r\n<ul>\r\n<li><p><span class=\"math inline\">\\(s_{l} = S\\)</span>，删除 <span\r\nclass=\"math inline\">\\(s_{l}\\)</span>，操作为\r\n<code>++l</code>，<code>++res</code>。</p></li>\r\n<li><p><span class=\"math inline\">\\(s_{r} = S\\)</span>，删除 <span\r\nclass=\"math inline\">\\(s_{r}\\)</span>，操作为\r\n<code>--l</code>，<code>++res</code>。</p></li>\r\n<li><p><span class=\"math inline\">\\(s_{l} \\ne S \\text{且} s_{r} \\ne\r\nS\\)</span>，无法删除，记录 <span class=\"math inline\">\\(res =\r\nINT\\_MAX\\)</span>，返回即可。</p></li>\r\n</ul></li>\r\n</ul>\r\n<p>每次取 <span class=\"math inline\">\\(ans = \\min\r\n(ans,res)\\)</span>，最终答案即为 <span\r\nclass=\"math inline\">\\(ans\\)</span>。</p>\r\n<p>小优化：<span class=\"math inline\">\\(ans = 1\\)</span>\r\n时可直接输出，无需继续枚举。证明：若答案为 <span\r\nclass=\"math inline\">\\(0\\)</span>，则当 <span\r\nclass=\"math inline\">\\(S\\)</span> 为任意字符时 <span\r\nclass=\"math inline\">\\(res\\)</span> 都为 <span\r\nclass=\"math inline\">\\(0\\)</span>，不可能出现 <span\r\nclass=\"math inline\">\\(1\\)</span>。因此 <span class=\"math inline\">\\(ans =\r\n1\\)</span> 即为最优解。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> max_n 101000</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> T, n;</span><br><span class=\"line\"><span class=\"type\">char</span> s[max_n];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> _clang_</span></span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.in&quot;</span>, <span class=\"string\">&quot;r&quot;</span>, stdin);</span><br><span class=\"line\">    <span class=\"built_in\">freopen</span>(<span class=\"string\">&quot;1.out&quot;</span>, <span class=\"string\">&quot;w&quot;</span>, stdout);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(n);</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, s + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = <span class=\"number\">998244353</span>; <span class=\"comment\">// 随便写的，开的大于1e5就行</span></span><br><span class=\"line\">        <span class=\"type\">int</span> l = <span class=\"number\">1</span>, r = n;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">26</span>; i++) <span class=\"comment\">// 枚举删除的字符</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">            l = <span class=\"number\">1</span>, r = n;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (l &lt; r)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (s[l] == s[r])</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ++l, --r;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[l] - <span class=\"string\">&#x27;a&#x27;</span> + <span class=\"number\">1</span> == i)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ++res;</span><br><span class=\"line\">                    ++l;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s[r] - <span class=\"string\">&#x27;a&#x27;</span> + <span class=\"number\">1</span> == i)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    ++res, --r;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    res = INT_MAX;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans = <span class=\"built_in\">min</span>(ans, res);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">writeln</span>(ans &lt; <span class=\"number\">998244353</span> ? ans : <span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<hr />\r\n<p><a href=\"https://badges.toozhao.com/stats/01GXQDDFCB85TTEA1PQXXYPZQT\"\r\ntitle=\"Get your own page views count badge on badges.toozhao.com\"><img\r\nsrc=\"https://badges.toozhao.com/badges/01GXQDDFCB85TTEA1PQXXYPZQT/blue.svg\"\r\nalt=\"Page Views Count\" /></a></p>"},{"title":"洛谷 P9577 Dead Cells 题解","tag":null,"mathjax":true,"_content":"\n# 洛谷 P9577 Dead Cells 题解\n\n<!-- more -->\n\n## Solution\n\n这道题的主要难点在于对于 $a > b$ 的特判。\n\n当 $a > b$ 时，如果最后一次是乘 $2$，答案就是 $1 \\times 2 = 2$，否则答案是 $1$。\n\n当 $a < b$ 时，直接按照题目操作即可：\n\n- 当 $i \\equiv 0 \\pmod a$ 且 $i \\equiv 0 \\pmod b$ 时，直接跳过。\n- 否则，当 $i \\equiv 0 \\pmod a$ 时，$ans \\gets ans \\times 2$。\n- 否则，当 $i \\equiv 0 \\pmod b$ 时，$ans \\gets ans \\times \\operatorname{inv}(2)$。其中 $\\operatorname{inv}(2) = 499\\,122\\,177$。\n\n\n注意要经常对 $998\\,244\\,353$ 取模。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define inv2 499122177\n#define mo 998244353\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint a,b,k;\nint nums = 1;\nint ksm(int a,int b)\n{\n    int res = 1;\n    for(;b;b >>= 1,a = (a * a) % mo)\n    {\n        if(b & 1)\n        {\n            res = res * a % mo;\n        }\n    }\n    return res;\n}\nsigned main()\n{\n    read(a),read(b),read(k);\n    if(a > b)\n    {\n        writeln(((k % a) < (k % b))?(2):(1));\n        return 0;\n    }\n    for(int i = 1;i <= k;i++)\n    {\n        if((i % a == 0) && (i % b == 0))\n        {\n            continue;\n        }\n        if(i % a == 0)\n        {\n            nums = nums * 2;\n            nums %= mo;\n        }\n        if(i % b == 0)\n        {\n            nums = nums * inv2;\n            nums %= mo;\n        }\n    }\n    writeln(nums);\n    return 0;\n}\n```","source":"_posts/洛谷 P9577 Dead Cells 题解.md","raw":"---\ntitle: \"洛谷 P9577 Dead Cells 题解\"\ntag: \nmathjax: true\n---\n\n# 洛谷 P9577 Dead Cells 题解\n\n<!-- more -->\n\n## Solution\n\n这道题的主要难点在于对于 $a > b$ 的特判。\n\n当 $a > b$ 时，如果最后一次是乘 $2$，答案就是 $1 \\times 2 = 2$，否则答案是 $1$。\n\n当 $a < b$ 时，直接按照题目操作即可：\n\n- 当 $i \\equiv 0 \\pmod a$ 且 $i \\equiv 0 \\pmod b$ 时，直接跳过。\n- 否则，当 $i \\equiv 0 \\pmod a$ 时，$ans \\gets ans \\times 2$。\n- 否则，当 $i \\equiv 0 \\pmod b$ 时，$ans \\gets ans \\times \\operatorname{inv}(2)$。其中 $\\operatorname{inv}(2) = 499\\,122\\,177$。\n\n\n注意要经常对 $998\\,244\\,353$ 取模。\n\n## Codes\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define inv2 499122177\n#define mo 998244353\nvoid read(int &p)\n{\n    p = 0;\n    int k = 1;\n    char c = getchar();\n    while (c < '0' || c > '9')\n    {\n        if (c == '-')\n        {\n            k = -1;\n        }\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9')\n    {\n        p = p * 10 + c - '0';\n        c = getchar();\n    }\n    p *= k;\n    return;\n}\nvoid write_(int x)\n{\n    if (x < 0)\n    {\n        putchar('-');\n        x = -x;\n    }\n    if (x > 9)\n    {\n        write_(x / 10);\n    }\n    putchar(x % 10 + '0');\n}\nvoid writesp(int x)\n{\n    write_(x);\n    putchar(' ');\n}\nvoid writeln(int x)\n{\n    write_(x);\n    putchar('\\n');\n}\nint a,b,k;\nint nums = 1;\nint ksm(int a,int b)\n{\n    int res = 1;\n    for(;b;b >>= 1,a = (a * a) % mo)\n    {\n        if(b & 1)\n        {\n            res = res * a % mo;\n        }\n    }\n    return res;\n}\nsigned main()\n{\n    read(a),read(b),read(k);\n    if(a > b)\n    {\n        writeln(((k % a) < (k % b))?(2):(1));\n        return 0;\n    }\n    for(int i = 1;i <= k;i++)\n    {\n        if((i % a == 0) && (i % b == 0))\n        {\n            continue;\n        }\n        if(i % a == 0)\n        {\n            nums = nums * 2;\n            nums %= mo;\n        }\n        if(i % b == 0)\n        {\n            nums = nums * inv2;\n            nums %= mo;\n        }\n    }\n    writeln(nums);\n    return 0;\n}\n```","slug":"洛谷 P9577 Dead Cells 题解","published":1,"date":"2023-10-04T14:11:08.261Z","updated":"2023-10-04T14:11:08.261Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clnbxf9zt002mosja3lvo2rq5","content":"<h1 id=\"洛谷-p9577-dead-cells-题解\">洛谷 P9577 Dead Cells 题解</h1>\r\n<span id=\"more\"></span>\r\n<h2 id=\"solution\">Solution</h2>\r\n<p>这道题的主要难点在于对于 <span class=\"math inline\">\\(a &gt;\r\nb\\)</span> 的特判。</p>\r\n<p>当 <span class=\"math inline\">\\(a &gt; b\\)</span> 时，如果最后一次是乘\r\n<span class=\"math inline\">\\(2\\)</span>，答案就是 <span\r\nclass=\"math inline\">\\(1 \\times 2 = 2\\)</span>，否则答案是 <span\r\nclass=\"math inline\">\\(1\\)</span>。</p>\r\n<p>当 <span class=\"math inline\">\\(a &lt; b\\)</span>\r\n时，直接按照题目操作即可：</p>\r\n<ul>\r\n<li>当 <span class=\"math inline\">\\(i \\equiv 0 \\pmod a\\)</span> 且 <span\r\nclass=\"math inline\">\\(i \\equiv 0 \\pmod b\\)</span> 时，直接跳过。</li>\r\n<li>否则，当 <span class=\"math inline\">\\(i \\equiv 0 \\pmod a\\)</span>\r\n时，<span class=\"math inline\">\\(ans \\gets ans \\times 2\\)</span>。</li>\r\n<li>否则，当 <span class=\"math inline\">\\(i \\equiv 0 \\pmod b\\)</span>\r\n时，<span class=\"math inline\">\\(ans \\gets ans \\times\r\n\\operatorname{inv}(2)\\)</span>。其中 <span\r\nclass=\"math inline\">\\(\\operatorname{inv}(2) =\r\n499\\,122\\,177\\)</span>。</li>\r\n</ul>\r\n<p>注意要经常对 <span class=\"math inline\">\\(998\\,244\\,353\\)</span>\r\n取模。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> inv2 499122177</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mo 998244353</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> a,b,k;</span><br><span class=\"line\"><span class=\"type\">int</span> nums = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ksm</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;b;b &gt;&gt;= <span class=\"number\">1</span>,a = (a * a) % mo)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res = res * a % mo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(a),<span class=\"built_in\">read</span>(b),<span class=\"built_in\">read</span>(k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a &gt; b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">writeln</span>(((k % a) &lt; (k % b))?(<span class=\"number\">2</span>):(<span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= k;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((i % a == <span class=\"number\">0</span>) &amp;&amp; (i % b == <span class=\"number\">0</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i % a == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            nums = nums * <span class=\"number\">2</span>;</span><br><span class=\"line\">            nums %= mo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i % b == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            nums = nums * inv2;</span><br><span class=\"line\">            nums %= mo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(nums);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<link rel=\"stylesheet\" href=\"/css/spoiler.css\" type=\"text/css\"><script src=\"/js/spoiler.js\" type=\"text/javascript\" async></script>","site":{"data":{}},"excerpt":"<h1 id=\"洛谷-p9577-dead-cells-题解\">洛谷 P9577 Dead Cells 题解</h1>","more":"<h2 id=\"solution\">Solution</h2>\r\n<p>这道题的主要难点在于对于 <span class=\"math inline\">\\(a &gt;\r\nb\\)</span> 的特判。</p>\r\n<p>当 <span class=\"math inline\">\\(a &gt; b\\)</span> 时，如果最后一次是乘\r\n<span class=\"math inline\">\\(2\\)</span>，答案就是 <span\r\nclass=\"math inline\">\\(1 \\times 2 = 2\\)</span>，否则答案是 <span\r\nclass=\"math inline\">\\(1\\)</span>。</p>\r\n<p>当 <span class=\"math inline\">\\(a &lt; b\\)</span>\r\n时，直接按照题目操作即可：</p>\r\n<ul>\r\n<li>当 <span class=\"math inline\">\\(i \\equiv 0 \\pmod a\\)</span> 且 <span\r\nclass=\"math inline\">\\(i \\equiv 0 \\pmod b\\)</span> 时，直接跳过。</li>\r\n<li>否则，当 <span class=\"math inline\">\\(i \\equiv 0 \\pmod a\\)</span>\r\n时，<span class=\"math inline\">\\(ans \\gets ans \\times 2\\)</span>。</li>\r\n<li>否则，当 <span class=\"math inline\">\\(i \\equiv 0 \\pmod b\\)</span>\r\n时，<span class=\"math inline\">\\(ans \\gets ans \\times\r\n\\operatorname{inv}(2)\\)</span>。其中 <span\r\nclass=\"math inline\">\\(\\operatorname{inv}(2) =\r\n499\\,122\\,177\\)</span>。</li>\r\n</ul>\r\n<p>注意要经常对 <span class=\"math inline\">\\(998\\,244\\,353\\)</span>\r\n取模。</p>\r\n<h2 id=\"codes\">Codes</h2>\r\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> int long long</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> inv2 499122177</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mo 998244353</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">read</span><span class=\"params\">(<span class=\"type\">int</span> &amp;p)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    p = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">&#x27;0&#x27;</span> || c &gt; <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            k = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class=\"string\">&#x27;9&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p = p * <span class=\"number\">10</span> + c - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        c = <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    p *= k;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write_</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\">        x = -x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">write_</span>(x / <span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(x % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writesp</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">writeln</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">write_</span>(x);</span><br><span class=\"line\">    <span class=\"built_in\">putchar</span>(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> a,b,k;</span><br><span class=\"line\"><span class=\"type\">int</span> nums = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">ksm</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(;b;b &gt;&gt;= <span class=\"number\">1</span>,a = (a * a) % mo)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            res = res * a % mo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">signed</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(a),<span class=\"built_in\">read</span>(b),<span class=\"built_in\">read</span>(k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(a &gt; b)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">writeln</span>(((k % a) &lt; (k % b))?(<span class=\"number\">2</span>):(<span class=\"number\">1</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>;i &lt;= k;i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((i % a == <span class=\"number\">0</span>) &amp;&amp; (i % b == <span class=\"number\">0</span>))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i % a == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            nums = nums * <span class=\"number\">2</span>;</span><br><span class=\"line\">            nums %= mo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i % b == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            nums = nums * inv2;</span><br><span class=\"line\">            nums %= mo;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">writeln</span>(nums);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"clnbxf9yc0008osjacpmyg054","tag_id":"clnbxf9y80004osja1d5dfwhi","_id":"clnbxf9yh000cosjac6263w6e"},{"post_id":"clnbxf9y00001osja2fu3g19n","tag_id":"clnbxf9y80004osja1d5dfwhi","_id":"clnbxf9yi000eosjadoux60xo"},{"post_id":"clnbxf9ye000aosja2v8q2qrj","tag_id":"clnbxf9y80004osja1d5dfwhi","_id":"clnbxf9yk000hosja8mv4go6k"},{"post_id":"clnbxf9yh000dosja8rnigh7x","tag_id":"clnbxf9y80004osja1d5dfwhi","_id":"clnbxf9yl000josja83cd0nuj"},{"post_id":"clnbxf9y60003osjaa5jk1sg1","tag_id":"clnbxf9y80004osja1d5dfwhi","_id":"clnbxf9yn000mosja6t3ef01k"},{"post_id":"clnbxf9yj000fosja1fej2u4h","tag_id":"clnbxf9y80004osja1d5dfwhi","_id":"clnbxf9yo000oosja4iwl82re"},{"post_id":"clnbxf9yb0006osjad91m75hg","tag_id":"clnbxf9y80004osja1d5dfwhi","_id":"clnbxf9yp000qosja3x5odjz5"},{"post_id":"clnbxf9yo000posja5x1z7g43","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9yr000tosjadret3bae"},{"post_id":"clnbxf9yk000iosja8s8o3cx1","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9ys000vosjaf6qjaku1"},{"post_id":"clnbxf9yp000rosja615z63u9","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9yt000yosjab5e76yfw"},{"post_id":"clnbxf9yr000uosja8kzh5fer","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9yu0010osjagsaufkai"},{"post_id":"clnbxf9ym000kosjaaq8g5rph","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9yv0012osjabyo8ecm3"},{"post_id":"clnbxf9ys000wosja4hgd5fi1","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9yw0014osja5jq7fs51"},{"post_id":"clnbxf9yt000zosja69rddn31","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9yx0016osja57l95rq8"},{"post_id":"clnbxf9yn000nosja9bpmh0ri","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9yx0018osja9cemdlk7"},{"post_id":"clnbxf9yu0011osjaa9ee23m2","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9yy001aosjahgro7y5q"},{"post_id":"clnbxf9yv0013osja6y9i2cv8","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9yz001cosja59nwhfvh"},{"post_id":"clnbxf9yw0015osjab5tz78tm","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9z0001eosja8xc64qxt"},{"post_id":"clnbxf9yx0017osjaeh964uvn","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9z1001gosja0mmqbx8t"},{"post_id":"clnbxf9yx0019osja8971hedl","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9z2001iosja8snxa859"},{"post_id":"clnbxf9yy001bosja7dg3e0w2","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9z4001kosja1hja5l62"},{"post_id":"clnbxf9yz001dosja7rem1ood","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9z5001mosja1kwc6lt1"},{"post_id":"clnbxf9z0001fosja3hcna2mg","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9z6001oosjad5qk6hzw"},{"post_id":"clnbxf9z1001hosjab39bai37","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9z7001qosja85rp1ic5"},{"post_id":"clnbxf9z3001josja9tjb0gzt","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9z8001sosjabo61g83p"},{"post_id":"clnbxf9z4001losja17p451vc","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9za001uosjabmlo36d5"},{"post_id":"clnbxf9z5001nosjagouncve8","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9zb001wosja889zfpx1"},{"post_id":"clnbxf9z6001posja8ddshhof","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9zc001yosjab1ijbq5r"},{"post_id":"clnbxf9z7001rosja4h60gqya","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9zd0020osja1ud41sjz"},{"post_id":"clnbxf9z9001tosja8upe4nc8","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9ze0022osjahd111w7g"},{"post_id":"clnbxf9za001vosjabre7hijd","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9zg0024osja7fcagmxy"},{"post_id":"clnbxf9zb001xosjaaojgbkte","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9zh0026osja0bg8g0ul"},{"post_id":"clnbxf9zc001zosjaen6nhcrg","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9zi0028osja5ukufy5f"},{"post_id":"clnbxf9zd0021osja4axk1326","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9zj002aosjafnj719t8"},{"post_id":"clnbxf9zt002losja9e9hhqbk","tag_id":"clnbxf9yn000losjac9embgpp","_id":"clnbxf9zu002nosjaczy15jnq"}],"Tag":[{"name":"AtCoder","_id":"clnbxf9y80004osja1d5dfwhi"},{"name":"Codeforces","_id":"clnbxf9yn000losjac9embgpp"}]}}